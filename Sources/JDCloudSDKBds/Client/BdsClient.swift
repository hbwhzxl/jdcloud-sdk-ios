/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   区块链数据服务BDS
   提供各种公链数据的分析服务。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class BdsJDCloudClient :JDCloudClient{
    
    private final var bdsJDCloudClient:BdsJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "bds" + "v1"
    
    public let serviceName: String = "bds"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func updateInstanceAsync(request:UpdateInstanceRequest,requestComplation:@escaping ExecuteResult<UpdateInstanceResult>) throws {
        bdsJDCloudClient = self
        try UpdateInstanceExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func feeKBAsync(request:FeeKBRequest,requestComplation:@escaping ExecuteResult<FeeKBResult>) throws {
        bdsJDCloudClient = self
        try FeeKBExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func screenInfoAsync(request:ScreenInfoRequest,requestComplation:@escaping ExecuteResult<ScreenInfoResult>) throws {
        bdsJDCloudClient = self
        try ScreenInfoExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTaskAsync(request:DeleteTaskRequest,requestComplation:@escaping ExecuteResult<DeleteTaskResult>) throws {
        bdsJDCloudClient = self
        try DeleteTaskExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUsersAsync(request:DescribeUsersRequest,requestComplation:@escaping ExecuteResult<DescribeUsersResult>) throws {
        bdsJDCloudClient = self
        try DescribeUsersExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateUserAsync(request:UpdateUserRequest,requestComplation:@escaping ExecuteResult<UpdateUserResult>) throws {
        bdsJDCloudClient = self
        try UpdateUserExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func latestBlockAsync(request:LatestBlockRequest,requestComplation:@escaping ExecuteResult<LatestBlockResult>) throws {
        bdsJDCloudClient = self
        try LatestBlockExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteDatabaseAsync(request:DeleteDatabaseRequest,requestComplation:@escaping ExecuteResult<DeleteDatabaseResult>) throws {
        bdsJDCloudClient = self
        try DeleteDatabaseExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func valueDistributionAsync(request:ValueDistributionRequest,requestComplation:@escaping ExecuteResult<ValueDistributionResult>) throws {
        bdsJDCloudClient = self
        try ValueDistributionExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func largeBalanceInfoAsync(request:LargeBalanceInfoRequest,requestComplation:@escaping ExecuteResult<LargeBalanceInfoResult>) throws {
        bdsJDCloudClient = self
        try LargeBalanceInfoExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteUserAsync(request:DeleteUserRequest,requestComplation:@escaping ExecuteResult<DeleteUserResult>) throws {
        bdsJDCloudClient = self
        try DeleteUserExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        bdsJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createUserAsync(request:CreateUserRequest,requestComplation:@escaping ExecuteResult<CreateUserResult>) throws {
        bdsJDCloudClient = self
        try CreateUserExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserAsync(request:DescribeUserRequest,requestComplation:@escaping ExecuteResult<DescribeUserResult>) throws {
        bdsJDCloudClient = self
        try DescribeUserExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteInstanceAsync(request:DeleteInstanceRequest,requestComplation:@escaping ExecuteResult<DeleteInstanceResult>) throws {
        bdsJDCloudClient = self
        try DeleteInstanceExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func txUnconfirmedAsync(request:TxUnconfirmedRequest,requestComplation:@escaping ExecuteResult<TxUnconfirmedResult>) throws {
        bdsJDCloudClient = self
        try TxUnconfirmedExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func txCNTAsync(request:TxCNTRequest,requestComplation:@escaping ExecuteResult<TxCNTResult>) throws {
        bdsJDCloudClient = self
        try TxCNTExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQuotasAsync(request:DescribeQuotasRequest,requestComplation:@escaping ExecuteResult<DescribeQuotasResult>) throws {
        bdsJDCloudClient = self
        try DescribeQuotasExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createTaskAsync(request:CreateTaskRequest,requestComplation:@escaping ExecuteResult<CreateTaskResult>) throws {
        bdsJDCloudClient = self
        try CreateTaskExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func poolInfoAsync(request:PoolInfoRequest,requestComplation:@escaping ExecuteResult<PoolInfoResult>) throws {
        bdsJDCloudClient = self
        try PoolInfoExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDatabaseAsync(request:DescribeDatabaseRequest,requestComplation:@escaping ExecuteResult<DescribeDatabaseResult>) throws {
        bdsJDCloudClient = self
        try DescribeDatabaseExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTasksAsync(request:DescribeTasksRequest,requestComplation:@escaping ExecuteResult<DescribeTasksResult>) throws {
        bdsJDCloudClient = self
        try DescribeTasksExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInstanceAsync(request:CreateInstanceRequest,requestComplation:@escaping ExecuteResult<CreateInstanceResult>) throws {
        bdsJDCloudClient = self
        try CreateInstanceExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createDatabaseAsync(request:CreateDatabaseRequest,requestComplation:@escaping ExecuteResult<CreateDatabaseResult>) throws {
        bdsJDCloudClient = self
        try CreateDatabaseExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func blockTradeAsync(request:BlockTradeRequest,requestComplation:@escaping ExecuteResult<BlockTradeResult>) throws {
        bdsJDCloudClient = self
        try BlockTradeExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDatabasesAsync(request:DescribeDatabasesRequest,requestComplation:@escaping ExecuteResult<DescribeDatabasesResult>) throws {
        bdsJDCloudClient = self
        try DescribeDatabasesExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceResult>) throws {
        bdsJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func mempoolInfoAsync(request:MempoolInfoRequest,requestComplation:@escaping ExecuteResult<MempoolInfoResult>) throws {
        bdsJDCloudClient = self
        try MempoolInfoExecutor(jdCloudClient: bdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension BdsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "bds.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "bds.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
