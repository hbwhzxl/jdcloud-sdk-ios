/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 应用安全网关 API文档
   提供应用安全网关攻击事件统计、WAF实例管理、防护配置管理等相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class VpcwafJDCloudClient :JDCloudClient{
    
    private final var vpcwafJDCloudClient:VpcwafJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "vpcwaf" + "v1"
    
    public let serviceName: String = "vpcwaf"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeACLDataTrendAsync(request:DescribeACLDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeACLDataTrendResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeACLDataTrendExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func submitNewOrderAsync(request:SubmitNewOrderRequest,requestComplation:@escaping ExecuteResult<SubmitNewOrderResult>) throws {
        vpcwafJDCloudClient = self
        try SubmitNewOrderExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserConfigsAsync(request:DescribeUserConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeUserConfigsResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeUserConfigsExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTodayAttacksAsync(request:DescribeTodayAttacksRequest,requestComplation:@escaping ExecuteResult<DescribeTodayAttacksResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeTodayAttacksExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAttackTrendAsync(request:DescribeAttackTrendRequest,requestComplation:@escaping ExecuteResult<DescribeAttackTrendResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeAttackTrendExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserConfigAsync(request:DescribeUserConfigRequest,requestComplation:@escaping ExecuteResult<DescribeUserConfigResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeUserConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafConfigAsync(request:DescribeWafConfigRequest,requestComplation:@escaping ExecuteResult<DescribeWafConfigResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafVulsAsync(request:DescribeWafVulsRequest,requestComplation:@escaping ExecuteResult<DescribeWafVulsResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafVulsExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createUserConfigAsync(request:CreateUserConfigRequest,requestComplation:@escaping ExecuteResult<CreateUserConfigResult>) throws {
        vpcwafJDCloudClient = self
        try CreateUserConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyUserConfigAsync(request:ModifyUserConfigRequest,requestComplation:@escaping ExecuteResult<ModifyUserConfigResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyUserConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafCCsAsync(request:DescribeWafCCsRequest,requestComplation:@escaping ExecuteResult<DescribeWafCCsResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafCCsExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeApplyStatusAsync(request:DescribeApplyStatusRequest,requestComplation:@escaping ExecuteResult<DescribeApplyStatusResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeApplyStatusExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createWafAsync(request:CreateWafRequest,requestComplation:@escaping ExecuteResult<CreateWafResult>) throws {
        vpcwafJDCloudClient = self
        try CreateWafExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyCCEngineConfigAsync(request:ModifyCCEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyCCEngineConfigResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyCCEngineConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafsAsync(request:DescribeWafsRequest,requestComplation:@escaping ExecuteResult<DescribeWafsResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafsExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafActionAsync(request:ModifyWafActionRequest,requestComplation:@escaping ExecuteResult<ModifyWafActionResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyWafActionExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCCDataTrendAsync(request:DescribeCCDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeCCDataTrendResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeCCDataTrendExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafAsync(request:ModifyWafRequest,requestComplation:@escaping ExecuteResult<ModifyWafResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyWafExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQPSDataTrendAsync(request:DescribeQPSDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeQPSDataTrendResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeQPSDataTrendExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteUserConfigAsync(request:DeleteUserConfigRequest,requestComplation:@escaping ExecuteResult<DeleteUserConfigResult>) throws {
        vpcwafJDCloudClient = self
        try DeleteUserConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func applyAsync(request:ApplyRequest,requestComplation:@escaping ExecuteResult<ApplyResult>) throws {
        vpcwafJDCloudClient = self
        try ApplyExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableWafInstanceAsync(request:EnableWafInstanceRequest,requestComplation:@escaping ExecuteResult<EnableWafInstanceResult>) throws {
        vpcwafJDCloudClient = self
        try EnableWafInstanceExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeLBServerIdsAsync(request:DescribeLBServerIdsRequest,requestComplation:@escaping ExecuteResult<DescribeLBServerIdsResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeLBServerIdsExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteWafAsync(request:DeleteWafRequest,requestComplation:@escaping ExecuteResult<DeleteWafResult>) throws {
        vpcwafJDCloudClient = self
        try DeleteWafExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafPriceAsync(request:DescribeWafPriceRequest,requestComplation:@escaping ExecuteResult<DescribeWafPriceResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafPriceExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableWafInstanceAsync(request:DisableWafInstanceRequest,requestComplation:@escaping ExecuteResult<DisableWafInstanceResult>) throws {
        vpcwafJDCloudClient = self
        try DisableWafInstanceExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyAntisdEngineConfigAsync(request:ModifyAntisdEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyAntisdEngineConfigResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyAntisdEngineConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafACLsAsync(request:DescribeWafACLsRequest,requestComplation:@escaping ExecuteResult<DescribeWafACLsResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafACLsExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyAntibfEngineConfigAsync(request:ModifyAntibfEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyAntibfEngineConfigResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyAntibfEngineConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafEngineConfigAsync(request:ModifyWafEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyWafEngineConfigResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyWafEngineConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyMaliciousIPEngineConfigAsync(request:ModifyMaliciousIPEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyMaliciousIPEngineConfigResult>) throws {
        vpcwafJDCloudClient = self
        try ModifyMaliciousIPEngineConfigExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafAsync(request:DescribeWafRequest,requestComplation:@escaping ExecuteResult<DescribeWafResult>) throws {
        vpcwafJDCloudClient = self
        try DescribeWafExecutor(jdCloudClient: vpcwafJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension VpcwafJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vpcwaf.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "vpcwaf.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
