/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 主机安全 API
   提供主机告警信息，漏洞信息以及相关统计信息接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class HipsJDCloudClient :JDCloudClient{
    
    private final var hipsJDCloudClient:HipsJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "hips" + "v1"
    
    public let serviceName: String = "hips"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func queryWarnsServerAttacksAsync(request:QueryWarnsServerAttacksRequest,requestComplation:@escaping ExecuteResult<QueryWarnsServerAttacksResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsServerAttacksExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServerLoginLocationsAsync(request:QueryServerLoginLocationsRequest,requestComplation:@escaping ExecuteResult<QueryServerLoginLocationsResult>) throws {
        hipsJDCloudClient = self
        try QueryServerLoginLocationsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServerNoAgentCountAsync(request:QueryServerNoAgentCountRequest,requestComplation:@escaping ExecuteResult<QueryServerNoAgentCountResult>) throws {
        hipsJDCloudClient = self
        try QueryServerNoAgentCountExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryLeaksAsync(request:QueryLeaksRequest,requestComplation:@escaping ExecuteResult<QueryLeaksResult>) throws {
        hipsJDCloudClient = self
        try QueryLeaksExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryNotifyRuleContactsAsync(request:QueryNotifyRuleContactsRequest,requestComplation:@escaping ExecuteResult<QueryNotifyRuleContactsResult>) throws {
        hipsJDCloudClient = self
        try QueryNotifyRuleContactsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryLeaksRecentCountsAsync(request:QueryLeaksRecentCountsRequest,requestComplation:@escaping ExecuteResult<QueryLeaksRecentCountsResult>) throws {
        hipsJDCloudClient = self
        try QueryLeaksRecentCountsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsAttackInfosAsync(request:QueryWarnsAttackInfosRequest,requestComplation:@escaping ExecuteResult<QueryWarnsAttackInfosResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsAttackInfosExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryNoticeAsync(request:QueryNoticeRequest,requestComplation:@escaping ExecuteResult<QueryNoticeResult>) throws {
        hipsJDCloudClient = self
        try QueryNoticeExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsServerWeakPasswordsAsync(request:QueryWarnsServerWeakPasswordsRequest,requestComplation:@escaping ExecuteResult<QueryWarnsServerWeakPasswordsResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsServerWeakPasswordsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func fixServerLeaksAsync(request:FixServerLeaksRequest,requestComplation:@escaping ExecuteResult<FixServerLeaksResult>) throws {
        hipsJDCloudClient = self
        try FixServerLeaksExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryLeaksRecentCountByOSAsync(request:QueryLeaksRecentCountByOSRequest,requestComplation:@escaping ExecuteResult<QueryLeaksRecentCountByOSResult>) throws {
        hipsJDCloudClient = self
        try QueryLeaksRecentCountByOSExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServerLeakInfosAsync(request:QueryServerLeakInfosRequest,requestComplation:@escaping ExecuteResult<QueryServerLeakInfosResult>) throws {
        hipsJDCloudClient = self
        try QueryServerLeakInfosExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsRemoteLoginCountAsync(request:QueryWarnsRemoteLoginCountRequest,requestComplation:@escaping ExecuteResult<QueryWarnsRemoteLoginCountResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsRemoteLoginCountExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServersAsync(request:QueryServersRequest,requestComplation:@escaping ExecuteResult<QueryServersResult>) throws {
        hipsJDCloudClient = self
        try QueryServersExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsWeakPasswordCountAsync(request:QueryWarnsWeakPasswordCountRequest,requestComplation:@escaping ExecuteResult<QueryWarnsWeakPasswordCountResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsWeakPasswordCountExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryNotifyRulesAsync(request:QueryNotifyRulesRequest,requestComplation:@escaping ExecuteResult<QueryNotifyRulesResult>) throws {
        hipsJDCloudClient = self
        try QueryNotifyRulesExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setNotifyRuleAsync(request:SetNotifyRuleRequest,requestComplation:@escaping ExecuteResult<SetNotifyRuleResult>) throws {
        hipsJDCloudClient = self
        try SetNotifyRuleExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryLeaksTopCountServersAsync(request:QueryLeaksTopCountServersRequest,requestComplation:@escaping ExecuteResult<QueryLeaksTopCountServersResult>) throws {
        hipsJDCloudClient = self
        try QueryLeaksTopCountServersExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsServerWebShellsAsync(request:QueryWarnsServerWebShellsRequest,requestComplation:@escaping ExecuteResult<QueryWarnsServerWebShellsResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsServerWebShellsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsServerRemoteLoginsAsync(request:QueryWarnsServerRemoteLoginsRequest,requestComplation:@escaping ExecuteResult<QueryWarnsServerRemoteLoginsResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsServerRemoteLoginsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsWeakPasswordInfosAsync(request:QueryWarnsWeakPasswordInfosRequest,requestComplation:@escaping ExecuteResult<QueryWarnsWeakPasswordInfosResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsWeakPasswordInfosExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsRemoteLoginsAsync(request:QueryWarnsRemoteLoginsRequest,requestComplation:@escaping ExecuteResult<QueryWarnsRemoteLoginsResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsRemoteLoginsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsAttackCountAsync(request:QueryWarnsAttackCountRequest,requestComplation:@escaping ExecuteResult<QueryWarnsAttackCountResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsAttackCountExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryNoticesAsync(request:QueryNoticesRequest,requestComplation:@escaping ExecuteResult<QueryNoticesResult>) throws {
        hipsJDCloudClient = self
        try QueryNoticesExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setServerLoginLocationsAsync(request:SetServerLoginLocationsRequest,requestComplation:@escaping ExecuteResult<SetServerLoginLocationsResult>) throws {
        hipsJDCloudClient = self
        try SetServerLoginLocationsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsCountAsync(request:QueryWarnsCountRequest,requestComplation:@escaping ExecuteResult<QueryWarnsCountResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsCountExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryLocationsAsync(request:QueryLocationsRequest,requestComplation:@escaping ExecuteResult<QueryLocationsResult>) throws {
        hipsJDCloudClient = self
        try QueryLocationsExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServerNoAgentAsync(request:QueryServerNoAgentRequest,requestComplation:@escaping ExecuteResult<QueryServerNoAgentResult>) throws {
        hipsJDCloudClient = self
        try QueryServerNoAgentExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServerHandleLeaksAdviceAsync(request:QueryServerHandleLeaksAdviceRequest,requestComplation:@escaping ExecuteResult<QueryServerHandleLeaksAdviceResult>) throws {
        hipsJDCloudClient = self
        try QueryServerHandleLeaksAdviceExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsInfosAsync(request:QueryWarnsInfosRequest,requestComplation:@escaping ExecuteResult<QueryWarnsInfosResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsInfosExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWarnsReportAsync(request:QueryWarnsReportRequest,requestComplation:@escaping ExecuteResult<QueryWarnsReportResult>) throws {
        hipsJDCloudClient = self
        try QueryWarnsReportExecutor(jdCloudClient: hipsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension HipsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "hips.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "hips.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
