/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD quota API
   API JDCLOUD quota API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询用户配额列表
public class QueryUserQuotaListRequest:JdCloudRequest
{
    /// 业务线
    var appCode:String?

    /// 可用配额
    var availableQuota:Int?

    /// CountSql
    var countSql:Bool?

    /// id
    var id:Int?

    /// OrderBy
    var orderBy:String?

    /// PageNum
    var pageNum:Int?

    /// PageSize
    var pageSize:Int?

    /// PageSizeZero
    var pageSizeZero:Bool?

    /// 用户pin
    var pin:String?

    /// 产品名称
    var productName:String?

    /// Reasonable
    var reasonable:Bool?

    /// 地域
    var region:String?

    /// 区域配额
    var regionQuota:Int?

    /// 父层id
    var resourceId:String?

    /// 资源产品线
    var serviceCode:String?

    /// 站点类型
    var siteType:Int?

    /// 已用配额
    var usedQuota:Int?

    /// 用户该地域该资源下的配额值
    var userQuota:Int?




    enum QueryUserQuotaListRequestRequestCodingKeys: String, CodingKey {
        case appCode
        case availableQuota
        case countSql
        case id
        case orderBy
        case pageNum
        case pageSize
        case pageSizeZero
        case pin
        case productName
        case reasonable
        case region
        case regionQuota
        case resourceId
        case serviceCode
        case siteType
        case usedQuota
        case userQuota
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: QueryUserQuotaListRequestRequestCodingKeys.self)
        try container.encode(appCode, forKey: .appCode)
        try container.encode(availableQuota, forKey: .availableQuota)
        try container.encode(countSql, forKey: .countSql)
        try container.encode(id, forKey: .id)
        try container.encode(orderBy, forKey: .orderBy)
        try container.encode(pageNum, forKey: .pageNum)
        try container.encode(pageSize, forKey: .pageSize)
        try container.encode(pageSizeZero, forKey: .pageSizeZero)
        try container.encode(pin, forKey: .pin)
        try container.encode(productName, forKey: .productName)
        try container.encode(reasonable, forKey: .reasonable)
        try container.encode(region, forKey: .region)
        try container.encode(regionQuota, forKey: .regionQuota)
        try container.encode(resourceId, forKey: .resourceId)
        try container.encode(serviceCode, forKey: .serviceCode)
        try container.encode(siteType, forKey: .siteType)
        try container.encode(usedQuota, forKey: .usedQuota)
        try container.encode(userQuota, forKey: .userQuota)

    }
}
