/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云jcq接口
   jcq相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class JcqJDCloudClient :JDCloudClient{
    
    private final var jcqJDCloudClient:JcqJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "jcq" + "v1"
    
    public let serviceName: String = "jcq"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func setUserQuotaOpsAsync(request:SetUserQuotaOpsRequest,requestComplation:@escaping ExecuteResult<SetUserQuotaOpsResult>) throws {
        jcqJDCloudClient = self
        try SetUserQuotaOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAccessPointOpsAsync(request:DescribeAccessPointOpsRequest,requestComplation:@escaping ExecuteResult<DescribeAccessPointOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeAccessPointOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func listDeadLettersAsync(request:ListDeadLettersRequest,requestComplation:@escaping ExecuteResult<ListDeadLettersResult>) throws {
        jcqJDCloudClient = self
        try ListDeadLettersExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDeadLetterNumbersAsync(request:DescribeDeadLetterNumbersRequest,requestComplation:@escaping ExecuteResult<DescribeDeadLetterNumbersResult>) throws {
        jcqJDCloudClient = self
        try DescribeDeadLetterNumbersExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getUserQuotaOpsAsync(request:GetUserQuotaOpsRequest,requestComplation:@escaping ExecuteResult<GetUserQuotaOpsResult>) throws {
        jcqJDCloudClient = self
        try GetUserQuotaOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func recoverTopicOpsAsync(request:RecoverTopicOpsRequest,requestComplation:@escaping ExecuteResult<RecoverTopicOpsResult>) throws {
        jcqJDCloudClient = self
        try RecoverTopicOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func cleanMessagesAsync(request:CleanMessagesRequest,requestComplation:@escaping ExecuteResult<CleanMessagesResult>) throws {
        jcqJDCloudClient = self
        try CleanMessagesExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyTopicAttributeAsync(request:ModifyTopicAttributeRequest,requestComplation:@escaping ExecuteResult<ModifyTopicAttributeResult>) throws {
        jcqJDCloudClient = self
        try ModifyTopicAttributeExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTopicAsync(request:DeleteTopicRequest,requestComplation:@escaping ExecuteResult<DeleteTopicResult>) throws {
        jcqJDCloudClient = self
        try DeleteTopicExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func resendDeadLettersAsync(request:ResendDeadLettersRequest,requestComplation:@escaping ExecuteResult<ResendDeadLettersResult>) throws {
        jcqJDCloudClient = self
        try ResendDeadLettersExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDeadLetterNumbersWithTopicOpsAsync(request:DescribeDeadLetterNumbersWithTopicOpsRequest,requestComplation:@escaping ExecuteResult<DescribeDeadLetterNumbersWithTopicOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeDeadLetterNumbersWithTopicOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyTopicAttributesOpsAsync(request:ModifyTopicAttributesOpsRequest,requestComplation:@escaping ExecuteResult<ModifyTopicAttributesOpsResult>) throws {
        jcqJDCloudClient = self
        try ModifyTopicAttributesOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAccessPointAsync(request:DescribeAccessPointRequest,requestComplation:@escaping ExecuteResult<DescribeAccessPointResult>) throws {
        jcqJDCloudClient = self
        try DescribeAccessPointExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessageOpsAsync(request:DescribeMessageOpsRequest,requestComplation:@escaping ExecuteResult<DescribeMessageOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeMessageOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSubscriptionsOpsAsync(request:DescribeSubscriptionsOpsRequest,requestComplation:@escaping ExecuteResult<DescribeSubscriptionsOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeSubscriptionsOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTopicsAsync(request:DescribeTopicsRequest,requestComplation:@escaping ExecuteResult<DescribeTopicsResult>) throws {
        jcqJDCloudClient = self
        try DescribeTopicsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendMessageAsync(request:SendMessageRequest,requestComplation:@escaping ExecuteResult<SendMessageResult>) throws {
        jcqJDCloudClient = self
        try SendMessageExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessagesOpsAsync(request:DescribeMessagesOpsRequest,requestComplation:@escaping ExecuteResult<DescribeMessagesOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeMessagesOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func removePermissionAsync(request:RemovePermissionRequest,requestComplation:@escaping ExecuteResult<RemovePermissionResult>) throws {
        jcqJDCloudClient = self
        try RemovePermissionExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func resetConsumeOffsetAsync(request:ResetConsumeOffsetRequest,requestComplation:@escaping ExecuteResult<ResetConsumeOffsetResult>) throws {
        jcqJDCloudClient = self
        try ResetConsumeOffsetExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteDeadLettersAsync(request:DeleteDeadLettersRequest,requestComplation:@escaping ExecuteResult<DeleteDeadLettersResult>) throws {
        jcqJDCloudClient = self
        try DeleteDeadLettersExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createTopicAsync(request:CreateTopicRequest,requestComplation:@escaping ExecuteResult<CreateTopicResult>) throws {
        jcqJDCloudClient = self
        try CreateTopicExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createSubscriptionAsync(request:CreateSubscriptionRequest,requestComplation:@escaping ExecuteResult<CreateSubscriptionResult>) throws {
        jcqJDCloudClient = self
        try CreateSubscriptionExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeConsumerGroupIdsAsync(request:DescribeConsumerGroupIdsRequest,requestComplation:@escaping ExecuteResult<DescribeConsumerGroupIdsResult>) throws {
        jcqJDCloudClient = self
        try DescribeConsumerGroupIdsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifySubscriptionAttributeAsync(request:ModifySubscriptionAttributeRequest,requestComplation:@escaping ExecuteResult<ModifySubscriptionAttributeResult>) throws {
        jcqJDCloudClient = self
        try ModifySubscriptionAttributeExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSubscriptionAsync(request:DescribeSubscriptionRequest,requestComplation:@escaping ExecuteResult<DescribeSubscriptionResult>) throws {
        jcqJDCloudClient = self
        try DescribeSubscriptionExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addPermissionAsync(request:AddPermissionRequest,requestComplation:@escaping ExecuteResult<AddPermissionResult>) throws {
        jcqJDCloudClient = self
        try AddPermissionExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTopicAsync(request:DescribeTopicRequest,requestComplation:@escaping ExecuteResult<DescribeTopicResult>) throws {
        jcqJDCloudClient = self
        try DescribeTopicExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessagesAsync(request:DescribeMessagesRequest,requestComplation:@escaping ExecuteResult<DescribeMessagesResult>) throws {
        jcqJDCloudClient = self
        try DescribeMessagesExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSubscriptionsAsync(request:DescribeSubscriptionsRequest,requestComplation:@escaping ExecuteResult<DescribeSubscriptionsResult>) throws {
        jcqJDCloudClient = self
        try DescribeSubscriptionsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessageAsync(request:DescribeMessageRequest,requestComplation:@escaping ExecuteResult<DescribeMessageResult>) throws {
        jcqJDCloudClient = self
        try DescribeMessageExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describePermissionAsync(request:DescribePermissionRequest,requestComplation:@escaping ExecuteResult<DescribePermissionResult>) throws {
        jcqJDCloudClient = self
        try DescribePermissionExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTopicsOpsAsync(request:DescribeTopicsOpsRequest,requestComplation:@escaping ExecuteResult<DescribeTopicsOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeTopicsOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDeadLetterNumbersWithTopicAsync(request:DescribeDeadLetterNumbersWithTopicRequest,requestComplation:@escaping ExecuteResult<DescribeDeadLetterNumbersWithTopicResult>) throws {
        jcqJDCloudClient = self
        try DescribeDeadLetterNumbersWithTopicExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteSubscriptionAsync(request:DeleteSubscriptionRequest,requestComplation:@escaping ExecuteResult<DeleteSubscriptionResult>) throws {
        jcqJDCloudClient = self
        try DeleteSubscriptionExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTopicOpsAsync(request:DescribeTopicOpsRequest,requestComplation:@escaping ExecuteResult<DescribeTopicOpsResult>) throws {
        jcqJDCloudClient = self
        try DescribeTopicOpsExecutor(jdCloudClient: jcqJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension JcqJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jcq.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "jcq.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
