/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD UCAPI instance API
   API related to UCAPI instances

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class UcapiJDCloudClient :JDCloudClient{
    
    private final var ucapiJDCloudClient:UcapiJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ucapi" + "v1"
    
    public let serviceName: String = "ucapi"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func updateUserRemindStatusAsync(request:UpdateUserRemindStatusRequest,requestComplation:@escaping ExecuteResult<UpdateUserRemindStatusResult>) throws {
        ucapiJDCloudClient = self
        try UpdateUserRemindStatusExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkRechargeAsync(request:CheckRechargeRequest,requestComplation:@escaping ExecuteResult<CheckRechargeResult>) throws {
        ucapiJDCloudClient = self
        try CheckRechargeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addContactGroupAsync(request:AddContactGroupRequest,requestComplation:@escaping ExecuteResult<AddContactGroupResult>) throws {
        ucapiJDCloudClient = self
        try AddContactGroupExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserAuthSateAsync(request:DescribeUserAuthSateRequest,requestComplation:@escaping ExecuteResult<DescribeUserAuthSateResult>) throws {
        ucapiJDCloudClient = self
        try DescribeUserAuthSateExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkActiveAsync(request:CheckActiveRequest,requestComplation:@escaping ExecuteResult<CheckActiveResult>) throws {
        ucapiJDCloudClient = self
        try CheckActiveExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteContactPersonCheckAsync(request:DeleteContactPersonCheckRequest,requestComplation:@escaping ExecuteResult<DeleteContactPersonCheckResult>) throws {
        ucapiJDCloudClient = self
        try DeleteContactPersonCheckExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendRemittanceCodeAsync(request:SendRemittanceCodeRequest,requestComplation:@escaping ExecuteResult<SendRemittanceCodeResult>) throws {
        ucapiJDCloudClient = self
        try SendRemittanceCodeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func validatePhoneExistAsync(request:ValidatePhoneExistRequest,requestComplation:@escaping ExecuteResult<ValidatePhoneExistResult>) throws {
        ucapiJDCloudClient = self
        try ValidatePhoneExistExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteContactPersonAsync(request:DeleteContactPersonRequest,requestComplation:@escaping ExecuteResult<DeleteContactPersonResult>) throws {
        ucapiJDCloudClient = self
        try DeleteContactPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateSensitiveOpSettingAsync(request:UpdateSensitiveOpSettingRequest,requestComplation:@escaping ExecuteResult<UpdateSensitiveOpSettingResult>) throws {
        ucapiJDCloudClient = self
        try UpdateSensitiveOpSettingExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendSmsCodeAsync(request:SendSmsCodeRequest,requestComplation:@escaping ExecuteResult<SendSmsCodeResult>) throws {
        ucapiJDCloudClient = self
        try SendSmsCodeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateGroupPersonAsync(request:UpdateGroupPersonRequest,requestComplation:@escaping ExecuteResult<UpdateGroupPersonResult>) throws {
        ucapiJDCloudClient = self
        try UpdateGroupPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityInfoAsync(request:DescribeActivityInfoRequest,requestComplation:@escaping ExecuteResult<DescribeActivityInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendContactPersonValidateEmailAsync(request:SendContactPersonValidateEmailRequest,requestComplation:@escaping ExecuteResult<SendContactPersonValidateEmailResult>) throws {
        ucapiJDCloudClient = self
        try SendContactPersonValidateEmailExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInvoiceMsgTemplateAsync(request:DescribeInvoiceMsgTemplateRequest,requestComplation:@escaping ExecuteResult<DescribeInvoiceMsgTemplateResult>) throws {
        ucapiJDCloudClient = self
        try DescribeInvoiceMsgTemplateExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAccountAttachmentAsync(request:DescribeAccountAttachmentRequest,requestComplation:@escaping ExecuteResult<DescribeAccountAttachmentResult>) throws {
        ucapiJDCloudClient = self
        try DescribeAccountAttachmentExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityThirdPartMirrorsAsync(request:DescribeActivityThirdPartMirrorsRequest,requestComplation:@escaping ExecuteResult<DescribeActivityThirdPartMirrorsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityThirdPartMirrorsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAccountInfoAsync(request:DescribeAccountInfoRequest,requestComplation:@escaping ExecuteResult<DescribeAccountInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeAccountInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityVpcsAsync(request:DescribeActivityVpcsRequest,requestComplation:@escaping ExecuteResult<DescribeActivityVpcsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityVpcsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateAccountAttachmentAsync(request:UpdateAccountAttachmentRequest,requestComplation:@escaping ExecuteResult<UpdateAccountAttachmentResult>) throws {
        ucapiJDCloudClient = self
        try UpdateAccountAttachmentExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteNgDomainMsgAsync(request:DeleteNgDomainMsgRequest,requestComplation:@escaping ExecuteResult<DeleteNgDomainMsgResult>) throws {
        ucapiJDCloudClient = self
        try DeleteNgDomainMsgExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryUserPhoneAsync(request:QueryUserPhoneRequest,requestComplation:@escaping ExecuteResult<QueryUserPhoneResult>) throws {
        ucapiJDCloudClient = self
        try QueryUserPhoneExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityPriceInfoAsync(request:DescribeActivityPriceInfoRequest,requestComplation:@escaping ExecuteResult<DescribeActivityPriceInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityPriceInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createActivityPackageResourceAsync(request:CreateActivityPackageResourceRequest,requestComplation:@escaping ExecuteResult<CreateActivityPackageResourceResult>) throws {
        ucapiJDCloudClient = self
        try CreateActivityPackageResourceExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func bindEmailAsync(request:BindEmailRequest,requestComplation:@escaping ExecuteResult<BindEmailResult>) throws {
        ucapiJDCloudClient = self
        try BindEmailExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setMainContactPersonAsync(request:SetMainContactPersonRequest,requestComplation:@escaping ExecuteResult<SetMainContactPersonResult>) throws {
        ucapiJDCloudClient = self
        try SetMainContactPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInvoicePostAddressDetailAsync(request:DescribeInvoicePostAddressDetailRequest,requestComplation:@escaping ExecuteResult<DescribeInvoicePostAddressDetailResult>) throws {
        ucapiJDCloudClient = self
        try DescribeInvoicePostAddressDetailExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRechargeInfoAsync(request:DescribeRechargeInfoRequest,requestComplation:@escaping ExecuteResult<DescribeRechargeInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeRechargeInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteInvoiceMsgTemplateAsync(request:DeleteInvoiceMsgTemplateRequest,requestComplation:@escaping ExecuteResult<DeleteInvoiceMsgTemplateResult>) throws {
        ucapiJDCloudClient = self
        try DeleteInvoiceMsgTemplateExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryUserCampusStatusAsync(request:QueryUserCampusStatusRequest,requestComplation:@escaping ExecuteResult<QueryUserCampusStatusResult>) throws {
        ucapiJDCloudClient = self
        try QueryUserCampusStatusExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func validateEmailExistAsync(request:ValidateEmailExistRequest,requestComplation:@escaping ExecuteResult<ValidateEmailExistResult>) throws {
        ucapiJDCloudClient = self
        try ValidateEmailExistExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRemittanceAsync(request:CreateRemittanceRequest,requestComplation:@escaping ExecuteResult<CreateRemittanceResult>) throws {
        ucapiJDCloudClient = self
        try CreateRemittanceExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func verifyForEditEmailAsync(request:VerifyForEditEmailRequest,requestComplation:@escaping ExecuteResult<VerifyForEditEmailResult>) throws {
        ucapiJDCloudClient = self
        try VerifyForEditEmailExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInvoiceAsync(request:DescribeInvoiceRequest,requestComplation:@escaping ExecuteResult<DescribeInvoiceResult>) throws {
        ucapiJDCloudClient = self
        try DescribeInvoiceExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateInvoicePostAddressAsync(request:UpdateInvoicePostAddressRequest,requestComplation:@escaping ExecuteResult<UpdateInvoicePostAddressResult>) throws {
        ucapiJDCloudClient = self
        try UpdateInvoicePostAddressExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeContactPersonInGroupAsync(request:DescribeContactPersonInGroupRequest,requestComplation:@escaping ExecuteResult<DescribeContactPersonInGroupResult>) throws {
        ucapiJDCloudClient = self
        try DescribeContactPersonInGroupExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendEmailCodeAsync(request:SendEmailCodeRequest,requestComplation:@escaping ExecuteResult<SendEmailCodeResult>) throws {
        ucapiJDCloudClient = self
        try SendEmailCodeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func subAccountModifyPasswordAsync(request:SubAccountModifyPasswordRequest,requestComplation:@escaping ExecuteResult<SubAccountModifyPasswordResult>) throws {
        ucapiJDCloudClient = self
        try SubAccountModifyPasswordExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func isVerifiedSmsAsync(request:IsVerifiedSmsRequest,requestComplation:@escaping ExecuteResult<IsVerifiedSmsResult>) throws {
        ucapiJDCloudClient = self
        try IsVerifiedSmsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityAvailableImagesAsync(request:DescribeActivityAvailableImagesRequest,requestComplation:@escaping ExecuteResult<DescribeActivityAvailableImagesResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityAvailableImagesExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addInvoicePostAddressAsync(request:AddInvoicePostAddressRequest,requestComplation:@escaping ExecuteResult<AddInvoicePostAddressResult>) throws {
        ucapiJDCloudClient = self
        try AddInvoicePostAddressExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createUserAccessKeyAsync(request:CreateUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<CreateUserAccessKeyResult>) throws {
        ucapiJDCloudClient = self
        try CreateUserAccessKeyExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateMessageReadStateInBatchAsync(request:UpdateMessageReadStateInBatchRequest,requestComplation:@escaping ExecuteResult<UpdateMessageReadStateInBatchResult>) throws {
        ucapiJDCloudClient = self
        try UpdateMessageReadStateInBatchExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeNgDomainMsgAsync(request:DescribeNgDomainMsgRequest,requestComplation:@escaping ExecuteResult<DescribeNgDomainMsgResult>) throws {
        ucapiJDCloudClient = self
        try DescribeNgDomainMsgExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteUserAccessKeyAsync(request:DeleteUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<DeleteUserAccessKeyResult>) throws {
        ucapiJDCloudClient = self
        try DeleteUserAccessKeyExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func authorizationAsync(request:AuthorizationRequest,requestComplation:@escaping ExecuteResult<AuthorizationResult>) throws {
        ucapiJDCloudClient = self
        try AuthorizationExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAreaCodesAsync(request:DescribeAreaCodesRequest,requestComplation:@escaping ExecuteResult<DescribeAreaCodesResult>) throws {
        ucapiJDCloudClient = self
        try DescribeAreaCodesExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessageSettingsAsync(request:DescribeMessageSettingsRequest,requestComplation:@escaping ExecuteResult<DescribeMessageSettingsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeMessageSettingsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRemittanceClaimsAsync(request:DescribeRemittanceClaimsRequest,requestComplation:@escaping ExecuteResult<DescribeRemittanceClaimsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeRemittanceClaimsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func editMobileStep1Async(request:EditMobileStep1Request,requestComplation:@escaping ExecuteResult<EditMobileStep1Result>) throws {
        ucapiJDCloudClient = self
        try EditMobileStep1Executor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCouponsAsync(request:DescribeCouponsRequest,requestComplation:@escaping ExecuteResult<DescribeCouponsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeCouponsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserAccountFeeInfoAsync(request:DescribeUserAccountFeeInfoRequest,requestComplation:@escaping ExecuteResult<DescribeUserAccountFeeInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeUserAccountFeeInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describePersonGroupAsync(request:DescribePersonGroupRequest,requestComplation:@escaping ExecuteResult<DescribePersonGroupResult>) throws {
        ucapiJDCloudClient = self
        try DescribePersonGroupExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createActivityFloatingIPAsync(request:CreateActivityFloatingIPRequest,requestComplation:@escaping ExecuteResult<CreateActivityFloatingIPResult>) throws {
        ucapiJDCloudClient = self
        try CreateActivityFloatingIPExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendContactValidateEmailAsync(request:SendContactValidateEmailRequest,requestComplation:@escaping ExecuteResult<SendContactValidateEmailResult>) throws {
        ucapiJDCloudClient = self
        try SendContactValidateEmailExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateUserRemindThresholdAsync(request:UpdateUserRemindThresholdRequest,requestComplation:@escaping ExecuteResult<UpdateUserRemindThresholdResult>) throws {
        ucapiJDCloudClient = self
        try UpdateUserRemindThresholdExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeGroupPersonAsync(request:DescribeGroupPersonRequest,requestComplation:@escaping ExecuteResult<DescribeGroupPersonResult>) throws {
        ucapiJDCloudClient = self
        try DescribeGroupPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getInvoiceInfoAsync(request:GetInvoiceInfoRequest,requestComplation:@escaping ExecuteResult<GetInvoiceInfoResult>) throws {
        ucapiJDCloudClient = self
        try GetInvoiceInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteContactGroupAsync(request:DeleteContactGroupRequest,requestComplation:@escaping ExecuteResult<DeleteContactGroupResult>) throws {
        ucapiJDCloudClient = self
        try DeleteContactGroupExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRechargeAsync(request:CreateRechargeRequest,requestComplation:@escaping ExecuteResult<CreateRechargeResult>) throws {
        ucapiJDCloudClient = self
        try CreateRechargeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeContactPersonsAsync(request:DescribeContactPersonsRequest,requestComplation:@escaping ExecuteResult<DescribeContactPersonsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeContactPersonsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityVpcSubnetsAsync(request:DescribeActivityVpcSubnetsRequest,requestComplation:@escaping ExecuteResult<DescribeActivityVpcSubnetsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityVpcSubnetsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCouponAsync(request:DescribeCouponRequest,requestComplation:@escaping ExecuteResult<DescribeCouponResult>) throws {
        ucapiJDCloudClient = self
        try DescribeCouponExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func verifyUserPhoneAsync(request:VerifyUserPhoneRequest,requestComplation:@escaping ExecuteResult<VerifyUserPhoneResult>) throws {
        ucapiJDCloudClient = self
        try VerifyUserPhoneExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateMessageSettingSubscriptionAsync(request:UpdateMessageSettingSubscriptionRequest,requestComplation:@escaping ExecuteResult<UpdateMessageSettingSubscriptionResult>) throws {
        ucapiJDCloudClient = self
        try UpdateMessageSettingSubscriptionExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createSensitiveOpSettingAsync(request:CreateSensitiveOpSettingRequest,requestComplation:@escaping ExecuteResult<CreateSensitiveOpSettingResult>) throws {
        ucapiJDCloudClient = self
        try CreateSensitiveOpSettingExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeContactPersonsInfoAsync(request:DescribeContactPersonsInfoRequest,requestComplation:@escaping ExecuteResult<DescribeContactPersonsInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeContactPersonsInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInvoicesAsync(request:DescribeInvoicesRequest,requestComplation:@escaping ExecuteResult<DescribeInvoicesResult>) throws {
        ucapiJDCloudClient = self
        try DescribeInvoicesExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeContactPersonAsync(request:DescribeContactPersonRequest,requestComplation:@escaping ExecuteResult<DescribeContactPersonResult>) throws {
        ucapiJDCloudClient = self
        try DescribeContactPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addContactPersonCheckAsync(request:AddContactPersonCheckRequest,requestComplation:@escaping ExecuteResult<AddContactPersonCheckResult>) throws {
        ucapiJDCloudClient = self
        try AddContactPersonCheckExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func rechargeAuthCheckAsync(request:RechargeAuthCheckRequest,requestComplation:@escaping ExecuteResult<RechargeAuthCheckResult>) throws {
        ucapiJDCloudClient = self
        try RechargeAuthCheckExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createCouponByLinkAsync(request:CreateCouponByLinkRequest,requestComplation:@escaping ExecuteResult<CreateCouponByLinkResult>) throws {
        ucapiJDCloudClient = self
        try CreateCouponByLinkExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func personSuccessAsync(request:PersonSuccessRequest,requestComplation:@escaping ExecuteResult<PersonSuccessResult>) throws {
        ucapiJDCloudClient = self
        try PersonSuccessExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func prepareForActiveAsync(request:PrepareForActiveRequest,requestComplation:@escaping ExecuteResult<PrepareForActiveResult>) throws {
        ucapiJDCloudClient = self
        try PrepareForActiveExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enabledUserAccessKeyAsync(request:EnabledUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<EnabledUserAccessKeyResult>) throws {
        ucapiJDCloudClient = self
        try EnabledUserAccessKeyExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeContactGroupsAsync(request:DescribeContactGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeContactGroupsResult>) throws {
        ucapiJDCloudClient = self
        try DescribeContactGroupsExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func bindPhoneAsync(request:BindPhoneRequest,requestComplation:@escaping ExecuteResult<BindPhoneResult>) throws {
        ucapiJDCloudClient = self
        try BindPhoneExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSensitiveOpSettingAsync(request:DescribeSensitiveOpSettingRequest,requestComplation:@escaping ExecuteResult<DescribeSensitiveOpSettingResult>) throws {
        ucapiJDCloudClient = self
        try DescribeSensitiveOpSettingExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateContactPersonAsync(request:UpdateContactPersonRequest,requestComplation:@escaping ExecuteResult<UpdateContactPersonResult>) throws {
        ucapiJDCloudClient = self
        try UpdateContactPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func bindAuthAsync(request:BindAuthRequest,requestComplation:@escaping ExecuteResult<BindAuthResult>) throws {
        ucapiJDCloudClient = self
        try BindAuthExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessageCategoryCountInfoAsync(request:DescribeMessageCategoryCountInfoRequest,requestComplation:@escaping ExecuteResult<DescribeMessageCategoryCountInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeMessageCategoryCountInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateInvoiceMsgTemplateAsync(request:UpdateInvoiceMsgTemplateRequest,requestComplation:@escaping ExecuteResult<UpdateInvoiceMsgTemplateResult>) throws {
        ucapiJDCloudClient = self
        try UpdateInvoiceMsgTemplateExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateMessageSettingAsync(request:UpdateMessageSettingRequest,requestComplation:@escaping ExecuteResult<UpdateMessageSettingResult>) throws {
        ucapiJDCloudClient = self
        try UpdateMessageSettingExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func cancelInvoiceAsync(request:CancelInvoiceRequest,requestComplation:@escaping ExecuteResult<CancelInvoiceResult>) throws {
        ucapiJDCloudClient = self
        try CancelInvoiceExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func editPhoneAsync(request:EditPhoneRequest,requestComplation:@escaping ExecuteResult<EditPhoneResult>) throws {
        ucapiJDCloudClient = self
        try EditPhoneExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addContactPersonAsync(request:AddContactPersonRequest,requestComplation:@escaping ExecuteResult<AddContactPersonResult>) throws {
        ucapiJDCloudClient = self
        try AddContactPersonExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityConfigInfoAsync(request:DescribeActivityConfigInfoRequest,requestComplation:@escaping ExecuteResult<DescribeActivityConfigInfoResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityConfigInfoExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessagesCountAsync(request:DescribeMessagesCountRequest,requestComplation:@escaping ExecuteResult<DescribeMessagesCountResult>) throws {
        ucapiJDCloudClient = self
        try DescribeMessagesCountExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addInvoiceMsgTemplateAsync(request:AddInvoiceMsgTemplateRequest,requestComplation:@escaping ExecuteResult<AddInvoiceMsgTemplateResult>) throws {
        ucapiJDCloudClient = self
        try AddInvoiceMsgTemplateExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createActivityVolumeAsync(request:CreateActivityVolumeRequest,requestComplation:@escaping ExecuteResult<CreateActivityVolumeResult>) throws {
        ucapiJDCloudClient = self
        try CreateActivityVolumeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteInvoicePostAddressAsync(request:DeleteInvoicePostAddressRequest,requestComplation:@escaping ExecuteResult<DeleteInvoicePostAddressResult>) throws {
        ucapiJDCloudClient = self
        try DeleteInvoicePostAddressExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disabledUserAccessKeyAsync(request:DisabledUserAccessKeyRequest,requestComplation:@escaping ExecuteResult<DisabledUserAccessKeyResult>) throws {
        ucapiJDCloudClient = self
        try DisabledUserAccessKeyExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setDefaultPostAddressAsync(request:SetDefaultPostAddressRequest,requestComplation:@escaping ExecuteResult<SetDefaultPostAddressResult>) throws {
        ucapiJDCloudClient = self
        try SetDefaultPostAddressExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteContactGroupCheckAsync(request:DeleteContactGroupCheckRequest,requestComplation:@escaping ExecuteResult<DeleteContactGroupCheckResult>) throws {
        ucapiJDCloudClient = self
        try DeleteContactGroupCheckExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessageDetailAsync(request:DescribeMessageDetailRequest,requestComplation:@escaping ExecuteResult<DescribeMessageDetailResult>) throws {
        ucapiJDCloudClient = self
        try DescribeMessageDetailExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func subAccountLoginAsync(request:SubAccountLoginRequest,requestComplation:@escaping ExecuteResult<SubAccountLoginResult>) throws {
        ucapiJDCloudClient = self
        try SubAccountLoginExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func validateSmsCodeAsync(request:ValidateSmsCodeRequest,requestComplation:@escaping ExecuteResult<ValidateSmsCodeResult>) throws {
        ucapiJDCloudClient = self
        try ValidateSmsCodeExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteMessageInBatchAsync(request:DeleteMessageInBatchRequest,requestComplation:@escaping ExecuteResult<DeleteMessageInBatchResult>) throws {
        ucapiJDCloudClient = self
        try DeleteMessageInBatchExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInvoiceAsync(request:CreateInvoiceRequest,requestComplation:@escaping ExecuteResult<CreateInvoiceResult>) throws {
        ucapiJDCloudClient = self
        try CreateInvoiceExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRemittanceClaimAsync(request:DescribeRemittanceClaimRequest,requestComplation:@escaping ExecuteResult<DescribeRemittanceClaimResult>) throws {
        ucapiJDCloudClient = self
        try DescribeRemittanceClaimExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeActivityRegionAzAsync(request:DescribeActivityRegionAzRequest,requestComplation:@escaping ExecuteResult<DescribeActivityRegionAzResult>) throws {
        ucapiJDCloudClient = self
        try DescribeActivityRegionAzExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMessagesInCategoryAsync(request:DescribeMessagesInCategoryRequest,requestComplation:@escaping ExecuteResult<DescribeMessagesInCategoryResult>) throws {
        ucapiJDCloudClient = self
        try DescribeMessagesInCategoryExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func accreditAsync(request:AccreditRequest,requestComplation:@escaping ExecuteResult<AccreditResult>) throws {
        ucapiJDCloudClient = self
        try AccreditExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addContactGroupCheckAsync(request:AddContactGroupCheckRequest,requestComplation:@escaping ExecuteResult<AddContactGroupCheckResult>) throws {
        ucapiJDCloudClient = self
        try AddContactGroupCheckExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func editContactGroupAsync(request:EditContactGroupRequest,requestComplation:@escaping ExecuteResult<EditContactGroupResult>) throws {
        ucapiJDCloudClient = self
        try EditContactGroupExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInvoicePostAddressAsync(request:DescribeInvoicePostAddressRequest,requestComplation:@escaping ExecuteResult<DescribeInvoicePostAddressResult>) throws {
        ucapiJDCloudClient = self
        try DescribeInvoicePostAddressExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeResourceAmountAsync(request:DescribeResourceAmountRequest,requestComplation:@escaping ExecuteResult<DescribeResourceAmountResult>) throws {
        ucapiJDCloudClient = self
        try DescribeResourceAmountExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkSensetiveWordForUserNameAsync(request:CheckSensetiveWordForUserNameRequest,requestComplation:@escaping ExecuteResult<CheckSensetiveWordForUserNameResult>) throws {
        ucapiJDCloudClient = self
        try CheckSensetiveWordForUserNameExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func verifyForEditPhoneAsync(request:VerifyForEditPhoneRequest,requestComplation:@escaping ExecuteResult<VerifyForEditPhoneResult>) throws {
        ucapiJDCloudClient = self
        try VerifyForEditPhoneExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func activeUserAsync(request:ActiveUserRequest,requestComplation:@escaping ExecuteResult<ActiveUserResult>) throws {
        ucapiJDCloudClient = self
        try ActiveUserExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserAccessKeysAsync(request:DescribeUserAccessKeysRequest,requestComplation:@escaping ExecuteResult<DescribeUserAccessKeysResult>) throws {
        ucapiJDCloudClient = self
        try DescribeUserAccessKeysExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserRemindAsync(request:DescribeUserRemindRequest,requestComplation:@escaping ExecuteResult<DescribeUserRemindResult>) throws {
        ucapiJDCloudClient = self
        try DescribeUserRemindExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRemittanceClaimAsync(request:CreateRemittanceClaimRequest,requestComplation:@escaping ExecuteResult<CreateRemittanceClaimResult>) throws {
        ucapiJDCloudClient = self
        try CreateRemittanceClaimExecutor(jdCloudClient: ucapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension UcapiJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ucapi.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "ucapi.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
