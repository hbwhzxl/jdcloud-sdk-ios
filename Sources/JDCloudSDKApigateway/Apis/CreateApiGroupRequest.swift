/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   API分组
   提供API分组的创建、查询、删除、修改等功能。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建API分组
public class CreateApiGroupRequest:JdCloudRequest
{
    /// 名称
    var groupName:String

    /// 描述
    var description:String?

    /// API前缀
    var prefix:String?

    /// 域名
    var domain:String?

    /// 密钥验证方式：check_exist（密钥必须在访问授权中已配置）、no_check_exist（无需事先配置）
    var keyCheck:String?

    /// 访问授权方式：None（免鉴权）、jd_cloud（开启访问授权，且必须使用京东云的AK、SK验签）
    var authType:String


    public init(regionId: String,groupName:String,authType:String){
        self.groupName = groupName
        self.authType = authType
        super.init(regionId: regionId)
    }


    enum CreateApiGroupRequestRequestCodingKeys: String, CodingKey {
        case groupName
        case description
        case prefix
        case domain
        case keyCheck
        case authType
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateApiGroupRequestRequestCodingKeys.self)
        try container.encode(groupName, forKey: .groupName)
        try container.encode(description, forKey: .description)
        try container.encode(prefix, forKey: .prefix)
        try container.encode(domain, forKey: .domain)
        try container.encode(keyCheck, forKey: .keyCheck)
        try container.encode(authType, forKey: .authType)

    }
}
