/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   启动配置
   弹性伸缩启动配置相关操作接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建启动配置
public class CreateLaunchConfigRequest:JdCloudRequest
{
    /// cpu 个数
    var cpuCount:Int64?

    /// 数据盘列表
    var dataDisk:InstanceDiskAttachmentSpec?

    /// 启动配置描述
    var description:String?

    /// FipBillingType
    var fipBillingType:String?

    /// 是否需要fip。为true时，下面的ip相关字段fipType、fipRate、fipBillingType为必填；为false时，下面ip相关字段可不填
    var fipNeeded:Bool

    /// fip 带宽，单位Mbps
    var fipRate:Int64?

    /// FipType
    var fipType:String?

    /// 镜像id
    var imageId:String

    /// 产品代码，实例类型 &lt;a href&#x3D;&quot;https://www.jdcloud.com/help/detail/2901/isCatalog/1&quot;&gt;InstanceType&lt;/a&gt;
    var instanceType:String

    /// 密钥对名称,当前只支持一个
    var keyNames:String?

    /// 内存大小（MB），1024的整数倍
    var memorySize:Int64?

    /// 启动配置的名称
    var name:String

    /// os 类型
    var os:String

    /// 密码
        /// 1.必须包含大写字母、小写字母、数字及特殊字符中三类，且不能少于8字符不能超过30字符
        /// 2.特殊字符如下()&#x60;~!@#$%^&amp;*_-+&#x3D;|{}[]:&quot;;&#39;&lt;&gt;,.?/
        /// 3.不能出现的字符或完整单词，如下：jd、JD、360、bug、BUG、com、COM、cloud、CLOUD、password、PASSWORD
        /// 4.不能出现连续数字，例：123、987
        /// 5.不能出现连续或键位连续字母，例：abc、CBA、bcde、qaz、tfc、zaq、qwer
        /// 6.密码中不能出现自己的用户名
    var password:String?

    /// 系统盘列表
    var sysDisk:InstanceDiskAttachmentSpec?


    public init(regionId: String,fipNeeded:Bool,imageId:String,instanceType:String,name:String,os:String,sysDisk:InstanceDiskAttachmentSpec?){
        self.fipNeeded = fipNeeded
        self.imageId = imageId
        self.instanceType = instanceType
        self.name = name
        self.os = os
        self.sysDisk = sysDisk
        super.init(regionId: regionId)
    }


    enum CreateLaunchConfigRequestRequestCodingKeys: String, CodingKey {
        case cpuCount
        case dataDisk
        case description
        case fipBillingType
        case fipNeeded
        case fipRate
        case fipType
        case imageId
        case instanceType
        case keyNames
        case memorySize
        case name
        case os
        case password
        case sysDisk
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateLaunchConfigRequestRequestCodingKeys.self)
        try container.encode(cpuCount, forKey: .cpuCount)
        try container.encode(dataDisk, forKey: .dataDisk)
        try container.encode(description, forKey: .description)
        try container.encode(fipBillingType, forKey: .fipBillingType)
        try container.encode(fipNeeded, forKey: .fipNeeded)
        try container.encode(fipRate, forKey: .fipRate)
        try container.encode(fipType, forKey: .fipType)
        try container.encode(imageId, forKey: .imageId)
        try container.encode(instanceType, forKey: .instanceType)
        try container.encode(keyNames, forKey: .keyNames)
        try container.encode(memorySize, forKey: .memorySize)
        try container.encode(name, forKey: .name)
        try container.encode(os, forKey: .os)
        try container.encode(password, forKey: .password)
        try container.encode(sysDisk, forKey: .sysDisk)

    }
}
