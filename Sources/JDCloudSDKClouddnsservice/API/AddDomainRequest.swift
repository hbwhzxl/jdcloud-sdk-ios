/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   域名
   云解析OpenAPI域名接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  添加主域名
@objc(AddDomainRequest)
public class AddDomainRequest:JdCloudRequest
{
    /// 域名的套餐类型, 0-&gt;免费 ,1-&gt;企业版, 2-&gt;高级版
    var packId:Int

    /// 要添加的域名
    var domainName:String

    /// 域名ID，升级高级版必填
    var domainId:Int?

    /// 1-&gt;新购买、3-&gt;升级，收费套餐的域名必填
    var buyType:Int?

    /// 1，2，3 ，时长，收费套餐的域名必填
    var timeSpan:Int?

    /// 时间单位，收费套餐的域名必填
    var timeUnit:Int?

    /// 计费类型，收费套餐的域名必填
    var billingType:Int?


    public init(regionId: String,packId:Int,domainName:String){
        self.packId = packId
        self.domainName = domainName
        super.init(regionId: regionId)
    }


    enum AddDomainRequestRequestCodingKeys: String, CodingKey {
        case packId
        case domainName
        case domainId
        case buyType
        case timeSpan
        case timeUnit
        case billingType
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: AddDomainRequestRequestCodingKeys.self)
        try encoderContainer.encode(packId, forKey: .packId)
        try encoderContainer.encode(domainName, forKey: .domainName)
        try encoderContainer.encode(domainId, forKey: .domainId)
        try encoderContainer.encode(buyType, forKey: .buyType)
        try encoderContainer.encode(timeSpan, forKey: .timeSpan)
        try encoderContainer.encode(timeUnit, forKey: .timeUnit)
        try encoderContainer.encode(billingType, forKey: .billingType)

    }
}
