/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD quota API
   API JDCLOUD quota API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询资源列表
public class GetResourceQuotaListRequest:JdCloudRequest
{
    /// 业务线
    var appCode:String?

    /// 可用量
    var availableAmount:Int?

    /// CountSql
    var countSql:Bool?

    /// Id
    var id:Int?

    /// OrderBy
    var orderBy:String?

    /// PageNum
    var pageNum:Int?

    /// PageSize
    var pageSize:Int?

    /// PageSizeZero
    var pageSizeZero:Bool?

    /// 预占量
    var preOccupyAmount:Int?

    /// Reasonable
    var reasonable:Bool?

    /// 地域
    var region:String?

    /// 资源默认配额
    var resourceQuotaDefault:Int?

    /// 可售卖额
    var saleableAmount:Int?

    /// 资源类型
    var serviceCode:String?

    /// 资源类型名称
    var serviceName:String?

    /// 库存总额
    var totalInventory:Int?

    /// 已用量
    var usedAmount:Int?

    /// 用户默认配额
    var userQuotaDefault:Int?

    /// 预警量
    var warningAmount:String?




    enum GetResourceQuotaListRequestRequestCodingKeys: String, CodingKey {
        case appCode
        case availableAmount
        case countSql
        case id
        case orderBy
        case pageNum
        case pageSize
        case pageSizeZero
        case preOccupyAmount
        case reasonable
        case region
        case resourceQuotaDefault
        case saleableAmount
        case serviceCode
        case serviceName
        case totalInventory
        case usedAmount
        case userQuotaDefault
        case warningAmount
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: GetResourceQuotaListRequestRequestCodingKeys.self)
        try container.encode(appCode, forKey: .appCode)
        try container.encode(availableAmount, forKey: .availableAmount)
        try container.encode(countSql, forKey: .countSql)
        try container.encode(id, forKey: .id)
        try container.encode(orderBy, forKey: .orderBy)
        try container.encode(pageNum, forKey: .pageNum)
        try container.encode(pageSize, forKey: .pageSize)
        try container.encode(pageSizeZero, forKey: .pageSizeZero)
        try container.encode(preOccupyAmount, forKey: .preOccupyAmount)
        try container.encode(reasonable, forKey: .reasonable)
        try container.encode(region, forKey: .region)
        try container.encode(resourceQuotaDefault, forKey: .resourceQuotaDefault)
        try container.encode(saleableAmount, forKey: .saleableAmount)
        try container.encode(serviceCode, forKey: .serviceCode)
        try container.encode(serviceName, forKey: .serviceName)
        try container.encode(totalInventory, forKey: .totalInventory)
        try container.encode(usedAmount, forKey: .usedAmount)
        try container.encode(userQuotaDefault, forKey: .userQuotaDefault)
        try container.encode(warningAmount, forKey: .warningAmount)

    }
}
