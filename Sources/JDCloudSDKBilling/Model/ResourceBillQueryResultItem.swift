/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  resourceBillQueryResultItem
@objc(ResourceBillQueryResultItem)
public class ResourceBillQueryResultItem:NSObject,Codable{
    /// 账单id
    var billId:Double?
    /// 用户pin
    var pin:String?
    /// appCode
    var appCode:String?
    /// serviceCode
    var serviceCode:String?
    /// serviceCodeName
    var serviceCodeName:String?
    /// 计费类型
    var billingType:Int?
    /// 计费类型描述
    var billingTypeName:String?
    /// 资源id
    var resourceId:String?
    /// 区域
    var region:String?
    /// 区域名称
    var regionName:String?
    /// 账单开始时间
    var billStartTime:String?
    /// 账单结束时间
    var billEndTime:String?
    /// 开始时间
    var startTime:String?
    /// 结束时间
    var endTime:String?
    /// 总金额
    var totalFee:Double?
    /// 现金支付金额
    var cashPayFee:Double?
    /// 代金券支付金额
    var cashCouponPayFee:Double?
    /// 余额支付金额
    var balancePayFee:Double?
    /// 欠费金额
    var arrearFee:Double?
    /// 时间
    var timeSpan:Int?
    /// 时间单位
    var timeUnit:Int?
    /// 1：新购 2：续费 3：配置变更
    var opTypeName:String?
    /// 时间
    var timeSpanName:String?
    /// 时间单位名称 1：小时 2：天 3：月 4：年
    var timeUnitName:String?
    /// 结算日期
    var settleTime:String?
    /// 1：老计费 2：新计费
    var systemType:Int?
    /// 资源名称
    var resourceName:String?



    public override init(){
            super.init()
    }

    enum ResourceBillQueryResultItemCodingKeys: String, CodingKey {
        case billId
        case pin
        case appCode
        case serviceCode
        case serviceCodeName
        case billingType
        case billingTypeName
        case resourceId
        case region
        case regionName
        case billStartTime
        case billEndTime
        case startTime
        case endTime
        case totalFee
        case cashPayFee
        case cashCouponPayFee
        case balancePayFee
        case arrearFee
        case timeSpan
        case timeUnit
        case opTypeName
        case timeSpanName
        case timeUnitName
        case settleTime
        case systemType
        case resourceName
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: ResourceBillQueryResultItemCodingKeys.self)
        self.billId = try decoderContainer.decode(Double?.self, forKey: .billId)
        self.pin = try decoderContainer.decode(String?.self, forKey: .pin)
        self.appCode = try decoderContainer.decode(String?.self, forKey: .appCode)
        self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        self.serviceCodeName = try decoderContainer.decode(String?.self, forKey: .serviceCodeName)
        self.billingType = try decoderContainer.decode(Int?.self, forKey: .billingType)
        self.billingTypeName = try decoderContainer.decode(String?.self, forKey: .billingTypeName)
        self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        self.region = try decoderContainer.decode(String?.self, forKey: .region)
        self.regionName = try decoderContainer.decode(String?.self, forKey: .regionName)
        self.billStartTime = try decoderContainer.decode(String?.self, forKey: .billStartTime)
        self.billEndTime = try decoderContainer.decode(String?.self, forKey: .billEndTime)
        self.startTime = try decoderContainer.decode(String?.self, forKey: .startTime)
        self.endTime = try decoderContainer.decode(String?.self, forKey: .endTime)
        self.totalFee = try decoderContainer.decode(Double?.self, forKey: .totalFee)
        self.cashPayFee = try decoderContainer.decode(Double?.self, forKey: .cashPayFee)
        self.cashCouponPayFee = try decoderContainer.decode(Double?.self, forKey: .cashCouponPayFee)
        self.balancePayFee = try decoderContainer.decode(Double?.self, forKey: .balancePayFee)
        self.arrearFee = try decoderContainer.decode(Double?.self, forKey: .arrearFee)
        self.timeSpan = try decoderContainer.decode(Int?.self, forKey: .timeSpan)
        self.timeUnit = try decoderContainer.decode(Int?.self, forKey: .timeUnit)
        self.opTypeName = try decoderContainer.decode(String?.self, forKey: .opTypeName)
        self.timeSpanName = try decoderContainer.decode(String?.self, forKey: .timeSpanName)
        self.timeUnitName = try decoderContainer.decode(String?.self, forKey: .timeUnitName)
        self.settleTime = try decoderContainer.decode(String?.self, forKey: .settleTime)
        self.systemType = try decoderContainer.decode(Int?.self, forKey: .systemType)
        self.resourceName = try decoderContainer.decode(String?.self, forKey: .resourceName)
    }
}
public extension ResourceBillQueryResultItem{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: ResourceBillQueryResultItemCodingKeys.self)
         try encoderContainer.encode(billId, forKey: .billId)
         try encoderContainer.encode(pin, forKey: .pin)
         try encoderContainer.encode(appCode, forKey: .appCode)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(serviceCodeName, forKey: .serviceCodeName)
         try encoderContainer.encode(billingType, forKey: .billingType)
         try encoderContainer.encode(billingTypeName, forKey: .billingTypeName)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(regionName, forKey: .regionName)
         try encoderContainer.encode(billStartTime, forKey: .billStartTime)
         try encoderContainer.encode(billEndTime, forKey: .billEndTime)
         try encoderContainer.encode(startTime, forKey: .startTime)
         try encoderContainer.encode(endTime, forKey: .endTime)
         try encoderContainer.encode(totalFee, forKey: .totalFee)
         try encoderContainer.encode(cashPayFee, forKey: .cashPayFee)
         try encoderContainer.encode(cashCouponPayFee, forKey: .cashCouponPayFee)
         try encoderContainer.encode(balancePayFee, forKey: .balancePayFee)
         try encoderContainer.encode(arrearFee, forKey: .arrearFee)
         try encoderContainer.encode(timeSpan, forKey: .timeSpan)
         try encoderContainer.encode(timeUnit, forKey: .timeUnit)
         try encoderContainer.encode(opTypeName, forKey: .opTypeName)
         try encoderContainer.encode(timeSpanName, forKey: .timeSpanName)
         try encoderContainer.encode(timeUnitName, forKey: .timeUnitName)
         try encoderContainer.encode(settleTime, forKey: .settleTime)
         try encoderContainer.encode(systemType, forKey: .systemType)
         try encoderContainer.encode(resourceName, forKey: .resourceName)
    }
}
