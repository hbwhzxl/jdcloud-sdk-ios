/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD Renewal API
   API related to Renewal

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class RenewalJDCloudClient :JDCloudClient{
    
    private final var renewalJDCloudClient:RenewalJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "renewal" + "v1"
    
    public let serviceName: String = "renewal"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func resourceRelationAsync(request:ResourceRelationRequest,requestComplation:@escaping ExecuteResult<ResourceRelationResult>) throws {
        renewalJDCloudClient = self
        try ResourceRelationExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func renewAsync(request:RenewRequest,requestComplation:@escaping ExecuteResult<RenewResult>) throws {
        renewalJDCloudClient = self
        try RenewExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func handleAutoPayAsync(request:HandleAutoPayRequest,requestComplation:@escaping ExecuteResult<HandleAutoPayResult>) throws {
        renewalJDCloudClient = self
        try HandleAutoPayExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func tempOrderAsync(request:TempOrderRequest,requestComplation:@escaping ExecuteResult<TempOrderResult>) throws {
        renewalJDCloudClient = self
        try TempOrderExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func instanceCountAsync(request:InstanceCountRequest,requestComplation:@escaping ExecuteResult<InstanceCountResult>) throws {
        renewalJDCloudClient = self
        try InstanceCountExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func serviceTermAsync(request:ServiceTermRequest,requestComplation:@escaping ExecuteResult<ServiceTermResult>) throws {
        renewalJDCloudClient = self
        try ServiceTermExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func renewPriceAsync(request:RenewPriceRequest,requestComplation:@escaping ExecuteResult<RenewPriceResult>) throws {
        renewalJDCloudClient = self
        try RenewPriceExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func expireResourcesAsync(request:ExpireResourcesRequest,requestComplation:@escaping ExecuteResult<ExpireResourcesResult>) throws {
        renewalJDCloudClient = self
        try ExpireResourcesExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func renewPaymentStatusAsync(request:RenewPaymentStatusRequest,requestComplation:@escaping ExecuteResult<RenewPaymentStatusResult>) throws {
        renewalJDCloudClient = self
        try RenewPaymentStatusExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func resourceListAsync(request:ResourceListRequest,requestComplation:@escaping ExecuteResult<ResourceListResult>) throws {
        renewalJDCloudClient = self
        try ResourceListExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteAutoPayAsync(request:DeleteAutoPayRequest,requestComplation:@escaping ExecuteResult<DeleteAutoPayResult>) throws {
        renewalJDCloudClient = self
        try DeleteAutoPayExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func submitTempOrderAsync(request:SubmitTempOrderRequest,requestComplation:@escaping ExecuteResult<SubmitTempOrderResult>) throws {
        renewalJDCloudClient = self
        try SubmitTempOrderExecutor(jdCloudClient: renewalJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension RenewalJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "renewal.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "renewal.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
