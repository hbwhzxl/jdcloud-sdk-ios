/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   网关OpenAPI管理
   运营后台OpenAPI相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class OmpopenapiJDCloudClient :JDCloudClient{
    
    private final var ompopenapiJDCloudClient:OmpopenapiJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ompopenapi" + "v1"
    
    public let serviceName: String = "ompopenapi"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func onlineApiAsync(request:OnlineApiRequest,requestComplation:@escaping ExecuteResult<OnlineApiResult>) throws {
        ompopenapiJDCloudClient = self
        try OnlineApiExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryUsableRegionAsync(request:QueryUsableRegionRequest,requestComplation:@escaping ExecuteResult<QueryUsableRegionResult>) throws {
        ompopenapiJDCloudClient = self
        try QueryUsableRegionExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRouteAsync(request:CreateRouteRequest,requestComplation:@escaping ExecuteResult<CreateRouteResult>) throws {
        ompopenapiJDCloudClient = self
        try CreateRouteExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryServiceLineAsync(request:QueryServiceLineRequest,requestComplation:@escaping ExecuteResult<QueryServiceLineResult>) throws {
        ompopenapiJDCloudClient = self
        try QueryServiceLineExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeApiWhiteListAsync(request:DescribeApiWhiteListRequest,requestComplation:@escaping ExecuteResult<DescribeApiWhiteListResult>) throws {
        ompopenapiJDCloudClient = self
        try DescribeApiWhiteListExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describePolicyListAsync(request:DescribePolicyListRequest,requestComplation:@escaping ExecuteResult<DescribePolicyListResult>) throws {
        ompopenapiJDCloudClient = self
        try DescribePolicyListExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deployApiAsync(request:DeployApiRequest,requestComplation:@escaping ExecuteResult<DeployApiResult>) throws {
        ompopenapiJDCloudClient = self
        try DeployApiExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateServiceLineAsync(request:UpdateServiceLineRequest,requestComplation:@escaping ExecuteResult<UpdateServiceLineResult>) throws {
        ompopenapiJDCloudClient = self
        try UpdateServiceLineExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func generateApiAsync(request:GenerateApiRequest,requestComplation:@escaping ExecuteResult<GenerateApiResult>) throws {
        ompopenapiJDCloudClient = self
        try GenerateApiExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateRouteAsync(request:UpdateRouteRequest,requestComplation:@escaping ExecuteResult<UpdateRouteResult>) throws {
        ompopenapiJDCloudClient = self
        try UpdateRouteExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryRouteAsync(request:QueryRouteRequest,requestComplation:@escaping ExecuteResult<QueryRouteResult>) throws {
        ompopenapiJDCloudClient = self
        try QueryRouteExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func serviceLinesAsync(request:ServiceLinesRequest,requestComplation:@escaping ExecuteResult<ServiceLinesResult>) throws {
        ompopenapiJDCloudClient = self
        try ServiceLinesExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeApiAsync(request:DescribeApiRequest,requestComplation:@escaping ExecuteResult<DescribeApiResult>) throws {
        ompopenapiJDCloudClient = self
        try DescribeApiExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeApiListAsync(request:DescribeApiListRequest,requestComplation:@escaping ExecuteResult<DescribeApiListResult>) throws {
        ompopenapiJDCloudClient = self
        try DescribeApiListExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryLogAsync(request:QueryLogRequest,requestComplation:@escaping ExecuteResult<QueryLogResult>) throws {
        ompopenapiJDCloudClient = self
        try QueryLogExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createServiceLineAsync(request:CreateServiceLineRequest,requestComplation:@escaping ExecuteResult<CreateServiceLineResult>) throws {
        ompopenapiJDCloudClient = self
        try CreateServiceLineExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRoutesListAsync(request:DescribeRoutesListRequest,requestComplation:@escaping ExecuteResult<DescribeRoutesListResult>) throws {
        ompopenapiJDCloudClient = self
        try DescribeRoutesListExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRoutesAsync(request:DescribeRoutesRequest,requestComplation:@escaping ExecuteResult<DescribeRoutesResult>) throws {
        ompopenapiJDCloudClient = self
        try DescribeRoutesExecutor(jdCloudClient: ompopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension OmpopenapiJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ompopenapi.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "ompopenapi.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
