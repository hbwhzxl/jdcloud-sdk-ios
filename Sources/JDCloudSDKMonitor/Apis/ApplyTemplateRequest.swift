/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Alarm Template APIs
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  应用报警模板到资源
public class ApplyTemplateRequest:JdCloudRequest
{
    /// 幂等性校验参数,最长36位
    var clientToken:String

    /// 联系人列表
    var contacts:BaseContact?

    /// dataCenters，该资源所处地域，与resourceIds一一对应
    var dataCenters:String?

    /// 资源ID列表，resourceIds数量为1--40，每一项不能为空或包含*
    var resourceIds:String?

    /// 资源类型
    var serviceCode:String

    /// 标签组，模板下面规则对应的tags，与resourceIds一一对应
    var tagsArray:[String:String?]?

    /// 模板类型，1表示默认模板，2表示用户自定义模板
    var templateType:Int64

    /// 回调content 注:仅webHookUrl和webHookContent均不为空时,才会创建webHook
    var webHookContent:String?

    /// webHook协议,https或http 注:此处需和webHookUrl相匹配
    var webHookProtocol:String?

    /// 回调secret,用户请求签名,防伪造
    var webHookSecret:String?

    /// 回调url
    var webHookUrl:String?

    /// 模板 id
    var templateId:String


    public init(regionId: String,clientToken:String,serviceCode:String,templateType:Int64,templateId:String){
        self.clientToken = clientToken
        self.serviceCode = serviceCode
        self.templateType = templateType
        self.templateId = templateId
        super.init(regionId: regionId)
    }


    enum ApplyTemplateRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case contacts
        case dataCenters
        case resourceIds
        case serviceCode
        case tagsArray
        case templateType
        case webHookContent
        case webHookProtocol
        case webHookSecret
        case webHookUrl
        case templateId
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: ApplyTemplateRequestRequestCodingKeys.self)
        try container.encode(clientToken, forKey: .clientToken)
        try container.encode(contacts, forKey: .contacts)
        try container.encode(dataCenters, forKey: .dataCenters)
        try container.encode(resourceIds, forKey: .resourceIds)
        try container.encode(serviceCode, forKey: .serviceCode)
        try container.encode(tagsArray, forKey: .tagsArray)
        try container.encode(templateType, forKey: .templateType)
        try container.encode(webHookContent, forKey: .webHookContent)
        try container.encode(webHookProtocol, forKey: .webHookProtocol)
        try container.encode(webHookSecret, forKey: .webHookSecret)
        try container.encode(webHookUrl, forKey: .webHookUrl)
        try container.encode(templateId, forKey: .templateId)

    }
}
