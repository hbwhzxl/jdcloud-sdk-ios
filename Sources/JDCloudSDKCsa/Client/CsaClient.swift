/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 态势感知 API
   提供基础威胁检测和入侵告警服务接口。

   OpenAPI spec version: v2
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class CsaJDCloudClient :JDCloudClient{
    
    private final var csaJDCloudClient:CsaJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "csa" + "v2"
    
    public let serviceName: String = "csa"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func queryTargetAttackAsync(request:QueryTargetAttackRequest,requestComplation:@escaping ExecuteResult<QueryTargetAttackResult>) throws {
        csaJDCloudClient = self
        try QueryTargetAttackExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttacksTrendAsync(request:QuerySingleAttacksTrendRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttacksTrendResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttacksTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setNotifyRuleAsync(request:SetNotifyRuleRequest,requestComplation:@escaping ExecuteResult<SetNotifyRuleResult>) throws {
        csaJDCloudClient = self
        try SetNotifyRuleExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttackAsync(request:QuerySingleAttackRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttackResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttackExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsNameCountStatAsync(request:QueryAlarmEventsNameCountStatRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsNameCountStatResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsNameCountStatExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryOverviewConfigAsync(request:QueryOverviewConfigRequest,requestComplation:@escaping ExecuteResult<QueryOverviewConfigResult>) throws {
        csaJDCloudClient = self
        try QueryOverviewConfigExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryStatisticsTopCountAsync(request:QueryStatisticsTopCountRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsTopCountResult>) throws {
        csaJDCloudClient = self
        try QueryStatisticsTopCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func batchUpdateTargetAttacksStatusAsync(request:BatchUpdateTargetAttacksStatusRequest,requestComplation:@escaping ExecuteResult<BatchUpdateTargetAttacksStatusResult>) throws {
        csaJDCloudClient = self
        try BatchUpdateTargetAttacksStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAssetFixedIpsAsync(request:QueryAssetFixedIpsRequest,requestComplation:@escaping ExecuteResult<QueryAssetFixedIpsResult>) throws {
        csaJDCloudClient = self
        try QueryAssetFixedIpsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWeakEventsAsync(request:QueryWeakEventsRequest,requestComplation:@escaping ExecuteResult<QueryWeakEventsResult>) throws {
        csaJDCloudClient = self
        try QueryWeakEventsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryBillingNewEnterpriseEditionPriceAsync(request:QueryBillingNewEnterpriseEditionPriceRequest,requestComplation:@escaping ExecuteResult<QueryBillingNewEnterpriseEditionPriceResult>) throws {
        csaJDCloudClient = self
        try QueryBillingNewEnterpriseEditionPriceExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryDefensesCoverageTrendAsync(request:QueryDefensesCoverageTrendRequest,requestComplation:@escaping ExecuteResult<QueryDefensesCoverageTrendResult>) throws {
        csaJDCloudClient = self
        try QueryDefensesCoverageTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func newEnterpriseEditionOrderAsync(request:NewEnterpriseEditionOrderRequest,requestComplation:@escaping ExecuteResult<NewEnterpriseEditionOrderResult>) throws {
        csaJDCloudClient = self
        try NewEnterpriseEditionOrderExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryNotifyRulesAsync(request:QueryNotifyRulesRequest,requestComplation:@escaping ExecuteResult<QueryNotifyRulesResult>) throws {
        csaJDCloudClient = self
        try QueryNotifyRulesExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTargetAttacksAsync(request:QueryTargetAttacksRequest,requestComplation:@escaping ExecuteResult<QueryTargetAttacksResult>) throws {
        csaJDCloudClient = self
        try QueryTargetAttacksExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsAsync(request:QueryAlarmEventsRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func isAuthorizationGivenAsync(request:IsAuthorizationGivenRequest,requestComplation:@escaping ExecuteResult<IsAuthorizationGivenResult>) throws {
        csaJDCloudClient = self
        try IsAuthorizationGivenExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func cancelAuthorizationAsync(request:CancelAuthorizationRequest,requestComplation:@escaping ExecuteResult<CancelAuthorizationResult>) throws {
        csaJDCloudClient = self
        try CancelAuthorizationExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWebsiteVulsTrendAsync(request:QueryWebsiteVulsTrendRequest,requestComplation:@escaping ExecuteResult<QueryWebsiteVulsTrendResult>) throws {
        csaJDCloudClient = self
        try QueryWebsiteVulsTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttacksAsync(request:QuerySingleAttacksRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttacksResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttacksExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func fixWeakEventsLeaksAsync(request:FixWeakEventsLeaksRequest,requestComplation:@escaping ExecuteResult<FixWeakEventsLeaksResult>) throws {
        csaJDCloudClient = self
        try FixWeakEventsLeaksExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func confirmAuthorizationAsync(request:ConfirmAuthorizationRequest,requestComplation:@escaping ExecuteResult<ConfirmAuthorizationResult>) throws {
        csaJDCloudClient = self
        try ConfirmAuthorizationExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateTargetAttackStatusAsync(request:UpdateTargetAttackStatusRequest,requestComplation:@escaping ExecuteResult<UpdateTargetAttackStatusResult>) throws {
        csaJDCloudClient = self
        try UpdateTargetAttackStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryThreatEventsNameCountStatAsync(request:QueryThreatEventsNameCountStatRequest,requestComplation:@escaping ExecuteResult<QueryThreatEventsNameCountStatResult>) throws {
        csaJDCloudClient = self
        try QueryThreatEventsNameCountStatExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryStatisticsEventTrendAsync(request:QueryStatisticsEventTrendRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsEventTrendResult>) throws {
        csaJDCloudClient = self
        try QueryStatisticsEventTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryNotifyRuleContactsAsync(request:QueryNotifyRuleContactsRequest,requestComplation:@escaping ExecuteResult<QueryNotifyRuleContactsResult>) throws {
        csaJDCloudClient = self
        try QueryNotifyRuleContactsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWebsiteVulAsync(request:QueryWebsiteVulRequest,requestComplation:@escaping ExecuteResult<QueryWebsiteVulResult>) throws {
        csaJDCloudClient = self
        try QueryWebsiteVulExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateAlarmEventStatusAsync(request:UpdateAlarmEventStatusRequest,requestComplation:@escaping ExecuteResult<UpdateAlarmEventStatusResult>) throws {
        csaJDCloudClient = self
        try UpdateAlarmEventStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAssetFloatingIpsAsync(request:QueryAssetFloatingIpsRequest,requestComplation:@escaping ExecuteResult<QueryAssetFloatingIpsResult>) throws {
        csaJDCloudClient = self
        try QueryAssetFloatingIpsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWebsiteVulNotIgnoredRecorderCountAsync(request:QueryWebsiteVulNotIgnoredRecorderCountRequest,requestComplation:@escaping ExecuteResult<QueryWebsiteVulNotIgnoredRecorderCountResult>) throws {
        csaJDCloudClient = self
        try QueryWebsiteVulNotIgnoredRecorderCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsDDosFlowRatesAsync(request:QueryAlarmEventsDDosFlowRatesRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsDDosFlowRatesResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsDDosFlowRatesExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttacksDDosFlowRatesAsync(request:QuerySingleAttacksDDosFlowRatesRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttacksDDosFlowRatesResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttacksDDosFlowRatesExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWebsiteVulsAsync(request:QueryWebsiteVulsRequest,requestComplation:@escaping ExecuteResult<QueryWebsiteVulsResult>) throws {
        csaJDCloudClient = self
        try QueryWebsiteVulsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func syncAssetResourceAsync(request:SyncAssetResourceRequest,requestComplation:@escaping ExecuteResult<SyncAssetResourceResult>) throws {
        csaJDCloudClient = self
        try SyncAssetResourceExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func batchUpdateSingleAttacksStatusAsync(request:BatchUpdateSingleAttacksStatusRequest,requestComplation:@escaping ExecuteResult<BatchUpdateSingleAttacksStatusResult>) throws {
        csaJDCloudClient = self
        try BatchUpdateSingleAttacksStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateThreatEventStatusAsync(request:UpdateThreatEventStatusRequest,requestComplation:@escaping ExecuteResult<UpdateThreatEventStatusResult>) throws {
        csaJDCloudClient = self
        try UpdateThreatEventStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setWebsiteVulsRecorderIgnoreValueAsync(request:SetWebsiteVulsRecorderIgnoreValueRequest,requestComplation:@escaping ExecuteResult<SetWebsiteVulsRecorderIgnoreValueResult>) throws {
        csaJDCloudClient = self
        try SetWebsiteVulsRecorderIgnoreValueExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsFileSandboxAnalysisAsync(request:QueryAlarmEventsFileSandboxAnalysisRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsFileSandboxAnalysisResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsFileSandboxAnalysisExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAssetListAsync(request:QueryAssetListRequest,requestComplation:@escaping ExecuteResult<QueryAssetListResult>) throws {
        csaJDCloudClient = self
        try QueryAssetListExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventAsync(request:QueryAlarmEventRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func batchUpdateAlarmEventsStatusAsync(request:BatchUpdateAlarmEventsStatusRequest,requestComplation:@escaping ExecuteResult<BatchUpdateAlarmEventsStatusResult>) throws {
        csaJDCloudClient = self
        try BatchUpdateAlarmEventsStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateAssetNidsStatusAsync(request:UpdateAssetNidsStatusRequest,requestComplation:@escaping ExecuteResult<UpdateAssetNidsStatusResult>) throws {
        csaJDCloudClient = self
        try UpdateAssetNidsStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAccountEEInfoAsync(request:QueryAccountEEInfoRequest,requestComplation:@escaping ExecuteResult<QueryAccountEEInfoResult>) throws {
        csaJDCloudClient = self
        try QueryAccountEEInfoExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryThreatEventsCountAsync(request:QueryThreatEventsCountRequest,requestComplation:@escaping ExecuteResult<QueryThreatEventsCountResult>) throws {
        csaJDCloudClient = self
        try QueryThreatEventsCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateSingleAttackStatusAsync(request:UpdateSingleAttackStatusRequest,requestComplation:@escaping ExecuteResult<UpdateSingleAttackStatusResult>) throws {
        csaJDCloudClient = self
        try UpdateSingleAttackStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsPcapUrlAsync(request:QueryAlarmEventsPcapUrlRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsPcapUrlResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsPcapUrlExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryStatisticsTopRiskServerInfoCountAsync(request:QueryStatisticsTopRiskServerInfoCountRequest,requestComplation:@escaping ExecuteResult<QueryStatisticsTopRiskServerInfoCountResult>) throws {
        csaJDCloudClient = self
        try QueryStatisticsTopRiskServerInfoCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryThreatEventAsync(request:QueryThreatEventRequest,requestComplation:@escaping ExecuteResult<QueryThreatEventResult>) throws {
        csaJDCloudClient = self
        try QueryThreatEventExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTargetAttacksTrendAsync(request:QueryTargetAttacksTrendRequest,requestComplation:@escaping ExecuteResult<QueryTargetAttacksTrendResult>) throws {
        csaJDCloudClient = self
        try QueryTargetAttacksTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTargetAttacksNameCountStatAsync(request:QueryTargetAttacksNameCountStatRequest,requestComplation:@escaping ExecuteResult<QueryTargetAttacksNameCountStatResult>) throws {
        csaJDCloudClient = self
        try QueryTargetAttacksNameCountStatExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttacksCountAsync(request:QuerySingleAttacksCountRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttacksCountResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttacksCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func upgradeEnterpriseEditionOrderAsync(request:UpgradeEnterpriseEditionOrderRequest,requestComplation:@escaping ExecuteResult<UpgradeEnterpriseEditionOrderResult>) throws {
        csaJDCloudClient = self
        try UpgradeEnterpriseEditionOrderExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryThreatEventsTrendAsync(request:QueryThreatEventsTrendRequest,requestComplation:@escaping ExecuteResult<QueryThreatEventsTrendResult>) throws {
        csaJDCloudClient = self
        try QueryThreatEventsTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsCountAsync(request:QueryAlarmEventsCountRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsCountResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryBillingUpgradeEnterpriseEditionPriceAsync(request:QueryBillingUpgradeEnterpriseEditionPriceRequest,requestComplation:@escaping ExecuteResult<QueryBillingUpgradeEnterpriseEditionPriceResult>) throws {
        csaJDCloudClient = self
        try QueryBillingUpgradeEnterpriseEditionPriceExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAlarmEventsTrendAsync(request:QueryAlarmEventsTrendRequest,requestComplation:@escaping ExecuteResult<QueryAlarmEventsTrendResult>) throws {
        csaJDCloudClient = self
        try QueryAlarmEventsTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWeakEventsFixedIpsAsync(request:QueryWeakEventsFixedIpsRequest,requestComplation:@escaping ExecuteResult<QueryWeakEventsFixedIpsResult>) throws {
        csaJDCloudClient = self
        try QueryWeakEventsFixedIpsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func batchUpdateThreatEventsStatusAsync(request:BatchUpdateThreatEventsStatusRequest,requestComplation:@escaping ExecuteResult<BatchUpdateThreatEventsStatusResult>) throws {
        csaJDCloudClient = self
        try BatchUpdateThreatEventsStatusExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setOverviewConfigAsync(request:SetOverviewConfigRequest,requestComplation:@escaping ExecuteResult<SetOverviewConfigResult>) throws {
        csaJDCloudClient = self
        try SetOverviewConfigExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWeakEventsTrendAsync(request:QueryWeakEventsTrendRequest,requestComplation:@escaping ExecuteResult<QueryWeakEventsTrendResult>) throws {
        csaJDCloudClient = self
        try QueryWeakEventsTrendExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryOrderResultAsync(request:QueryOrderResultRequest,requestComplation:@escaping ExecuteResult<QueryOrderResultResult>) throws {
        csaJDCloudClient = self
        try QueryOrderResultExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryDefensesStartupCoverageAsync(request:QueryDefensesStartupCoverageRequest,requestComplation:@escaping ExecuteResult<QueryDefensesStartupCoverageResult>) throws {
        csaJDCloudClient = self
        try QueryDefensesStartupCoverageExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryWeakEventsCountAsync(request:QueryWeakEventsCountRequest,requestComplation:@escaping ExecuteResult<QueryWeakEventsCountResult>) throws {
        csaJDCloudClient = self
        try QueryWeakEventsCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttacksNameCountStatAsync(request:QuerySingleAttacksNameCountStatRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttacksNameCountStatResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttacksNameCountStatExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTargetAttacksCountAsync(request:QueryTargetAttacksCountRequest,requestComplation:@escaping ExecuteResult<QueryTargetAttacksCountResult>) throws {
        csaJDCloudClient = self
        try QueryTargetAttacksCountExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryThreatEventsAsync(request:QueryThreatEventsRequest,requestComplation:@escaping ExecuteResult<QueryThreatEventsResult>) throws {
        csaJDCloudClient = self
        try QueryThreatEventsExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySingleAttacksPcapUrlAsync(request:QuerySingleAttacksPcapUrlRequest,requestComplation:@escaping ExecuteResult<QuerySingleAttacksPcapUrlResult>) throws {
        csaJDCloudClient = self
        try QuerySingleAttacksPcapUrlExecutor(jdCloudClient: csaJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension CsaJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "csa.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "csa.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
