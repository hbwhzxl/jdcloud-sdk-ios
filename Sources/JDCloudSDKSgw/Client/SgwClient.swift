/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 应用安全网关 API文档
   提供应用安全网关攻击事件统计、WAF实例管理、防护配置管理等相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class SgwJDCloudClient :JDCloudClient{
    
    private final var sgwJDCloudClient:SgwJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "sgw" + "v1"
    
    public let serviceName: String = "sgw"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeWafConfigAsync(request:DescribeWafConfigRequest,requestComplation:@escaping ExecuteResult<DescribeWafConfigResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createBotCustomRuleAsync(request:CreateBotCustomRuleRequest,requestComplation:@escaping ExecuteResult<CreateBotCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try CreateBotCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteBotCustomRuleAsync(request:DeleteBotCustomRuleRequest,requestComplation:@escaping ExecuteResult<DeleteBotCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try DeleteBotCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMaliciousIpAsync(request:DescribeMaliciousIpRequest,requestComplation:@escaping ExecuteResult<DescribeMaliciousIpResult>) throws {
        sgwJDCloudClient = self
        try DescribeMaliciousIpExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafAccessTopAsync(request:DescribeWafAccessTopRequest,requestComplation:@escaping ExecuteResult<DescribeWafAccessTopResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafAccessTopExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func applyAsync(request:ApplyRequest,requestComplation:@escaping ExecuteResult<ApplyResult>) throws {
        sgwJDCloudClient = self
        try ApplyExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createMaliciousIpAsync(request:CreateMaliciousIpRequest,requestComplation:@escaping ExecuteResult<CreateMaliciousIpResult>) throws {
        sgwJDCloudClient = self
        try CreateMaliciousIpExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyUserConfigAsync(request:ModifyUserConfigRequest,requestComplation:@escaping ExecuteResult<ModifyUserConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyUserConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafVulTopAsync(request:DescribeWafVulTopRequest,requestComplation:@escaping ExecuteResult<DescribeWafVulTopResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafVulTopExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeNotifyRuleContactsAsync(request:DescribeNotifyRuleContactsRequest,requestComplation:@escaping ExecuteResult<DescribeNotifyRuleContactsResult>) throws {
        sgwJDCloudClient = self
        try DescribeNotifyRuleContactsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeACLDataTrendAsync(request:DescribeACLDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeACLDataTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeACLDataTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQuotasAsync(request:DescribeQuotasRequest,requestComplation:@escaping ExecuteResult<DescribeQuotasResult>) throws {
        sgwJDCloudClient = self
        try DescribeQuotasExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafActionAsync(request:ModifyWafActionRequest,requestComplation:@escaping ExecuteResult<ModifyWafActionResult>) throws {
        sgwJDCloudClient = self
        try ModifyWafActionExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafsACLsAsync(request:DescribeWafsACLsRequest,requestComplation:@escaping ExecuteResult<DescribeWafsACLsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafsACLsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyCCCustomRuleAsync(request:ModifyCCCustomRuleRequest,requestComplation:@escaping ExecuteResult<ModifyCCCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try ModifyCCCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafACLTopAsync(request:DescribeWafACLTopRequest,requestComplation:@escaping ExecuteResult<DescribeWafACLTopResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafACLTopExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableWafInstanceAsync(request:EnableWafInstanceRequest,requestComplation:@escaping ExecuteResult<EnableWafInstanceResult>) throws {
        sgwJDCloudClient = self
        try EnableWafInstanceExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeOpLogsAsync(request:DescribeOpLogsRequest,requestComplation:@escaping ExecuteResult<DescribeOpLogsResult>) throws {
        sgwJDCloudClient = self
        try DescribeOpLogsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyUserRuleEngineConfigAsync(request:ModifyUserRuleEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyUserRuleEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyUserRuleEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyCCEngineConfigAsync(request:ModifyCCEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyCCEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyCCEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafACLsAsync(request:DescribeWafACLsRequest,requestComplation:@escaping ExecuteResult<DescribeWafACLsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafACLsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWebLockRuleAsync(request:ModifyWebLockRuleRequest,requestComplation:@escaping ExecuteResult<ModifyWebLockRuleResult>) throws {
        sgwJDCloudClient = self
        try ModifyWebLockRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteUserConfigAsync(request:DeleteUserConfigRequest,requestComplation:@escaping ExecuteResult<DeleteUserConfigResult>) throws {
        sgwJDCloudClient = self
        try DeleteUserConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWebLockEngineConfigAsync(request:ModifyWebLockEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyWebLockEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyWebLockEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafRuleEngineConfigAsync(request:ModifyWafRuleEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyWafRuleEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyWafRuleEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeLBServerIdsAsync(request:DescribeLBServerIdsRequest,requestComplation:@escaping ExecuteResult<DescribeLBServerIdsResult>) throws {
        sgwJDCloudClient = self
        try DescribeLBServerIdsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAclQpsDataTrendAsync(request:DescribeAclQpsDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeAclQpsDataTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeAclQpsDataTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserConfigsAsync(request:DescribeUserConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeUserConfigsResult>) throws {
        sgwJDCloudClient = self
        try DescribeUserConfigsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteWebLockRuleAsync(request:DeleteWebLockRuleRequest,requestComplation:@escaping ExecuteResult<DeleteWebLockRuleResult>) throws {
        sgwJDCloudClient = self
        try DeleteWebLockRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBotCustomRulesAsync(request:DescribeBotCustomRulesRequest,requestComplation:@escaping ExecuteResult<DescribeBotCustomRulesResult>) throws {
        sgwJDCloudClient = self
        try DescribeBotCustomRulesExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createWafAsync(request:CreateWafRequest,requestComplation:@escaping ExecuteResult<CreateWafResult>) throws {
        sgwJDCloudClient = self
        try CreateWafExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyAntibfEngineConfigAsync(request:ModifyAntibfEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyAntibfEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyAntibfEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyMaliciousIPEngineConfigAsync(request:ModifyMaliciousIPEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyMaliciousIPEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyMaliciousIPEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyBotCustomRuleAsync(request:ModifyBotCustomRuleRequest,requestComplation:@escaping ExecuteResult<ModifyBotCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try ModifyBotCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWebLockRuleAsync(request:DescribeWebLockRuleRequest,requestComplation:@escaping ExecuteResult<DescribeWebLockRuleResult>) throws {
        sgwJDCloudClient = self
        try DescribeWebLockRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQPSDataTrendAsync(request:DescribeQPSDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeQPSDataTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeQPSDataTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafAsync(request:ModifyWafRequest,requestComplation:@escaping ExecuteResult<ModifyWafResult>) throws {
        sgwJDCloudClient = self
        try ModifyWafExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAttackTrendAsync(request:DescribeAttackTrendRequest,requestComplation:@escaping ExecuteResult<DescribeAttackTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeAttackTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafsAsync(request:DescribeWafsRequest,requestComplation:@escaping ExecuteResult<DescribeWafsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafPriceAsync(request:DescribeWafPriceRequest,requestComplation:@escaping ExecuteResult<DescribeWafPriceResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafPriceExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeVulQpsDataTrendAsync(request:DescribeVulQpsDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeVulQpsDataTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeVulQpsDataTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeNotifyRulesAsync(request:DescribeNotifyRulesRequest,requestComplation:@escaping ExecuteResult<DescribeNotifyRulesResult>) throws {
        sgwJDCloudClient = self
        try DescribeNotifyRulesExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeApplyStatusAsync(request:DescribeApplyStatusRequest,requestComplation:@escaping ExecuteResult<DescribeApplyStatusResult>) throws {
        sgwJDCloudClient = self
        try DescribeApplyStatusExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func submitNewOrderAsync(request:SubmitNewOrderRequest,requestComplation:@escaping ExecuteResult<SubmitNewOrderResult>) throws {
        sgwJDCloudClient = self
        try SubmitNewOrderExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createUserConfigAsync(request:CreateUserConfigRequest,requestComplation:@escaping ExecuteResult<CreateUserConfigResult>) throws {
        sgwJDCloudClient = self
        try CreateUserConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAccessQpsDataTrendAsync(request:DescribeAccessQpsDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeAccessQpsDataTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeAccessQpsDataTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafsCCsAsync(request:DescribeWafsCCsRequest,requestComplation:@escaping ExecuteResult<DescribeWafsCCsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafsCCsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteCCCustomRuleAsync(request:DeleteCCCustomRuleRequest,requestComplation:@escaping ExecuteResult<DeleteCCCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try DeleteCCCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafUpdatesAsync(request:DescribeWafUpdatesRequest,requestComplation:@escaping ExecuteResult<DescribeWafUpdatesResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafUpdatesExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteMaliciousIpAsync(request:DeleteMaliciousIpRequest,requestComplation:@escaping ExecuteResult<DeleteMaliciousIpResult>) throws {
        sgwJDCloudClient = self
        try DeleteMaliciousIpExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafAsync(request:DescribeWafRequest,requestComplation:@escaping ExecuteResult<DescribeWafResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafsVulsAsync(request:DescribeWafsVulsRequest,requestComplation:@escaping ExecuteResult<DescribeWafsVulsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafsVulsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyMaliciousIpAsync(request:ModifyMaliciousIpRequest,requestComplation:@escaping ExecuteResult<ModifyMaliciousIpResult>) throws {
        sgwJDCloudClient = self
        try ModifyMaliciousIpExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteWafAsync(request:DeleteWafRequest,requestComplation:@escaping ExecuteResult<DeleteWafResult>) throws {
        sgwJDCloudClient = self
        try DeleteWafExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeMaliciousIpsAsync(request:DescribeMaliciousIpsRequest,requestComplation:@escaping ExecuteResult<DescribeMaliciousIpsResult>) throws {
        sgwJDCloudClient = self
        try DescribeMaliciousIpsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCCDataTrendAsync(request:DescribeCCDataTrendRequest,requestComplation:@escaping ExecuteResult<DescribeCCDataTrendResult>) throws {
        sgwJDCloudClient = self
        try DescribeCCDataTrendExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafVulsAsync(request:DescribeWafVulsRequest,requestComplation:@escaping ExecuteResult<DescribeWafVulsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafVulsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyNotifyRuleAsync(request:ModifyNotifyRuleRequest,requestComplation:@escaping ExecuteResult<ModifyNotifyRuleResult>) throws {
        sgwJDCloudClient = self
        try ModifyNotifyRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func postMisReportAsync(request:PostMisReportRequest,requestComplation:@escaping ExecuteResult<PostMisReportResult>) throws {
        sgwJDCloudClient = self
        try PostMisReportExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCCCustomRulesAsync(request:DescribeCCCustomRulesRequest,requestComplation:@escaping ExecuteResult<DescribeCCCustomRulesResult>) throws {
        sgwJDCloudClient = self
        try DescribeCCCustomRulesExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func upgradeWafInstanceAsync(request:UpgradeWafInstanceRequest,requestComplation:@escaping ExecuteResult<UpgradeWafInstanceResult>) throws {
        sgwJDCloudClient = self
        try UpgradeWafInstanceExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWebLockRulesAsync(request:DescribeWebLockRulesRequest,requestComplation:@escaping ExecuteResult<DescribeWebLockRulesResult>) throws {
        sgwJDCloudClient = self
        try DescribeWebLockRulesExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createWebLockRuleAsync(request:CreateWebLockRuleRequest,requestComplation:@escaping ExecuteResult<CreateWebLockRuleResult>) throws {
        sgwJDCloudClient = self
        try CreateWebLockRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyAntisdEngineConfigAsync(request:ModifyAntisdEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyAntisdEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyAntisdEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWafEngineConfigAsync(request:ModifyWafEngineConfigRequest,requestComplation:@escaping ExecuteResult<ModifyWafEngineConfigResult>) throws {
        sgwJDCloudClient = self
        try ModifyWafEngineConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWafCCsAsync(request:DescribeWafCCsRequest,requestComplation:@escaping ExecuteResult<DescribeWafCCsResult>) throws {
        sgwJDCloudClient = self
        try DescribeWafCCsExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeUserConfigAsync(request:DescribeUserConfigRequest,requestComplation:@escaping ExecuteResult<DescribeUserConfigResult>) throws {
        sgwJDCloudClient = self
        try DescribeUserConfigExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBotCustomRuleAsync(request:DescribeBotCustomRuleRequest,requestComplation:@escaping ExecuteResult<DescribeBotCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try DescribeBotCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableWafInstanceAsync(request:DisableWafInstanceRequest,requestComplation:@escaping ExecuteResult<DisableWafInstanceResult>) throws {
        sgwJDCloudClient = self
        try DisableWafInstanceExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTodayAttacksAsync(request:DescribeTodayAttacksRequest,requestComplation:@escaping ExecuteResult<DescribeTodayAttacksResult>) throws {
        sgwJDCloudClient = self
        try DescribeTodayAttacksExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createCCCustomRuleAsync(request:CreateCCCustomRuleRequest,requestComplation:@escaping ExecuteResult<CreateCCCustomRuleResult>) throws {
        sgwJDCloudClient = self
        try CreateCCCustomRuleExecutor(jdCloudClient: sgwJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension SgwJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "sgw.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "sgw.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
