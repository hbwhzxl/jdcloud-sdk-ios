/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   oss openapi
   oss openapi

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class OssopenapiJDCloudClient :JDCloudClient{
    
    private final var ossopenapiJDCloudClient:OssopenapiJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ossopenapi" + "v1"
    
    public let serviceName: String = "ossopenapi"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func getCdnMonitorStatisticAsync(request:GetCdnMonitorStatisticRequest,requestComplation:@escaping ExecuteResult<GetCdnMonitorStatisticResult>) throws {
        ossopenapiJDCloudClient = self
        try GetCdnMonitorStatisticExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func closeOriImgProtectionAsync(request:CloseOriImgProtectionRequest,requestComplation:@escaping ExecuteResult<CloseOriImgProtectionResult>) throws {
        ossopenapiJDCloudClient = self
        try CloseOriImgProtectionExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getBucketMonitorStatisticAsync(request:GetBucketMonitorStatisticRequest,requestComplation:@escaping ExecuteResult<GetBucketMonitorStatisticResult>) throws {
        ossopenapiJDCloudClient = self
        try GetBucketMonitorStatisticExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteCNameAsync(request:DeleteCNameRequest,requestComplation:@escaping ExecuteResult<DeleteCNameResult>) throws {
        ossopenapiJDCloudClient = self
        try DeleteCNameExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getCNameAsync(request:GetCNameRequest,requestComplation:@escaping ExecuteResult<GetCNameResult>) throws {
        ossopenapiJDCloudClient = self
        try GetCNameExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func openOriImgProtectionAsync(request:OpenOriImgProtectionRequest,requestComplation:@escaping ExecuteResult<OpenOriImgProtectionResult>) throws {
        ossopenapiJDCloudClient = self
        try OpenOriImgProtectionExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func listCNamesAsync(request:ListCNamesRequest,requestComplation:@escaping ExecuteResult<ListCNamesResult>) throws {
        ossopenapiJDCloudClient = self
        try ListCNamesExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addCNameAsync(request:AddCNameRequest,requestComplation:@escaping ExecuteResult<AddCNameResult>) throws {
        ossopenapiJDCloudClient = self
        try AddCNameExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getOriImgProtectionInfoAsync(request:GetOriImgProtectionInfoRequest,requestComplation:@escaping ExecuteResult<GetOriImgProtectionInfoResult>) throws {
        ossopenapiJDCloudClient = self
        try GetOriImgProtectionInfoExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteCNamesByBucketNameAsync(request:DeleteCNamesByBucketNameRequest,requestComplation:@escaping ExecuteResult<DeleteCNamesByBucketNameResult>) throws {
        ossopenapiJDCloudClient = self
        try DeleteCNamesByBucketNameExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkICPAsync(request:CheckICPRequest,requestComplation:@escaping ExecuteResult<CheckICPResult>) throws {
        ossopenapiJDCloudClient = self
        try CheckICPExecutor(jdCloudClient: ossopenapiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension OssopenapiJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ossopenapi.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "ossopenapi.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
