/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 态势感知 API
   提供基础威胁检测和入侵告警服务接口。

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class IdsJDCloudClient :JDCloudClient{
    
    private final var idsJDCloudClient:IdsJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ids" + "v1"
    
    public let serviceName: String = "ids"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func queryNoticeMessagesAsync(request:QueryNoticeMessagesRequest,requestComplation:@escaping ExecuteResult<QueryNoticeMessagesResult>) throws {
        idsJDCloudClient = self
        try QueryNoticeMessagesExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTopAttackerHostAsync(request:QueryTopAttackerHostRequest,requestComplation:@escaping ExecuteResult<QueryTopAttackerHostResult>) throws {
        idsJDCloudClient = self
        try QueryTopAttackerHostExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAttacksAsync(request:QueryAttacksRequest,requestComplation:@escaping ExecuteResult<QueryAttacksResult>) throws {
        idsJDCloudClient = self
        try QueryAttacksExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateIpPropertiesStatusAsync(request:UpdateIpPropertiesStatusRequest,requestComplation:@escaping ExecuteResult<UpdateIpPropertiesStatusResult>) throws {
        idsJDCloudClient = self
        try UpdateIpPropertiesStatusExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTopZombieHostAsync(request:QueryTopZombieHostRequest,requestComplation:@escaping ExecuteResult<QueryTopZombieHostResult>) throws {
        idsJDCloudClient = self
        try QueryTopZombieHostExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func confirmAuthorizationAsync(request:ConfirmAuthorizationRequest,requestComplation:@escaping ExecuteResult<ConfirmAuthorizationResult>) throws {
        idsJDCloudClient = self
        try ConfirmAuthorizationExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func syncIpPropertiesAsync(request:SyncIpPropertiesRequest,requestComplation:@escaping ExecuteResult<SyncIpPropertiesResult>) throws {
        idsJDCloudClient = self
        try SyncIpPropertiesExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryMornitedIpPropertiesStatusAsync(request:QueryMornitedIpPropertiesStatusRequest,requestComplation:@escaping ExecuteResult<QueryMornitedIpPropertiesStatusResult>) throws {
        idsJDCloudClient = self
        try QueryMornitedIpPropertiesStatusExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTopAttackedHostAsync(request:QueryTopAttackedHostRequest,requestComplation:@escaping ExecuteResult<QueryTopAttackedHostResult>) throws {
        idsJDCloudClient = self
        try QueryTopAttackedHostExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteNoticeMessageAsync(request:DeleteNoticeMessageRequest,requestComplation:@escaping ExecuteResult<DeleteNoticeMessageResult>) throws {
        idsJDCloudClient = self
        try DeleteNoticeMessageExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func cancelAuthorizationAsync(request:CancelAuthorizationRequest,requestComplation:@escaping ExecuteResult<CancelAuthorizationResult>) throws {
        idsJDCloudClient = self
        try CancelAuthorizationExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func isAuthorizationGivenAsync(request:IsAuthorizationGivenRequest,requestComplation:@escaping ExecuteResult<IsAuthorizationGivenResult>) throws {
        idsJDCloudClient = self
        try IsAuthorizationGivenExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryMornitedIpAsync(request:QueryMornitedIpRequest,requestComplation:@escaping ExecuteResult<QueryMornitedIpResult>) throws {
        idsJDCloudClient = self
        try QueryMornitedIpExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryTodayAttackLogCountAsync(request:QueryTodayAttackLogCountRequest,requestComplation:@escaping ExecuteResult<QueryTodayAttackLogCountResult>) throws {
        idsJDCloudClient = self
        try QueryTodayAttackLogCountExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAttackPieTypeDataAsync(request:QueryAttackPieTypeDataRequest,requestComplation:@escaping ExecuteResult<QueryAttackPieTypeDataResult>) throws {
        idsJDCloudClient = self
        try QueryAttackPieTypeDataExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryAttackLineTrendAsync(request:QueryAttackLineTrendRequest,requestComplation:@escaping ExecuteResult<QueryAttackLineTrendResult>) throws {
        idsJDCloudClient = self
        try QueryAttackLineTrendExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryIpPropertiesCountAsync(request:QueryIpPropertiesCountRequest,requestComplation:@escaping ExecuteResult<QueryIpPropertiesCountResult>) throws {
        idsJDCloudClient = self
        try QueryIpPropertiesCountExecutor(jdCloudClient: idsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension IdsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ids.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "ids.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
