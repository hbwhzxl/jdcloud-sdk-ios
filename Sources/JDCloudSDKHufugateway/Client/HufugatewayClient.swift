/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   hufu API管理网关
   hufu API网关相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class HufugatewayJDCloudClient :JDCloudClient{
    
    private final var hufugatewayJDCloudClient:HufugatewayJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "hufugateway" + "v1"
    
    public let serviceName: String = "hufugateway"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func upstreamListAsync(request:UpstreamListRequest,requestComplation:@escaping ExecuteResult<UpstreamListResult>) throws {
        hufugatewayJDCloudClient = self
        try UpstreamListExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func backendSignDeleteAsync(request:BackendSignDeleteRequest,requestComplation:@escaping ExecuteResult<BackendSignDeleteResult>) throws {
        hufugatewayJDCloudClient = self
        try BackendSignDeleteExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func accessAuthListAsync(request:AccessAuthListRequest,requestComplation:@escaping ExecuteResult<AccessAuthListResult>) throws {
        hufugatewayJDCloudClient = self
        try AccessAuthListExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func accessAuthCreateAsync(request:AccessAuthCreateRequest,requestComplation:@escaping ExecuteResult<AccessAuthCreateResult>) throws {
        hufugatewayJDCloudClient = self
        try AccessAuthCreateExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func upstreamCreateAsync(request:UpstreamCreateRequest,requestComplation:@escaping ExecuteResult<UpstreamCreateResult>) throws {
        hufugatewayJDCloudClient = self
        try UpstreamCreateExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func kmsCreateKeyAsync(request:KmsCreateKeyRequest,requestComplation:@escaping ExecuteResult<KmsCreateKeyResult>) throws {
        hufugatewayJDCloudClient = self
        try KmsCreateKeyExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func kmsUpdateKeyAsync(request:KmsUpdateKeyRequest,requestComplation:@escaping ExecuteResult<KmsUpdateKeyResult>) throws {
        hufugatewayJDCloudClient = self
        try KmsUpdateKeyExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func accessAuthDeleteAsync(request:AccessAuthDeleteRequest,requestComplation:@escaping ExecuteResult<AccessAuthDeleteResult>) throws {
        hufugatewayJDCloudClient = self
        try AccessAuthDeleteExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func backendSignCreateAsync(request:BackendSignCreateRequest,requestComplation:@escaping ExecuteResult<BackendSignCreateResult>) throws {
        hufugatewayJDCloudClient = self
        try BackendSignCreateExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func kmsDeleteKeysAsync(request:KmsDeleteKeysRequest,requestComplation:@escaping ExecuteResult<KmsDeleteKeysResult>) throws {
        hufugatewayJDCloudClient = self
        try KmsDeleteKeysExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func upstreamDeleteAsync(request:UpstreamDeleteRequest,requestComplation:@escaping ExecuteResult<UpstreamDeleteResult>) throws {
        hufugatewayJDCloudClient = self
        try UpstreamDeleteExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func backendSignListAsync(request:BackendSignListRequest,requestComplation:@escaping ExecuteResult<BackendSignListResult>) throws {
        hufugatewayJDCloudClient = self
        try BackendSignListExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func upstreamUpdateAsync(request:UpstreamUpdateRequest,requestComplation:@escaping ExecuteResult<UpstreamUpdateResult>) throws {
        hufugatewayJDCloudClient = self
        try UpstreamUpdateExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func kmsKeysListAsync(request:KmsKeysListRequest,requestComplation:@escaping ExecuteResult<KmsKeysListResult>) throws {
        hufugatewayJDCloudClient = self
        try KmsKeysListExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func kmsQueryKeyInfoAsync(request:KmsQueryKeyInfoRequest,requestComplation:@escaping ExecuteResult<KmsQueryKeyInfoResult>) throws {
        hufugatewayJDCloudClient = self
        try KmsQueryKeyInfoExecutor(jdCloudClient: hufugatewayJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension HufugatewayJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "hufugateway.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "hufugateway.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
