/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云物理服务器
   云物理服务器相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class CpsJDCloudClient :JDCloudClient{
    
    private final var cpsJDCloudClient:CpsJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "cps" + "v1"
    
    public let serviceName: String = "cps"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeSubnetAsync(request:DescribeSubnetRequest,requestComplation:@escaping ExecuteResult<DescribeSubnetResult>) throws {
        cpsJDCloudClient = self
        try DescribeSubnetExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDeviceTypesAsync(request:DescribeDeviceTypesRequest,requestComplation:@escaping ExecuteResult<DescribeDeviceTypesResult>) throws {
        cpsJDCloudClient = self
        try DescribeDeviceTypesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func stopInstanceAsync(request:StopInstanceRequest,requestComplation:@escaping ExecuteResult<StopInstanceResult>) throws {
        cpsJDCloudClient = self
        try StopInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func restartInstanceAsync(request:RestartInstanceRequest,requestComplation:@escaping ExecuteResult<RestartInstanceResult>) throws {
        cpsJDCloudClient = self
        try RestartInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceStatusAsync(request:DescribeInstanceStatusRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceStatusResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceStatusExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func reinstallInstanceAsync(request:ReinstallInstanceRequest,requestComplation:@escaping ExecuteResult<ReinstallInstanceResult>) throws {
        cpsJDCloudClient = self
        try ReinstallInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeOSAsync(request:DescribeOSRequest,requestComplation:@escaping ExecuteResult<DescribeOSResult>) throws {
        cpsJDCloudClient = self
        try DescribeOSExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDeviceRaidsAsync(request:DescribeDeviceRaidsRequest,requestComplation:@escaping ExecuteResult<DescribeDeviceRaidsResult>) throws {
        cpsJDCloudClient = self
        try DescribeDeviceRaidsExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteInstanceAsync(request:DeleteInstanceRequest,requestComplation:@escaping ExecuteResult<DeleteInstanceResult>) throws {
        cpsJDCloudClient = self
        try DeleteInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSoftwareAsync(request:DescribeSoftwareRequest,requestComplation:@escaping ExecuteResult<DescribeSoftwareResult>) throws {
        cpsJDCloudClient = self
        try DescribeSoftwareExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceNameAsync(request:DescribeInstanceNameRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceNameResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceNameExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceRaidAsync(request:DescribeInstanceRaidRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceRaidResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceRaidExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyBandwidthAsync(request:ModifyBandwidthRequest,requestComplation:@escaping ExecuteResult<ModifyBandwidthResult>) throws {
        cpsJDCloudClient = self
        try ModifyBandwidthExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        cpsJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegionesAsync(request:DescribeRegionesRequest,requestComplation:@escaping ExecuteResult<DescribeRegionesResult>) throws {
        cpsJDCloudClient = self
        try DescribeRegionesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func startInstanceAsync(request:StartInstanceRequest,requestComplation:@escaping ExecuteResult<StartInstanceResult>) throws {
        cpsJDCloudClient = self
        try StartInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInstancesAsync(request:CreateInstancesRequest,requestComplation:@escaping ExecuteResult<CreateInstancesResult>) throws {
        cpsJDCloudClient = self
        try CreateInstancesExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceAsync(request:ModifyInstanceRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceResult>) throws {
        cpsJDCloudClient = self
        try ModifyInstanceExecutor(jdCloudClient: cpsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension CpsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cps.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "cps.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
