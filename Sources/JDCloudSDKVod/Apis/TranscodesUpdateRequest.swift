/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   点播管理API
   点播管理API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  添加转码模板
public class TranscodesUpdateRequest:JdCloudRequest
{
    /// 码率ID
    var coderateId:Double

    /// 模板名称
    var name:String

    /// 封装格式
    var format:String

    /// 视频编码
    var videoCodec:String

    /// 分辨率-宽
    var width:Int?

    /// 分辨率-高
    var height:Int?

    /// 视频码率
    var videoCoderate:Int

    /// 视频帧率
    var videoFramerate:String

    /// 音频编码
    var audioCodec:String

    /// 音频码率
    var audioCoderate:Int

    /// 音频采样率
    var sampleRate:Int

    /// 音频声道数
    var channel:Int


    public init(regionId: String,coderateId:Double,name:String,format:String,videoCodec:String,videoCoderate:Int,videoFramerate:String,audioCodec:String,audioCoderate:Int,sampleRate:Int,channel:Int){
        self.coderateId = coderateId
        self.name = name
        self.format = format
        self.videoCodec = videoCodec
        self.videoCoderate = videoCoderate
        self.videoFramerate = videoFramerate
        self.audioCodec = audioCodec
        self.audioCoderate = audioCoderate
        self.sampleRate = sampleRate
        self.channel = channel
        super.init(regionId: regionId)
    }


    enum TranscodesUpdateRequestRequestCodingKeys: String, CodingKey {
        case coderateId
        case name
        case format
        case videoCodec
        case width
        case height
        case videoCoderate
        case videoFramerate
        case audioCodec
        case audioCoderate
        case sampleRate
        case channel
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: TranscodesUpdateRequestRequestCodingKeys.self)
        try container.encode(coderateId, forKey: .coderateId)
        try container.encode(name, forKey: .name)
        try container.encode(format, forKey: .format)
        try container.encode(videoCodec, forKey: .videoCodec)
        try container.encode(width, forKey: .width)
        try container.encode(height, forKey: .height)
        try container.encode(videoCoderate, forKey: .videoCoderate)
        try container.encode(videoFramerate, forKey: .videoFramerate)
        try container.encode(audioCodec, forKey: .audioCodec)
        try container.encode(audioCoderate, forKey: .audioCoderate)
        try container.encode(sampleRate, forKey: .sampleRate)
        try container.encode(channel, forKey: .channel)

    }
}
