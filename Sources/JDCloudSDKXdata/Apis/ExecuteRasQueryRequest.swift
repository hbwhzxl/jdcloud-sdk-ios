/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   query
   API related to XDATA-DW query

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  执行用户编写的Spark SQL脚本
public class ExecuteRasQueryRequest:JdCloudRequest
{
    /// 数据库名称
    var databaseName:String?

    /// sql脚本
    var sql:String

    /// 用户名称
    var userName:String

    /// 队列名称
    var queueName:String?

    /// 资源名称
    var source:String?

    /// 回调地址名称
    var callBackURL:String?

    /// 实例名称
    var instanceName:String

    /// 实例拥有者名称
    var instanceOwnerName:String?

    /// 是否需要解释
    var isExplain:String?


    public init(regionId: String,sql:String,userName:String,instanceName:String){
        self.sql = sql
        self.userName = userName
        self.instanceName = instanceName
        super.init(regionId: regionId)
    }


    enum ExecuteRasQueryRequestRequestCodingKeys: String, CodingKey {
        case databaseName
        case sql
        case userName
        case queueName
        case source
        case callBackURL
        case instanceName
        case instanceOwnerName
        case isExplain
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: ExecuteRasQueryRequestRequestCodingKeys.self)
        try container.encode(databaseName, forKey: .databaseName)
        try container.encode(sql, forKey: .sql)
        try container.encode(userName, forKey: .userName)
        try container.encode(queueName, forKey: .queueName)
        try container.encode(source, forKey: .source)
        try container.encode(callBackURL, forKey: .callBackURL)
        try container.encode(instanceName, forKey: .instanceName)
        try container.encode(instanceOwnerName, forKey: .instanceOwnerName)
        try container.encode(isExplain, forKey: .isExplain)

    }
}
