/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   resource-tag API
   资源标签相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class ResourcetagJDCloudClient :JDCloudClient{
    
    private final var resourcetagJDCloudClient:ResourcetagJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "resourcetag" + "v1"
    
    public let serviceName: String = "resourcetag"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func unTagResourcesAsync(request:UnTagResourcesRequest,requestComplation:@escaping ExecuteResult<UnTagResourcesResult>) throws {
        resourcetagJDCloudClient = self
        try UnTagResourcesExecutor(jdCloudClient: resourcetagJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeKeysAsync(request:DescribeKeysRequest,requestComplation:@escaping ExecuteResult<DescribeKeysResult>) throws {
        resourcetagJDCloudClient = self
        try DescribeKeysExecutor(jdCloudClient: resourcetagJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeResourcesAsync(request:DescribeResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeResourcesResult>) throws {
        resourcetagJDCloudClient = self
        try DescribeResourcesExecutor(jdCloudClient: resourcetagJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeValuesAsync(request:DescribeValuesRequest,requestComplation:@escaping ExecuteResult<DescribeValuesResult>) throws {
        resourcetagJDCloudClient = self
        try DescribeValuesExecutor(jdCloudClient: resourcetagJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTagsAsync(request:DescribeTagsRequest,requestComplation:@escaping ExecuteResult<DescribeTagsResult>) throws {
        resourcetagJDCloudClient = self
        try DescribeTagsExecutor(jdCloudClient: resourcetagJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func tagResourcesAsync(request:TagResourcesRequest,requestComplation:@escaping ExecuteResult<TagResourcesResult>) throws {
        resourcetagJDCloudClient = self
        try TagResourcesExecutor(jdCloudClient: resourcetagJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension ResourcetagJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "resource-tag.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "resource-tag.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
