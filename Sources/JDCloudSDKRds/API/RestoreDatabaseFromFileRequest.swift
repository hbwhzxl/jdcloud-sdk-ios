/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   数据库管理
   数据库管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  从用户通过单库上云工具上传到云上的备份文件中恢复单个数据库&lt;br&gt;- 仅支持SQL Server
@objc(RestoreDatabaseFromFileRequest)
public class RestoreDatabaseFromFileRequest:JdCloudRequest
{
    /// 共享文件的全局ID，可从上传文件查询接口[describeImportFiles](../import/describeImportFiles.md)获取；如果该文件不是共享文件，则不用输入该参数
    var sharedFileGid:String?

    /// 用户上传的备份文件名称（包括文件后缀名），例如mydb1.bak
    var fileName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,fileName:String,instanceId:String,dbName:String){
        self.fileName = fileName
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum RestoreDatabaseFromFileRequestRequestCodingKeys: String, CodingKey {
        case sharedFileGid
        case fileName
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromFileRequestRequestCodingKeys.self)
        try encoderContainer.encode(sharedFileGid, forKey: .sharedFileGid)
        try encoderContainer.encode(fileName, forKey: .fileName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}
