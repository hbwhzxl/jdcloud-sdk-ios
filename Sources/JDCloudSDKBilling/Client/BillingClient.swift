/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   计费
   计费系统API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class BillingJDCloudClient :JDCloudClient{
    
    private final var billingJDCloudClient:BillingJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "billing" + "v1"
    
    public let serviceName: String = "billing"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func queryConsumptionOverViewAsync(request:QueryConsumptionOverViewRequest,requestComplation:@escaping ExecuteResult<QueryConsumptionOverViewResult>) throws {
        billingJDCloudClient = self
        try QueryConsumptionOverViewExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryResourceAeStateAsync(request:QueryResourceAeStateRequest,requestComplation:@escaping ExecuteResult<QueryResourceAeStateResult>) throws {
        billingJDCloudClient = self
        try QueryResourceAeStateExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func isArrearAsync(request:IsArrearRequest,requestComplation:@escaping ExecuteResult<IsArrearResult>) throws {
        billingJDCloudClient = self
        try IsArrearExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func adminQueryBillStatisticsInfoAsync(request:AdminQueryBillStatisticsInfoRequest,requestComplation:@escaping ExecuteResult<AdminQueryBillStatisticsInfoResult>) throws {
        billingJDCloudClient = self
        try AdminQueryBillStatisticsInfoExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendResourceOrderStatusMessageAsync(request:SendResourceOrderStatusMessageRequest,requestComplation:@escaping ExecuteResult<SendResourceOrderStatusMessageResult>) throws {
        billingJDCloudClient = self
        try SendResourceOrderStatusMessageExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getResourceOrderByConditionAsync(request:GetResourceOrderByConditionRequest,requestComplation:@escaping ExecuteResult<GetResourceOrderByConditionResult>) throws {
        billingJDCloudClient = self
        try GetResourceOrderByConditionExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getBillDetailAsync(request:GetBillDetailRequest,requestComplation:@escaping ExecuteResult<GetBillDetailResult>) throws {
        billingJDCloudClient = self
        try GetBillDetailExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportConsumeBillAsync(request:ExportConsumeBillRequest,requestComplation:@escaping ExecuteResult<ExportConsumeBillResult>) throws {
        billingJDCloudClient = self
        try ExportConsumeBillExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryResourceBillsAsync(request:QueryResourceBillsRequest,requestComplation:@escaping ExecuteResult<QueryResourceBillsResult>) throws {
        billingJDCloudClient = self
        try QueryResourceBillsExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportOverViewAsync(request:ExportOverViewRequest,requestComplation:@escaping ExecuteResult<ExportOverViewResult>) throws {
        billingJDCloudClient = self
        try ExportOverViewExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func calculateTotalPriceAsync(request:CalculateTotalPriceRequest,requestComplation:@escaping ExecuteResult<CalculateTotalPriceResult>) throws {
        billingJDCloudClient = self
        try CalculateTotalPriceExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func calculateCompensateFeeAndSendCouponsAsync(request:CalculateCompensateFeeAndSendCouponsRequest,requestComplation:@escaping ExecuteResult<CalculateCompensateFeeAndSendCouponsResult>) throws {
        billingJDCloudClient = self
        try CalculateCompensateFeeAndSendCouponsExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryConsumeRecordsAsync(request:QueryConsumeRecordsRequest,requestComplation:@escaping ExecuteResult<QueryConsumeRecordsResult>) throws {
        billingJDCloudClient = self
        try QueryConsumeRecordsExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryPageByConditionAsync(request:QueryPageByConditionRequest,requestComplation:@escaping ExecuteResult<QueryPageByConditionResult>) throws {
        billingJDCloudClient = self
        try QueryPageByConditionExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getResourceNameAsync(request:GetResourceNameRequest,requestComplation:@escaping ExecuteResult<GetResourceNameResult>) throws {
        billingJDCloudClient = self
        try GetResourceNameExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryConsumeBillsAsync(request:QueryConsumeBillsRequest,requestComplation:@escaping ExecuteResult<QueryConsumeBillsResult>) throws {
        billingJDCloudClient = self
        try QueryConsumeBillsExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryBillStatisticsInfoAsync(request:QueryBillStatisticsInfoRequest,requestComplation:@escaping ExecuteResult<QueryBillStatisticsInfoResult>) throws {
        billingJDCloudClient = self
        try QueryBillStatisticsInfoExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getExpiringOrdersAsync(request:GetExpiringOrdersRequest,requestComplation:@escaping ExecuteResult<GetExpiringOrdersResult>) throws {
        billingJDCloudClient = self
        try GetExpiringOrdersExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportResourceBillAsync(request:ExportResourceBillRequest,requestComplation:@escaping ExecuteResult<ExportResourceBillResult>) throws {
        billingJDCloudClient = self
        try ExportResourceBillExecutor(jdCloudClient: billingJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension BillingJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "billing.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "billing.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
