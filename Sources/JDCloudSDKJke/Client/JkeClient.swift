/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   jke
   k8s 集群服务相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class JkeJDCloudClient :JDCloudClient{
    
    private final var jkeJDCloudClient:JkeJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "jke" + "v1"
    
    public let serviceName: String = "jke"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeClustersAsync(request:DescribeClustersRequest,requestComplation:@escaping ExecuteResult<DescribeClustersResult>) throws {
        jkeJDCloudClient = self
        try DescribeClustersExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyNodeGroupAsync(request:ModifyNodeGroupRequest,requestComplation:@escaping ExecuteResult<ModifyNodeGroupResult>) throws {
        jkeJDCloudClient = self
        try ModifyNodeGroupExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createNodeGroupAsync(request:CreateNodeGroupRequest,requestComplation:@escaping ExecuteResult<CreateNodeGroupResult>) throws {
        jkeJDCloudClient = self
        try CreateNodeGroupExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeNodeGroupAsync(request:DescribeNodeGroupRequest,requestComplation:@escaping ExecuteResult<DescribeNodeGroupResult>) throws {
        jkeJDCloudClient = self
        try DescribeNodeGroupExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQuotasAsync(request:DescribeQuotasRequest,requestComplation:@escaping ExecuteResult<DescribeQuotasResult>) throws {
        jkeJDCloudClient = self
        try DescribeQuotasExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyQuotaAsync(request:ModifyQuotaRequest,requestComplation:@escaping ExecuteResult<ModifyQuotaResult>) throws {
        jkeJDCloudClient = self
        try ModifyQuotaExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createClusterAsync(request:CreateClusterRequest,requestComplation:@escaping ExecuteResult<CreateClusterResult>) throws {
        jkeJDCloudClient = self
        try CreateClusterExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyClusterAsync(request:ModifyClusterRequest,requestComplation:@escaping ExecuteResult<ModifyClusterResult>) throws {
        jkeJDCloudClient = self
        try ModifyClusterExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeServerConfigAsync(request:DescribeServerConfigRequest,requestComplation:@escaping ExecuteResult<DescribeServerConfigResult>) throws {
        jkeJDCloudClient = self
        try DescribeServerConfigExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeNodeGroupsAsync(request:DescribeNodeGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeNodeGroupsResult>) throws {
        jkeJDCloudClient = self
        try DescribeNodeGroupsExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setNodeGroupSizeAsync(request:SetNodeGroupSizeRequest,requestComplation:@escaping ExecuteResult<SetNodeGroupSizeResult>) throws {
        jkeJDCloudClient = self
        try SetNodeGroupSizeExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteNodeGroupAsync(request:DeleteNodeGroupRequest,requestComplation:@escaping ExecuteResult<DeleteNodeGroupResult>) throws {
        jkeJDCloudClient = self
        try DeleteNodeGroupExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteClusterAsync(request:DeleteClusterRequest,requestComplation:@escaping ExecuteResult<DeleteClusterResult>) throws {
        jkeJDCloudClient = self
        try DeleteClusterExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeClusterAsync(request:DescribeClusterRequest,requestComplation:@escaping ExecuteResult<DescribeClusterResult>) throws {
        jkeJDCloudClient = self
        try DescribeClusterExecutor(jdCloudClient: jkeJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension JkeJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jke.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "jke.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
