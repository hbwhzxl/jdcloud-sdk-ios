/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   监听器资源
   监听器资源相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建一个监听器
public class CreateListenerRequest:JdCloudRequest
{
    /// Listener的名字,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
    var listenerName:String

    /// 监听协议, 取值为Tcp, Tls, Http, Https【alb】支持Http, Https，Tcp和Tls【nlb】支持Tcp
    var `protocol`:String

    /// 监听端口，取值范围为[1, 65535]
    var port:Double

    /// 默认的后端服务Id
    var backendId:String

    /// Listener所属loadBalancer的Id
    var loadBalancerId:String

    /// 默认后端服务的转发策略,取值为Forward或Redirect, 现只支持Forward, 默认为Forward
    var action:String?

    /// 【alb Https和Tls协议】ssl server证书列表，现只支持一个证书
    var certificateSpecs:CertificateSpec?

    /// 连接保持时间, &gt;&#x3D;1，范围为[1,86400]。【Tcp和Tls协议】默认为：1800s【Http和Https协议】默认为：60s
    var connectionIdleTimeSeconds:Double?

    /// 描述,允许输入UTF-8编码下的全部字符，不超过256字符
    var description:String?


    public init(regionId: String,listenerName:String,protocol:String,port:Double,backendId:String,loadBalancerId:String){
        self.listenerName = listenerName
        self.`protocol` = `protocol`
        self.port = port
        self.backendId = backendId
        self.loadBalancerId = loadBalancerId
        super.init(regionId: regionId)
    }


    enum CreateListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerName
        case `protocol` = "protocol"
        case port
        case backendId
        case loadBalancerId
        case action
        case certificateSpecs
        case connectionIdleTimeSeconds
        case description
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateListenerRequestRequestCodingKeys.self)
        try container.encode(listenerName, forKey: .listenerName)
        try container.encode(`protocol`, forKey: .`protocol`)
        try container.encode(port, forKey: .port)
        try container.encode(backendId, forKey: .backendId)
        try container.encode(loadBalancerId, forKey: .loadBalancerId)
        try container.encode(action, forKey: .action)
        try container.encode(certificateSpecs, forKey: .certificateSpecs)
        try container.encode(connectionIdleTimeSeconds, forKey: .connectionIdleTimeSeconds)
        try container.encode(description, forKey: .description)

    }
}
