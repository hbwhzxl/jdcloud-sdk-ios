/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云鼎2.0 openApi
   云鼎2.0 openApi 相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class Yd2JDCloudClient :JDCloudClient{
    
    private final var yd2JDCloudClient:Yd2JDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "yd2" + "v1"
    
    public let serviceName: String = "yd2"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func queryRdsInstancesAsync(request:QueryRdsInstancesRequest,requestComplation:@escaping ExecuteResult<QueryRdsInstancesResult>) throws {
        yd2JDCloudClient = self
        try QueryRdsInstancesExecutor(jdCloudClient: yd2JDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryYd2ElasticIpsAsync(request:QueryYd2ElasticIpsRequest,requestComplation:@escaping ExecuteResult<QueryYd2ElasticIpsResult>) throws {
        yd2JDCloudClient = self
        try QueryYd2ElasticIpsExecutor(jdCloudClient: yd2JDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryVmInstancesAsync(request:QueryVmInstancesRequest,requestComplation:@escaping ExecuteResult<QueryVmInstancesResult>) throws {
        yd2JDCloudClient = self
        try QueryVmInstancesExecutor(jdCloudClient: yd2JDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryVpcElasticIpsAsync(request:QueryVpcElasticIpsRequest,requestComplation:@escaping ExecuteResult<QueryVpcElasticIpsResult>) throws {
        yd2JDCloudClient = self
        try QueryVpcElasticIpsExecutor(jdCloudClient: yd2JDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension Yd2JDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "yd2.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "yd2.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
