/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云数据库RDS
   目前RDS OpenAPI支持云数据库SQL Server，可以通过OpenAPI实现数据库管理，账号管理，备份管理，单库上云等功能，后续将支持云数据库MySQL

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class RdsJDCloudClient :JDCloudClient{
    
    private final var rdsJDCloudClient:RdsJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "rds" + "v1"
    
    public let serviceName: String = "rds"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeAuditDownloadURLAsync(request:DescribeAuditDownloadURLRequest,requestComplation:@escaping ExecuteResult<DescribeAuditDownloadURLResult>) throws {
        rdsJDCloudClient = self
        try DescribeAuditDownloadURLExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func clearBinlogsAsync(request:ClearBinlogsRequest,requestComplation:@escaping ExecuteResult<ClearBinlogsResult>) throws {
        rdsJDCloudClient = self
        try ClearBinlogsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBackupPolicyAsync(request:DescribeBackupPolicyRequest,requestComplation:@escaping ExecuteResult<DescribeBackupPolicyResult>) throws {
        rdsJDCloudClient = self
        try DescribeBackupPolicyExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBackupDownloadURLAsync(request:DescribeBackupDownloadURLRequest,requestComplation:@escaping ExecuteResult<DescribeBackupDownloadURLResult>) throws {
        rdsJDCloudClient = self
        try DescribeBackupDownloadURLExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBinlogsAsync(request:DescribeBinlogsRequest,requestComplation:@escaping ExecuteResult<DescribeBinlogsResult>) throws {
        rdsJDCloudClient = self
        try DescribeBinlogsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteInstanceAsync(request:DeleteInstanceRequest,requestComplation:@escaping ExecuteResult<DeleteInstanceResult>) throws {
        rdsJDCloudClient = self
        try DeleteInstanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBackupsAsync(request:DescribeBackupsRequest,requestComplation:@escaping ExecuteResult<DescribeBackupsResult>) throws {
        rdsJDCloudClient = self
        try DescribeBackupsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyConnectionModeAsync(request:ModifyConnectionModeRequest,requestComplation:@escaping ExecuteResult<ModifyConnectionModeResult>) throws {
        rdsJDCloudClient = self
        try ModifyConnectionModeExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteAuditAsync(request:DeleteAuditRequest,requestComplation:@escaping ExecuteResult<DeleteAuditResult>) throws {
        rdsJDCloudClient = self
        try DeleteAuditExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInstanceByTimeAsync(request:CreateInstanceByTimeRequest,requestComplation:@escaping ExecuteResult<CreateInstanceByTimeResult>) throws {
        rdsJDCloudClient = self
        try CreateInstanceByTimeExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableInternetAccessAsync(request:EnableInternetAccessRequest,requestComplation:@escaping ExecuteResult<EnableInternetAccessResult>) throws {
        rdsJDCloudClient = self
        try EnableInternetAccessExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAccountsAsync(request:DescribeAccountsRequest,requestComplation:@escaping ExecuteResult<DescribeAccountsResult>) throws {
        rdsJDCloudClient = self
        try DescribeAccountsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBinlogDownloadURLAsync(request:DescribeBinlogDownloadURLRequest,requestComplation:@escaping ExecuteResult<DescribeBinlogDownloadURLResult>) throws {
        rdsJDCloudClient = self
        try DescribeBinlogDownloadURLExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAuditFilesAsync(request:DescribeAuditFilesRequest,requestComplation:@escaping ExecuteResult<DescribeAuditFilesResult>) throws {
        rdsJDCloudClient = self
        try DescribeAuditFilesExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createAccountAsync(request:CreateAccountRequest,requestComplation:@escaping ExecuteResult<CreateAccountResult>) throws {
        rdsJDCloudClient = self
        try CreateAccountExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func grantPrivilegeAsync(request:GrantPrivilegeRequest,requestComplation:@escaping ExecuteResult<GrantPrivilegeResult>) throws {
        rdsJDCloudClient = self
        try GrantPrivilegeExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func revokePrivilegeAsync(request:RevokePrivilegeRequest,requestComplation:@escaping ExecuteResult<RevokePrivilegeResult>) throws {
        rdsJDCloudClient = self
        try RevokePrivilegeExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getUploadKeyAsync(request:GetUploadKeyRequest,requestComplation:@escaping ExecuteResult<GetUploadKeyResult>) throws {
        rdsJDCloudClient = self
        try GetUploadKeyExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func restoreDatabaseFromFileAsync(request:RestoreDatabaseFromFileRequest,requestComplation:@escaping ExecuteResult<RestoreDatabaseFromFileResult>) throws {
        rdsJDCloudClient = self
        try RestoreDatabaseFromFileExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceAttributesAsync(request:DescribeInstanceAttributesRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceAttributesResult>) throws {
        rdsJDCloudClient = self
        try DescribeInstanceAttributesExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceSpecAsync(request:ModifyInstanceSpecRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceSpecResult>) throws {
        rdsJDCloudClient = self
        try ModifyInstanceSpecExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAuditAsync(request:DescribeAuditRequest,requestComplation:@escaping ExecuteResult<DescribeAuditResult>) throws {
        rdsJDCloudClient = self
        try DescribeAuditExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQueryPerformanceAsync(request:DescribeQueryPerformanceRequest,requestComplation:@escaping ExecuteResult<DescribeQueryPerformanceResult>) throws {
        rdsJDCloudClient = self
        try DescribeQueryPerformanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSlowLogAttributesAsync(request:DescribeSlowLogAttributesRequest,requestComplation:@escaping ExecuteResult<DescribeSlowLogAttributesResult>) throws {
        rdsJDCloudClient = self
        try DescribeSlowLogAttributesExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyAuditAsync(request:ModifyAuditRequest,requestComplation:@escaping ExecuteResult<ModifyAuditResult>) throws {
        rdsJDCloudClient = self
        try ModifyAuditExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeErrorLogsAsync(request:DescribeErrorLogsRequest,requestComplation:@escaping ExecuteResult<DescribeErrorLogsResult>) throws {
        rdsJDCloudClient = self
        try DescribeErrorLogsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSlowLogsAsync(request:DescribeSlowLogsRequest,requestComplation:@escaping ExecuteResult<DescribeSlowLogsResult>) throws {
        rdsJDCloudClient = self
        try DescribeSlowLogsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteDatabaseAsync(request:DeleteDatabaseRequest,requestComplation:@escaping ExecuteResult<DeleteDatabaseResult>) throws {
        rdsJDCloudClient = self
        try DeleteDatabaseExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInstanceFromBackupAsync(request:CreateInstanceFromBackupRequest,requestComplation:@escaping ExecuteResult<CreateInstanceFromBackupResult>) throws {
        rdsJDCloudClient = self
        try CreateInstanceFromBackupExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWhiteListAsync(request:ModifyWhiteListRequest,requestComplation:@escaping ExecuteResult<ModifyWhiteListResult>) throws {
        rdsJDCloudClient = self
        try ModifyWhiteListExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func resetPasswordAsync(request:ResetPasswordRequest,requestComplation:@escaping ExecuteResult<ResetPasswordResult>) throws {
        rdsJDCloudClient = self
        try ResetPasswordExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createDatabaseAsync(request:CreateDatabaseRequest,requestComplation:@escaping ExecuteResult<CreateDatabaseResult>) throws {
        rdsJDCloudClient = self
        try CreateDatabaseExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setImportFileSharedAsync(request:SetImportFileSharedRequest,requestComplation:@escaping ExecuteResult<SetImportFileSharedResult>) throws {
        rdsJDCloudClient = self
        try SetImportFileSharedExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func rebootInstanceAsync(request:RebootInstanceRequest,requestComplation:@escaping ExecuteResult<RebootInstanceResult>) throws {
        rdsJDCloudClient = self
        try RebootInstanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDatabasesAsync(request:DescribeDatabasesRequest,requestComplation:@escaping ExecuteResult<DescribeDatabasesResult>) throws {
        rdsJDCloudClient = self
        try DescribeDatabasesExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeIndexPerformanceAsync(request:DescribeIndexPerformanceRequest,requestComplation:@escaping ExecuteResult<DescribeIndexPerformanceResult>) throws {
        rdsJDCloudClient = self
        try DescribeIndexPerformanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createAuditAsync(request:CreateAuditRequest,requestComplation:@escaping ExecuteResult<CreateAuditResult>) throws {
        rdsJDCloudClient = self
        try CreateAuditExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceNameAsync(request:ModifyInstanceNameRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceNameResult>) throws {
        rdsJDCloudClient = self
        try ModifyInstanceNameExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createBackupAsync(request:CreateBackupRequest,requestComplation:@escaping ExecuteResult<CreateBackupResult>) throws {
        rdsJDCloudClient = self
        try CreateBackupExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInstanceAsync(request:CreateInstanceRequest,requestComplation:@escaping ExecuteResult<CreateInstanceResult>) throws {
        rdsJDCloudClient = self
        try CreateInstanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyBackupPolicyAsync(request:ModifyBackupPolicyRequest,requestComplation:@escaping ExecuteResult<ModifyBackupPolicyResult>) throws {
        rdsJDCloudClient = self
        try ModifyBackupPolicyExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func restoreInstanceAsync(request:RestoreInstanceRequest,requestComplation:@escaping ExecuteResult<RestoreInstanceResult>) throws {
        rdsJDCloudClient = self
        try RestoreInstanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeImportFilesAsync(request:DescribeImportFilesRequest,requestComplation:@escaping ExecuteResult<DescribeImportFilesResult>) throws {
        rdsJDCloudClient = self
        try DescribeImportFilesExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func restoreDatabaseFromOSSAsync(request:RestoreDatabaseFromOSSRequest,requestComplation:@escaping ExecuteResult<RestoreDatabaseFromOSSResult>) throws {
        rdsJDCloudClient = self
        try RestoreDatabaseFromOSSExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteBackupAsync(request:DeleteBackupRequest,requestComplation:@escaping ExecuteResult<DeleteBackupResult>) throws {
        rdsJDCloudClient = self
        try DeleteBackupExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWhiteListAsync(request:DescribeWhiteListRequest,requestComplation:@escaping ExecuteResult<DescribeWhiteListResult>) throws {
        rdsJDCloudClient = self
        try DescribeWhiteListExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func restoreDatabaseFromBackupAsync(request:RestoreDatabaseFromBackupRequest,requestComplation:@escaping ExecuteResult<RestoreDatabaseFromBackupResult>) throws {
        rdsJDCloudClient = self
        try RestoreDatabaseFromBackupExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func failoverInstanceAsync(request:FailoverInstanceRequest,requestComplation:@escaping ExecuteResult<FailoverInstanceResult>) throws {
        rdsJDCloudClient = self
        try FailoverInstanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableInternetAccessAsync(request:DisableInternetAccessRequest,requestComplation:@escaping ExecuteResult<DisableInternetAccessResult>) throws {
        rdsJDCloudClient = self
        try DisableInternetAccessExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        rdsJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createROInstanceAsync(request:CreateROInstanceRequest,requestComplation:@escaping ExecuteResult<CreateROInstanceResult>) throws {
        rdsJDCloudClient = self
        try CreateROInstanceExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAuditOptionsAsync(request:DescribeAuditOptionsRequest,requestComplation:@escaping ExecuteResult<DescribeAuditOptionsResult>) throws {
        rdsJDCloudClient = self
        try DescribeAuditOptionsExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteAccountAsync(request:DeleteAccountRequest,requestComplation:@escaping ExecuteResult<DeleteAccountResult>) throws {
        rdsJDCloudClient = self
        try DeleteAccountExecutor(jdCloudClient: rdsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension RdsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "rds.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "rds.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
