/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   用量监控openAPI
   用量监控openAPI

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  获取下载流量情况或请求情况
public class GetBucketMonitorStatisticRequest:JdCloudRequest
{
    /// 统计类别(getRequest：get请求;putRequest：put请求;downBytes：下载流量;cdnTfcDownBytes：cdn回源流量)
    var countType:String

    /// 开始时间，使用GMT+8，yyyyMMddHHmmss时间格式
    var startTime:String

    /// 结束时间，使用GMT+8，yyyyMMddHHmmss时间格式
    var endTime:String

    /// 查询中的时间单位，0:day，1:week，2:month
    var timeUnit:Int

    /// bucket名称，值为-1时，查询该用户所有bucket的用量数据
    var bucketName:String


    public init(regionId: String,countType:String,startTime:String,endTime:String,timeUnit:Int,bucketName:String){
        self.countType = countType
        self.startTime = startTime
        self.endTime = endTime
        self.timeUnit = timeUnit
        self.bucketName = bucketName
        super.init(regionId: regionId)
    }


    enum GetBucketMonitorStatisticRequestRequestCodingKeys: String, CodingKey {
        case countType
        case startTime
        case endTime
        case timeUnit
        case bucketName
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: GetBucketMonitorStatisticRequestRequestCodingKeys.self)
        try container.encode(countType, forKey: .countType)
        try container.encode(startTime, forKey: .startTime)
        try container.encode(endTime, forKey: .endTime)
        try container.encode(timeUnit, forKey: .timeUnit)
        try container.encode(bucketName, forKey: .bucketName)

    }
}
