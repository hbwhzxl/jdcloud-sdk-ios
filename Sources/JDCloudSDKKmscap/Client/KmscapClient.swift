/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD 密钥管理服务(Key Management Service) 中间层 API
   基于硬件保护密钥的安全数据托管服务 中间层

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class KmscapJDCloudClient :JDCloudClient{
    
    private final var kmscapJDCloudClient:KmscapJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "kmscap" + "v1"
    
    public let serviceName: String = "kmscap"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeTrustedAppListAsync(request:DescribeTrustedAppListRequest,requestComplation:@escaping ExecuteResult<DescribeTrustedAppListResult>) throws {
        kmscapJDCloudClient = self
        try DescribeTrustedAppListExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeApplyStatusAsync(request:DescribeApplyStatusRequest,requestComplation:@escaping ExecuteResult<DescribeApplyStatusResult>) throws {
        kmscapJDCloudClient = self
        try DescribeApplyStatusExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCustomerListAsync(request:DescribeCustomerListRequest,requestComplation:@escaping ExecuteResult<DescribeCustomerListResult>) throws {
        kmscapJDCloudClient = self
        try DescribeCustomerListExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createTrustedAppAsync(request:CreateTrustedAppRequest,requestComplation:@escaping ExecuteResult<CreateTrustedAppResult>) throws {
        kmscapJDCloudClient = self
        try CreateTrustedAppExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyQuotaAsync(request:ModifyQuotaRequest,requestComplation:@escaping ExecuteResult<ModifyQuotaResult>) throws {
        kmscapJDCloudClient = self
        try ModifyQuotaExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func applyAsync(request:ApplyRequest,requestComplation:@escaping ExecuteResult<ApplyResult>) throws {
        kmscapJDCloudClient = self
        try ApplyExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTrustedAppAsync(request:DeleteTrustedAppRequest,requestComplation:@escaping ExecuteResult<DeleteTrustedAppResult>) throws {
        kmscapJDCloudClient = self
        try DeleteTrustedAppExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryReportInfoAsync(request:QueryReportInfoRequest,requestComplation:@escaping ExecuteResult<QueryReportInfoResult>) throws {
        kmscapJDCloudClient = self
        try QueryReportInfoExecutor(jdCloudClient: kmscapJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension KmscapJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "kms-cap.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "kms-cap.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
