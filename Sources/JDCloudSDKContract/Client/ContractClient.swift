/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD contract API
   API as contract

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class ContractJDCloudClient :JDCloudClient{
    
    private final var contractJDCloudClient:ContractJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "contract" + "v1"
    
    public let serviceName: String = "contract"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func queryRecordListAsync(request:QueryRecordListRequest,requestComplation:@escaping ExecuteResult<QueryRecordListResult>) throws {
        contractJDCloudClient = self
        try QueryRecordListExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func pushPostInfoAsync(request:PushPostInfoRequest,requestComplation:@escaping ExecuteResult<PushPostInfoResult>) throws {
        contractJDCloudClient = self
        try PushPostInfoExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryDictionaryAsync(request:QueryDictionaryRequest,requestComplation:@escaping ExecuteResult<QueryDictionaryResult>) throws {
        contractJDCloudClient = self
        try QueryDictionaryExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createContractAsync(request:CreateContractRequest,requestComplation:@escaping ExecuteResult<CreateContractResult>) throws {
        contractJDCloudClient = self
        try CreateContractExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func sendMessageEBSAsync(request:SendMessageEBSRequest,requestComplation:@escaping ExecuteResult<SendMessageEBSResult>) throws {
        contractJDCloudClient = self
        try SendMessageEBSExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryListAsync(request:QueryListRequest,requestComplation:@escaping ExecuteResult<QueryListResult>) throws {
        contractJDCloudClient = self
        try QueryListExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func saveFrameworkAgreementAsync(request:SaveFrameworkAgreementRequest,requestComplation:@escaping ExecuteResult<SaveFrameworkAgreementResult>) throws {
        contractJDCloudClient = self
        try SaveFrameworkAgreementExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkUserStatusAsync(request:CheckUserStatusRequest,requestComplation:@escaping ExecuteResult<CheckUserStatusResult>) throws {
        contractJDCloudClient = self
        try CheckUserStatusExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func changeStatusAsync(request:ChangeStatusRequest,requestComplation:@escaping ExecuteResult<ChangeStatusResult>) throws {
        contractJDCloudClient = self
        try ChangeStatusExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryOrderListAsync(request:QueryOrderListRequest,requestComplation:@escaping ExecuteResult<QueryOrderListResult>) throws {
        contractJDCloudClient = self
        try QueryOrderListExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryPaperContractApplicationAsync(request:QueryPaperContractApplicationRequest,requestComplation:@escaping ExecuteResult<QueryPaperContractApplicationResult>) throws {
        contractJDCloudClient = self
        try QueryPaperContractApplicationExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func paperContractApplicationAsync(request:PaperContractApplicationRequest,requestComplation:@escaping ExecuteResult<PaperContractApplicationResult>) throws {
        contractJDCloudClient = self
        try PaperContractApplicationExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryUserAsync(request:QueryUserRequest,requestComplation:@escaping ExecuteResult<QueryUserResult>) throws {
        contractJDCloudClient = self
        try QueryUserExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryPostDetailsInfoAsync(request:QueryPostDetailsInfoRequest,requestComplation:@escaping ExecuteResult<QueryPostDetailsInfoResult>) throws {
        contractJDCloudClient = self
        try QueryPostDetailsInfoExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateContractAsync(request:UpdateContractRequest,requestComplation:@escaping ExecuteResult<UpdateContractResult>) throws {
        contractJDCloudClient = self
        try UpdateContractExecutor(jdCloudClient: contractJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension ContractJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "contract-inner-stag.jdcloud.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "contract-inner-stag.jdcloud.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
