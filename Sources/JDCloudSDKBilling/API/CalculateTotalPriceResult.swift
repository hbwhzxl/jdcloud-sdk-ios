/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD BILLING PRICE Services API
   用户中心消费管理查询API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore

/// 查询计费价格信息
@objc(CalculateTotalPriceResult)
public class CalculateTotalPriceResult:NSObject,JdCloudResult
{
    /// 订单折扣前总价
    var totalPrice:Double?

    /// 订单折扣前总价4位
    var totalPriceScale4:Double?

    /// 折扣后订单价格
    var discountedTotalPrice:Double?

    /// 总折扣金额
    var totalDiscount:Double?

    /// List
    var list:OrderPriceDetail?

    /// 订单原价 包年时 一年原价为12个月价格，totalPrice为10个月价格
    var totalOriginalPrice:Double?

    /// 参与优惠的明细
    var favorableInfos:String?

    /// 备注
    var remark:String?

    /// 各订单单价总和
    var totalUnitPrice:String?



    public override init(){
        super.init()
    }

    enum CalculateTotalPriceResultCodingKeys: String, CodingKey {
        case totalPrice
        case totalPriceScale4
        case discountedTotalPrice
        case totalDiscount
        case list
        case totalOriginalPrice
        case favorableInfos
        case remark
        case totalUnitPrice
    }

    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CalculateTotalPriceResultCodingKeys.self)
        self.totalPrice = try decoderContainer.decode(Double?.self, forKey: .totalPrice)
        self.totalPriceScale4 = try decoderContainer.decode(Double?.self, forKey: .totalPriceScale4)
        self.discountedTotalPrice = try decoderContainer.decode(Double?.self, forKey: .discountedTotalPrice)
        self.totalDiscount = try decoderContainer.decode(Double?.self, forKey: .totalDiscount)
        self.list = try decoderContainer.decode(OrderPriceDetail?.self, forKey: .list)
        self.totalOriginalPrice = try decoderContainer.decode(Double?.self, forKey: .totalOriginalPrice)
        self.favorableInfos = try decoderContainer.decode(String?.self, forKey: .favorableInfos)
        self.remark = try decoderContainer.decode(String?.self, forKey: .remark)
        self.totalUnitPrice = try decoderContainer.decode(String?.self, forKey: .totalUnitPrice)
    }
}
public extension CalculateTotalPriceResult{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CalculateTotalPriceResultCodingKeys.self)
        try encoderContainer.encode(totalPrice, forKey: .totalPrice)
        try encoderContainer.encode(totalPriceScale4, forKey: .totalPriceScale4)
        try encoderContainer.encode(discountedTotalPrice, forKey: .discountedTotalPrice)
        try encoderContainer.encode(totalDiscount, forKey: .totalDiscount)
        try encoderContainer.encode(list, forKey: .list)
        try encoderContainer.encode(totalOriginalPrice, forKey: .totalOriginalPrice)
        try encoderContainer.encode(favorableInfos, forKey: .favorableInfos)
        try encoderContainer.encode(remark, forKey: .remark)
        try encoderContainer.encode(totalUnitPrice, forKey: .totalUnitPrice)
    }
}
