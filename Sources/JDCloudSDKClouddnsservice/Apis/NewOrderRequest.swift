/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   域名
   云解析OpenAPI域名接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  下单购买域名。
        ///         /// 仅供前端使用。
        ///         /// 
public class NewOrderRequest:JdCloudRequest
{
    /// 域名的套餐类型, 0-&gt;免费 ,1-&gt;企业版, 2-&gt;高级版
    var packId:Int

    /// 要添加的域名
    var domainName:String

    /// 域名ID，升级服务必填，新购买不填
    var domainId:Int?

    /// 1-&gt;新购买、3-&gt;升级
    var buyType:Int

    /// 1，2，3 ，购买的时长
    var timeSpan:Int

    /// 时间单位
    var timeUnit:Int

    /// 返回地址
    var returnURL:String


    public init(regionId: String,packId:Int,domainName:String,buyType:Int,timeSpan:Int,timeUnit:Int,returnURL:String){
        self.packId = packId
        self.domainName = domainName
        self.buyType = buyType
        self.timeSpan = timeSpan
        self.timeUnit = timeUnit
        self.returnURL = returnURL
        super.init(regionId: regionId)
    }


    enum NewOrderRequestRequestCodingKeys: String, CodingKey {
        case packId
        case domainName
        case domainId
        case buyType
        case timeSpan
        case timeUnit
        case returnURL
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: NewOrderRequestRequestCodingKeys.self)
        try container.encode(packId, forKey: .packId)
        try container.encode(domainName, forKey: .domainName)
        try container.encode(domainId, forKey: .domainId)
        try container.encode(buyType, forKey: .buyType)
        try container.encode(timeSpan, forKey: .timeSpan)
        try container.encode(timeUnit, forKey: .timeUnit)
        try container.encode(returnURL, forKey: .returnURL)

    }
}
