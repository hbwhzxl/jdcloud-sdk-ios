/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Statistics APIs
   资源统计相关接口

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  资源统计
public class DescribeStatisticsRequest:JdCloudRequest
{
    /// 资源的类型，取值vm, lb, ip, database 等
    var serviceCode:String

    /// 资源的uuid
    var resourceId:String?

    /// 聚合方式，默认：sum、可选值：sum、avg、max、min
    var aggregate:String?

    /// 要查询的metric
    var metric:String

    /// 自定义标签
    var tags:TagFilter?

    /// 查询时间范围的开始时间， UTC时间，格式：yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（默认为当前时间，早于30d时，将被重置为30d）
    var startTime:String?

    /// 查询时间范围的结束时间， UTC时间，格式：2016-12- yyyy-MM-dd&#39;T&#39;HH:mm:ssZ（为空时，将由startTime与timeInterval计算得出）
    var endTime:String?

    /// 时间间隔：1h，6h，12h，1d，3d，7d，14d，固定时间间隔，timeInterval 与 endTime 至少填一项
    var timeInterval:String?


    public init(regionId: String,serviceCode:String,metric:String){
        self.serviceCode = serviceCode
        self.metric = metric
        super.init(regionId: regionId)
    }


    enum DescribeStatisticsRequestRequestCodingKeys: String, CodingKey {
        case serviceCode
        case resourceId
        case aggregate
        case metric
        case tags
        case startTime
        case endTime
        case timeInterval
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: DescribeStatisticsRequestRequestCodingKeys.self)
        try container.encode(serviceCode, forKey: .serviceCode)
        try container.encode(resourceId, forKey: .resourceId)
        try container.encode(aggregate, forKey: .aggregate)
        try container.encode(metric, forKey: .metric)
        try container.encode(tags, forKey: .tags)
        try container.encode(startTime, forKey: .startTime)
        try container.encode(endTime, forKey: .endTime)
        try container.encode(timeInterval, forKey: .timeInterval)

    }
}
