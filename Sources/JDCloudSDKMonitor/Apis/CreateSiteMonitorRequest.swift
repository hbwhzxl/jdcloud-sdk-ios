/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   SiteMonitor APIs
   站点监控相关接口，提供创建、查询、修改、删除站点监控等功能

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建站点监控
public class CreateSiteMonitorRequest:JdCloudRequest
{
    /// Address
    var address:String?

    /// AdvanceChecked
    var advanceChecked:String?

    /// CreatedTime
    var createdTime:Int64?

    /// Cycle
    var cycle:Int64?

    /// DefaultSource
    var defaultSource:String?

    /// Enabled
    var enabled:String?

    /// HawkeyeId
    var hawkeyeId:Int64?

    /// HttpOption
    var httpOption:SiteMonitorHttpOption?

    /// Id
    var id:String?

    /// IsDeleted
    var isDeleted:String?

    /// Name
    var name:String?

    /// Pin
    var pin:String?

    /// Port
    var port:String?

    /// Source
    var source:SiteMonitorSource?

    /// Stats
    var stats:[String:JSONEncodaObject?]?

    /// TcpOption
    var tcpOption:SiteMonitorTcpOption?

    /// Type
    var type:String?

    /// UdpOption
    var udpOption:SiteMonitorUdpOption?

    /// UpdatedTime
    var updatedTime:Int64?




    enum CreateSiteMonitorRequestRequestCodingKeys: String, CodingKey {
        case address
        case advanceChecked
        case createdTime
        case cycle
        case defaultSource
        case enabled
        case hawkeyeId
        case httpOption
        case id
        case isDeleted
        case name
        case pin
        case port
        case source
        case stats
        case tcpOption
        case type
        case udpOption
        case updatedTime
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateSiteMonitorRequestRequestCodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(advanceChecked, forKey: .advanceChecked)
        try container.encode(createdTime, forKey: .createdTime)
        try container.encode(cycle, forKey: .cycle)
        try container.encode(defaultSource, forKey: .defaultSource)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(hawkeyeId, forKey: .hawkeyeId)
        try container.encode(httpOption, forKey: .httpOption)
        try container.encode(id, forKey: .id)
        try container.encode(isDeleted, forKey: .isDeleted)
        try container.encode(name, forKey: .name)
        try container.encode(pin, forKey: .pin)
        try container.encode(port, forKey: .port)
        try container.encode(source, forKey: .source)
        try container.encode(stats, forKey: .stats)
        try container.encode(tcpOption, forKey: .tcpOption)
        try container.encode(type, forKey: .type)
        try container.encode(udpOption, forKey: .udpOption)
        try container.encode(updatedTime, forKey: .updatedTime)

    }
}
