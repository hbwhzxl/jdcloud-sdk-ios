/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Vod API
   视频点播相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class VodJDCloudClient :JDCloudClient{
    
    private final var vodJDCloudClient:VodJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "vod" + "v1"
    
    public let serviceName: String = "vod"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func videosDeleteAsync(request:VideosDeleteRequest,requestComplation:@escaping ExecuteResult<VideosDeleteResult>) throws {
        vodJDCloudClient = self
        try VideosDeleteExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func transcodesCreateAsync(request:TranscodesCreateRequest,requestComplation:@escaping ExecuteResult<TranscodesCreateResult>) throws {
        vodJDCloudClient = self
        try TranscodesCreateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func logosAsync(request:LogosRequest,requestComplation:@escaping ExecuteResult<LogosResult>) throws {
        vodJDCloudClient = self
        try LogosExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func videosExportAsync(request:VideosExportRequest,requestComplation:@escaping ExecuteResult<VideosExportResult>) throws {
        vodJDCloudClient = self
        try VideosExportExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func videosUpdateByMidAsync(request:VideosUpdateByMidRequest,requestComplation:@escaping ExecuteResult<VideosUpdateByMidResult>) throws {
        vodJDCloudClient = self
        try VideosUpdateByMidExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func transcodesAsync(request:TranscodesRequest,requestComplation:@escaping ExecuteResult<TranscodesResult>) throws {
        vodJDCloudClient = self
        try TranscodesExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func findlistAsync(request:FindlistRequest,requestComplation:@escaping ExecuteResult<FindlistResult>) throws {
        vodJDCloudClient = self
        try FindlistExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func transcodesDeleteAsync(request:TranscodesDeleteRequest,requestComplation:@escaping ExecuteResult<TranscodesDeleteResult>) throws {
        vodJDCloudClient = self
        try TranscodesDeleteExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func videosCodesByMidAsync(request:VideosCodesByMidRequest,requestComplation:@escaping ExecuteResult<VideosCodesByMidResult>) throws {
        vodJDCloudClient = self
        try VideosCodesByMidExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func transcodesUpdateAsync(request:TranscodesUpdateRequest,requestComplation:@escaping ExecuteResult<TranscodesUpdateResult>) throws {
        vodJDCloudClient = self
        try TranscodesUpdateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func domainsAsync(request:DomainsRequest,requestComplation:@escaping ExecuteResult<DomainsResult>) throws {
        vodJDCloudClient = self
        try DomainsExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func videosAsync(request:VideosRequest,requestComplation:@escaping ExecuteResult<VideosResult>) throws {
        vodJDCloudClient = self
        try VideosExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func videosByMidAsync(request:VideosByMidRequest,requestComplation:@escaping ExecuteResult<VideosByMidResult>) throws {
        vodJDCloudClient = self
        try VideosByMidExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func videosUpdateByTemplateAsync(request:VideosUpdateByTemplateRequest,requestComplation:@escaping ExecuteResult<VideosUpdateByTemplateResult>) throws {
        vodJDCloudClient = self
        try VideosUpdateByTemplateExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func transcodesByIdAsync(request:TranscodesByIdRequest,requestComplation:@escaping ExecuteResult<TranscodesByIdResult>) throws {
        vodJDCloudClient = self
        try TranscodesByIdExecutor(jdCloudClient: vodJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension VodJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "vod.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "vod.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
