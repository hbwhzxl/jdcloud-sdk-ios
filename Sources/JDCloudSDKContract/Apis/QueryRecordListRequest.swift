/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD contract API
   API JDCLOUD contract API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询备案列表
public class QueryRecordListRequest:JdCloudRequest
{
    /// Reasonable
    var reasonable:Bool?

    /// PageSizeZero
    var pageSizeZero:Bool?

    /// StatusType
    var statusType:Int?

    /// CountSql
    var countSql:Bool?

    /// Pin
    var pin:String?

    /// PageSize
    var pageSize:Int?

    /// 查询开始时间，格式：yyyy-MM-dd HH:mm:ss
    var startTime:String?

    /// PageNum
    var pageNum:Int?

    /// 查询结束时间，格式：yyyy-MM-dd HH:mm:ss
    var endTime:String?

    /// OrderBy
    var orderBy:String?

    /// UniqueNumbers
    var uniqueNumbers:String?

    /// 合同来源（2:备案，3：订单
    var source:Int?




    enum QueryRecordListRequestRequestCodingKeys: String, CodingKey {
        case reasonable
        case pageSizeZero
        case statusType
        case countSql
        case pin
        case pageSize
        case startTime
        case pageNum
        case endTime
        case orderBy
        case uniqueNumbers
        case source
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: QueryRecordListRequestRequestCodingKeys.self)
        try container.encode(reasonable, forKey: .reasonable)
        try container.encode(pageSizeZero, forKey: .pageSizeZero)
        try container.encode(statusType, forKey: .statusType)
        try container.encode(countSql, forKey: .countSql)
        try container.encode(pin, forKey: .pin)
        try container.encode(pageSize, forKey: .pageSize)
        try container.encode(startTime, forKey: .startTime)
        try container.encode(pageNum, forKey: .pageNum)
        try container.encode(endTime, forKey: .endTime)
        try container.encode(orderBy, forKey: .orderBy)
        try container.encode(uniqueNumbers, forKey: .uniqueNumbers)
        try container.encode(source, forKey: .source)

    }
}
