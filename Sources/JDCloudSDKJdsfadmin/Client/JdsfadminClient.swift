/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云jdsfadmin接口
   jdcloud jdsf service admin interface

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class JdsfadminJDCloudClient :JDCloudClient{
    
    private final var jdsfadminJDCloudClient:JdsfadminJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "jdsfadmin" + "v1"
    
    public let serviceName: String = "jdsfadmin"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func updateProductRegionAsync(request:UpdateProductRegionRequest,requestComplation:@escaping ExecuteResult<UpdateProductRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try UpdateProductRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createSettingsAsync(request:CreateSettingsRequest,requestComplation:@escaping ExecuteResult<CreateSettingsResult>) throws {
        jdsfadminJDCloudClient = self
        try CreateSettingsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteSettingsAsync(request:DeleteSettingsRequest,requestComplation:@escaping ExecuteResult<DeleteSettingsResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteSettingsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateRegistrySpecAsync(request:UpdateRegistrySpecRequest,requestComplation:@escaping ExecuteResult<UpdateRegistrySpecResult>) throws {
        jdsfadminJDCloudClient = self
        try UpdateRegistrySpecExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateTraceConfigAsync(request:UpdateTraceConfigRequest,requestComplation:@escaping ExecuteResult<UpdateTraceConfigResult>) throws {
        jdsfadminJDCloudClient = self
        try UpdateTraceConfigExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegionsAsync(request:DescribeRegionsRequest,requestComplation:@escaping ExecuteResult<DescribeRegionsResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeRegionsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceClusterAsync(request:DescribeTraceClusterRequest,requestComplation:@escaping ExecuteResult<DescribeTraceClusterResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeTraceClusterExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createTraceConfigAsync(request:CreateTraceConfigRequest,requestComplation:@escaping ExecuteResult<CreateTraceConfigResult>) throws {
        jdsfadminJDCloudClient = self
        try CreateTraceConfigExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegistrySpecesAsync(request:DescribeRegistrySpecesRequest,requestComplation:@escaping ExecuteResult<DescribeRegistrySpecesResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeRegistrySpecesExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegistrySpecAsync(request:DescribeRegistrySpecRequest,requestComplation:@escaping ExecuteResult<DescribeRegistrySpecResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeRegistrySpecExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTraceConfigAsync(request:DeleteTraceConfigRequest,requestComplation:@escaping ExecuteResult<DeleteTraceConfigResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteTraceConfigExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceConfigsAsync(request:DescribeTraceConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeTraceConfigsResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeTraceConfigsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteRegistryAsync(request:DeleteRegistryRequest,requestComplation:@escaping ExecuteResult<DeleteRegistryResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteRegistryExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRegionAsync(request:CreateRegionRequest,requestComplation:@escaping ExecuteResult<CreateRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try CreateRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateRegionAsync(request:UpdateRegionRequest,requestComplation:@escaping ExecuteResult<UpdateRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try UpdateRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeProductRegionsAsync(request:DescribeProductRegionsRequest,requestComplation:@escaping ExecuteResult<DescribeProductRegionsResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeProductRegionsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createProductRegionsAsync(request:CreateProductRegionsRequest,requestComplation:@escaping ExecuteResult<CreateProductRegionsResult>) throws {
        jdsfadminJDCloudClient = self
        try CreateProductRegionsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeProductRegionAsync(request:DescribeProductRegionRequest,requestComplation:@escaping ExecuteResult<DescribeProductRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeProductRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegistryDetailAsync(request:DescribeRegistryDetailRequest,requestComplation:@escaping ExecuteResult<DescribeRegistryDetailResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeRegistryDetailExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceClustersAsync(request:DescribeTraceClustersRequest,requestComplation:@escaping ExecuteResult<DescribeTraceClustersResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeTraceClustersExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteProductRegionAsync(request:DeleteProductRegionRequest,requestComplation:@escaping ExecuteResult<DeleteProductRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteProductRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRegistrySpecAsync(request:CreateRegistrySpecRequest,requestComplation:@escaping ExecuteResult<CreateRegistrySpecResult>) throws {
        jdsfadminJDCloudClient = self
        try CreateRegistrySpecExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteRegionAsync(request:DeleteRegionRequest,requestComplation:@escaping ExecuteResult<DeleteRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTraceClusterAsync(request:DeleteTraceClusterRequest,requestComplation:@escaping ExecuteResult<DeleteTraceClusterResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteTraceClusterExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSettingsAsync(request:DescribeSettingsRequest,requestComplation:@escaping ExecuteResult<DescribeSettingsResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeSettingsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteRegistrySpecAsync(request:DeleteRegistrySpecRequest,requestComplation:@escaping ExecuteResult<DeleteRegistrySpecResult>) throws {
        jdsfadminJDCloudClient = self
        try DeleteRegistrySpecExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func descriptionRegistriesAsync(request:DescriptionRegistriesRequest,requestComplation:@escaping ExecuteResult<DescriptionRegistriesResult>) throws {
        jdsfadminJDCloudClient = self
        try DescriptionRegistriesExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeSettingAsync(request:DescribeSettingRequest,requestComplation:@escaping ExecuteResult<DescribeSettingResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeSettingExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegionStatusAsync(request:DescribeRegionStatusRequest,requestComplation:@escaping ExecuteResult<DescribeRegionStatusResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeRegionStatusExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateSettingsAsync(request:UpdateSettingsRequest,requestComplation:@escaping ExecuteResult<UpdateSettingsResult>) throws {
        jdsfadminJDCloudClient = self
        try UpdateSettingsExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceConfigAsync(request:DescribeTraceConfigRequest,requestComplation:@escaping ExecuteResult<DescribeTraceConfigResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeTraceConfigExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegionAsync(request:DescribeRegionRequest,requestComplation:@escaping ExecuteResult<DescribeRegionResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeRegionExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeProductLinesAsync(request:DescribeProductLinesRequest,requestComplation:@escaping ExecuteResult<DescribeProductLinesResult>) throws {
        jdsfadminJDCloudClient = self
        try DescribeProductLinesExecutor(jdCloudClient: jdsfadminJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension JdsfadminJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jdsfadmin.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "jdsfadmin.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
