/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云负载均衡
   负载均衡相关API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class LbJDCloudClient :JDCloudClient{
    
    private final var lbJDCloudClient:LbJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "lb" + "v1"
    
    public let serviceName: String = "lb"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeListernersAsync(request:DescribeListernersRequest,requestComplation:@escaping ExecuteResult<DescribeListernersResult>) throws {
        lbJDCloudClient = self
        try DescribeListernersExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBackendAsync(request:DescribeBackendRequest,requestComplation:@escaping ExecuteResult<DescribeBackendResult>) throws {
        lbJDCloudClient = self
        try DescribeBackendExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func registerTargetsAsync(request:RegisterTargetsRequest,requestComplation:@escaping ExecuteResult<RegisterTargetsResult>) throws {
        lbJDCloudClient = self
        try RegisterTargetsExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeLoadBalancersAsync(request:DescribeLoadBalancersRequest,requestComplation:@escaping ExecuteResult<DescribeLoadBalancersResult>) throws {
        lbJDCloudClient = self
        try DescribeLoadBalancersExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateTargetsAsync(request:UpdateTargetsRequest,requestComplation:@escaping ExecuteResult<UpdateTargetsResult>) throws {
        lbJDCloudClient = self
        try UpdateTargetsExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateLoadBalancerAsync(request:UpdateLoadBalancerRequest,requestComplation:@escaping ExecuteResult<UpdateLoadBalancerResult>) throws {
        lbJDCloudClient = self
        try UpdateLoadBalancerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTargetGroupAsync(request:DescribeTargetGroupRequest,requestComplation:@escaping ExecuteResult<DescribeTargetGroupResult>) throws {
        lbJDCloudClient = self
        try DescribeTargetGroupExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addRulesAsync(request:AddRulesRequest,requestComplation:@escaping ExecuteResult<AddRulesResult>) throws {
        lbJDCloudClient = self
        try AddRulesExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteBackendAsync(request:DeleteBackendRequest,requestComplation:@escaping ExecuteResult<DeleteBackendResult>) throws {
        lbJDCloudClient = self
        try DeleteBackendExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeListernerAsync(request:DescribeListernerRequest,requestComplation:@escaping ExecuteResult<DescribeListernerResult>) throws {
        lbJDCloudClient = self
        try DescribeListernerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func associateElasticIpAsync(request:AssociateElasticIpRequest,requestComplation:@escaping ExecuteResult<AssociateElasticIpResult>) throws {
        lbJDCloudClient = self
        try AssociateElasticIpExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateBackendAsync(request:UpdateBackendRequest,requestComplation:@escaping ExecuteResult<UpdateBackendResult>) throws {
        lbJDCloudClient = self
        try UpdateBackendExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createBackendAsync(request:CreateBackendRequest,requestComplation:@escaping ExecuteResult<CreateBackendResult>) throws {
        lbJDCloudClient = self
        try CreateBackendExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createTargetGroupAsync(request:CreateTargetGroupRequest,requestComplation:@escaping ExecuteResult<CreateTargetGroupResult>) throws {
        lbJDCloudClient = self
        try CreateTargetGroupExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateTargetGroupAsync(request:UpdateTargetGroupRequest,requestComplation:@escaping ExecuteResult<UpdateTargetGroupResult>) throws {
        lbJDCloudClient = self
        try UpdateTargetGroupExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeLoadBalancerAsync(request:DescribeLoadBalancerRequest,requestComplation:@escaping ExecuteResult<DescribeLoadBalancerResult>) throws {
        lbJDCloudClient = self
        try DescribeLoadBalancerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateListenerAsync(request:UpdateListenerRequest,requestComplation:@escaping ExecuteResult<UpdateListenerResult>) throws {
        lbJDCloudClient = self
        try UpdateListenerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRuleMapsAsync(request:DescribeRuleMapsRequest,requestComplation:@escaping ExecuteResult<DescribeRuleMapsResult>) throws {
        lbJDCloudClient = self
        try DescribeRuleMapsExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteRuleMapAsync(request:DeleteRuleMapRequest,requestComplation:@escaping ExecuteResult<DeleteRuleMapResult>) throws {
        lbJDCloudClient = self
        try DeleteRuleMapExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTargetGroupsAsync(request:DescribeTargetGroupsRequest,requestComplation:@escaping ExecuteResult<DescribeTargetGroupsResult>) throws {
        lbJDCloudClient = self
        try DescribeTargetGroupsExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteLoadBalancerAsync(request:DeleteLoadBalancerRequest,requestComplation:@escaping ExecuteResult<DeleteLoadBalancerResult>) throws {
        lbJDCloudClient = self
        try DeleteLoadBalancerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disassociateSecurityGroupAsync(request:DisassociateSecurityGroupRequest,requestComplation:@escaping ExecuteResult<DisassociateSecurityGroupResult>) throws {
        lbJDCloudClient = self
        try DisassociateSecurityGroupExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeBackendsAsync(request:DescribeBackendsRequest,requestComplation:@escaping ExecuteResult<DescribeBackendsResult>) throws {
        lbJDCloudClient = self
        try DescribeBackendsExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRuleMapAsync(request:DescribeRuleMapRequest,requestComplation:@escaping ExecuteResult<DescribeRuleMapResult>) throws {
        lbJDCloudClient = self
        try DescribeRuleMapExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deRegisterTargetsAsync(request:DeRegisterTargetsRequest,requestComplation:@escaping ExecuteResult<DeRegisterTargetsResult>) throws {
        lbJDCloudClient = self
        try DeRegisterTargetsExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func associateSecurityGroupAsync(request:AssociateSecurityGroupRequest,requestComplation:@escaping ExecuteResult<AssociateSecurityGroupResult>) throws {
        lbJDCloudClient = self
        try AssociateSecurityGroupExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createLoadBalancerAsync(request:CreateLoadBalancerRequest,requestComplation:@escaping ExecuteResult<CreateLoadBalancerResult>) throws {
        lbJDCloudClient = self
        try CreateLoadBalancerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createListenerAsync(request:CreateListenerRequest,requestComplation:@escaping ExecuteResult<CreateListenerResult>) throws {
        lbJDCloudClient = self
        try CreateListenerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyQuotaAsync(request:ModifyQuotaRequest,requestComplation:@escaping ExecuteResult<ModifyQuotaResult>) throws {
        lbJDCloudClient = self
        try ModifyQuotaExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTargetGroupAsync(request:DeleteTargetGroupRequest,requestComplation:@escaping ExecuteResult<DeleteTargetGroupResult>) throws {
        lbJDCloudClient = self
        try DeleteTargetGroupExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeQuotaAsync(request:DescribeQuotaRequest,requestComplation:@escaping ExecuteResult<DescribeQuotaResult>) throws {
        lbJDCloudClient = self
        try DescribeQuotaExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTargetHealthAsync(request:DescribeTargetHealthRequest,requestComplation:@escaping ExecuteResult<DescribeTargetHealthResult>) throws {
        lbJDCloudClient = self
        try DescribeTargetHealthExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func removeRulesAsync(request:RemoveRulesRequest,requestComplation:@escaping ExecuteResult<RemoveRulesResult>) throws {
        lbJDCloudClient = self
        try RemoveRulesExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRuleMapAsync(request:CreateRuleMapRequest,requestComplation:@escaping ExecuteResult<CreateRuleMapResult>) throws {
        lbJDCloudClient = self
        try CreateRuleMapExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disassociateElasticIpAsync(request:DisassociateElasticIpRequest,requestComplation:@escaping ExecuteResult<DisassociateElasticIpResult>) throws {
        lbJDCloudClient = self
        try DisassociateElasticIpExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateRulesAsync(request:UpdateRulesRequest,requestComplation:@escaping ExecuteResult<UpdateRulesResult>) throws {
        lbJDCloudClient = self
        try UpdateRulesExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateRuleMapAsync(request:UpdateRuleMapRequest,requestComplation:@escaping ExecuteResult<UpdateRuleMapResult>) throws {
        lbJDCloudClient = self
        try UpdateRuleMapExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteListenerAsync(request:DeleteListenerRequest,requestComplation:@escaping ExecuteResult<DeleteListenerResult>) throws {
        lbJDCloudClient = self
        try DeleteListenerExecutor(jdCloudClient: lbJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension LbJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "lb.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "lb.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
