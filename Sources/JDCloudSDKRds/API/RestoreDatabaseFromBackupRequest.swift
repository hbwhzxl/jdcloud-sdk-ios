/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   数据库管理
   数据库管理相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  从备份中恢复单个数据库，支持从其他实例（但必须是同一个账号下的实例）备份中恢复。例如可以从生产环境的数据库实例的备份恢复到测试环境的数据库中。&lt;br&gt;- 仅支持SQL Server
@objc(RestoreDatabaseFromBackupRequest)
public class RestoreDatabaseFromBackupRequest:JdCloudRequest
{
    /// 备份ID，可从备份查询接口describeBackups获取
    var backupId:String

    /// 指定该备份中用于恢复数据库的文件名称。通常情况下文件名（不包括后缀）即为备份的数据库名。例如文件名为my_test_db.bak，表示该文件是my_test_db数据库的备份
    var backupFileName:String

    /// RDS 实例ID，唯一标识一个RDS实例
    var instanceId:String

    /// 库名称
    var dbName:String


    public init(regionId: String,backupId:String,backupFileName:String,instanceId:String,dbName:String){
        self.backupId = backupId
        self.backupFileName = backupFileName
        self.instanceId = instanceId
        self.dbName = dbName
        super.init(regionId: regionId)
    }


    enum RestoreDatabaseFromBackupRequestRequestCodingKeys: String, CodingKey {
        case backupId
        case backupFileName
        case instanceId
        case dbName
    }

    public override func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: RestoreDatabaseFromBackupRequestRequestCodingKeys.self)
        try encoderContainer.encode(backupId, forKey: .backupId)
        try encoderContainer.encode(backupFileName, forKey: .backupFileName)
        try encoderContainer.encode(instanceId, forKey: .instanceId)
        try encoderContainer.encode(dbName, forKey: .dbName)

    }
}
