/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Route
   提供Route转发规则的配置

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  修改Route
public class UpdateRouteRequest:JdCloudRequest
{
    /// 转发规则ID
    var id:Int

    /// 转发规则名称
    var name:String

    /// 网关域名或地址
    var host:String?

    /// 业务线名称
    var serviceName:String

    /// 请求路径
    var uris:String

    /// 后端地址
    var upstreamUrl:String

    /// 是否开启后端签名
    var backendSign:Bool


    public init(regionId: String,id:Int,name:String,serviceName:String,uris:String,upstreamUrl:String,backendSign:Bool){
        self.id = id
        self.name = name
        self.serviceName = serviceName
        self.uris = uris
        self.upstreamUrl = upstreamUrl
        self.backendSign = backendSign
        super.init(regionId: regionId)
    }


    enum UpdateRouteRequestRequestCodingKeys: String, CodingKey {
        case id
        case name
        case host
        case serviceName
        case uris
        case upstreamUrl
        case backendSign
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: UpdateRouteRequestRequestCodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(host, forKey: .host)
        try container.encode(serviceName, forKey: .serviceName)
        try container.encode(uris, forKey: .uris)
        try container.encode(upstreamUrl, forKey: .upstreamUrl)
        try container.encode(backendSign, forKey: .backendSign)

    }
}
