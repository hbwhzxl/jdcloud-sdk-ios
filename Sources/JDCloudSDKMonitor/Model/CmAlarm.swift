/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation

///  cmAlarm
@objc(CmAlarm)
public class CmAlarm:NSObject,Codable{
    /// 统计方法：平均值&#x3D;avg、最大值&#x3D;max、最小值&#x3D;min
    var calculation:String?
    /// ContactGroups
    var contactGroups:[String?]?
    /// ContactPersons
    var contactPersons:[String?]?
    /// CreateTime
    var createTime:String?
    /// 启用禁用 1启用，0禁用
    var enabled:Int64?
    /// 规则id
    var id:String?
    /// 监控项
    var metric:String?
    /// 规则id监控项名称
    var metricName:String?
    /// 命名空间
    var namespace:String?
    /// 命名空间id
    var namespaceUID:String?
    /// 通知周期 单位：小时
    var noticePeriod:Int64?
    /// NoticeTime
    var noticeTime:String?
    /// 对象
    var obj:String?
    /// 对象id
    var objUID:String?
    /// &gt;&#x3D;、&gt;、&lt;、&lt;&#x3D;、&#x3D;、！&#x3D;
    var operation:String?
    /// 统计周期（单位：分钟）
    var period:Int64?
    /// 地域信息
    var region:String?
    /// 此规则所应用的资源id
    var resourceId:String?
    /// root rule id
    var rootRuleId:Int64?
    /// rule id
    var ruleId:Int64?
    /// 报警规则对应的产品
    var serviceCode:String?
    /// 监控项状态:1正常，2告警，4数据不足
    var status:Int64?
    /// 监控项附属信息
    var tag:String?
    /// 阈值
    var threshold:Double?
    /// 连续多少次后报警
    var times:Int64?
    /// 报警值
    var value:Double?



    public override init(){
            super.init()
    }

    enum CmAlarmCodingKeys: String, CodingKey {
        case calculation
        case contactGroups
        case contactPersons
        case createTime
        case enabled
        case id
        case metric
        case metricName
        case namespace
        case namespaceUID
        case noticePeriod
        case noticeTime
        case obj
        case objUID
        case operation
        case period
        case region
        case resourceId
        case rootRuleId
        case ruleId
        case serviceCode
        case status
        case tag
        case threshold
        case times
        case value
    }


    required public init(from decoder: Decoder) throws {
        let decoderContainer = try decoder.container(keyedBy: CmAlarmCodingKeys.self)
        self.calculation = try decoderContainer.decode(String?.self, forKey: .calculation)
        self.contactGroups = try decoderContainer.decode([String?]?.self, forKey: .contactGroups)
        self.contactPersons = try decoderContainer.decode([String?]?.self, forKey: .contactPersons)
        self.createTime = try decoderContainer.decode(String?.self, forKey: .createTime)
        self.enabled = try decoderContainer.decode(Int64?.self, forKey: .enabled)
        self.id = try decoderContainer.decode(String?.self, forKey: .id)
        self.metric = try decoderContainer.decode(String?.self, forKey: .metric)
        self.metricName = try decoderContainer.decode(String?.self, forKey: .metricName)
        self.namespace = try decoderContainer.decode(String?.self, forKey: .namespace)
        self.namespaceUID = try decoderContainer.decode(String?.self, forKey: .namespaceUID)
        self.noticePeriod = try decoderContainer.decode(Int64?.self, forKey: .noticePeriod)
        self.noticeTime = try decoderContainer.decode(String?.self, forKey: .noticeTime)
        self.obj = try decoderContainer.decode(String?.self, forKey: .obj)
        self.objUID = try decoderContainer.decode(String?.self, forKey: .objUID)
        self.operation = try decoderContainer.decode(String?.self, forKey: .operation)
        self.period = try decoderContainer.decode(Int64?.self, forKey: .period)
        self.region = try decoderContainer.decode(String?.self, forKey: .region)
        self.resourceId = try decoderContainer.decode(String?.self, forKey: .resourceId)
        self.rootRuleId = try decoderContainer.decode(Int64?.self, forKey: .rootRuleId)
        self.ruleId = try decoderContainer.decode(Int64?.self, forKey: .ruleId)
        self.serviceCode = try decoderContainer.decode(String?.self, forKey: .serviceCode)
        self.status = try decoderContainer.decode(Int64?.self, forKey: .status)
        self.tag = try decoderContainer.decode(String?.self, forKey: .tag)
        self.threshold = try decoderContainer.decode(Double?.self, forKey: .threshold)
        self.times = try decoderContainer.decode(Int64?.self, forKey: .times)
        self.value = try decoderContainer.decode(Double?.self, forKey: .value)
    }
}
public extension CmAlarm{
    public func encode(to encoder: Encoder) throws {
        var encoderContainer = encoder.container(keyedBy: CmAlarmCodingKeys.self)
         try encoderContainer.encode(calculation, forKey: .calculation)
         try encoderContainer.encode(contactGroups, forKey: .contactGroups)
         try encoderContainer.encode(contactPersons, forKey: .contactPersons)
         try encoderContainer.encode(createTime, forKey: .createTime)
         try encoderContainer.encode(enabled, forKey: .enabled)
         try encoderContainer.encode(id, forKey: .id)
         try encoderContainer.encode(metric, forKey: .metric)
         try encoderContainer.encode(metricName, forKey: .metricName)
         try encoderContainer.encode(namespace, forKey: .namespace)
         try encoderContainer.encode(namespaceUID, forKey: .namespaceUID)
         try encoderContainer.encode(noticePeriod, forKey: .noticePeriod)
         try encoderContainer.encode(noticeTime, forKey: .noticeTime)
         try encoderContainer.encode(obj, forKey: .obj)
         try encoderContainer.encode(objUID, forKey: .objUID)
         try encoderContainer.encode(operation, forKey: .operation)
         try encoderContainer.encode(period, forKey: .period)
         try encoderContainer.encode(region, forKey: .region)
         try encoderContainer.encode(resourceId, forKey: .resourceId)
         try encoderContainer.encode(rootRuleId, forKey: .rootRuleId)
         try encoderContainer.encode(ruleId, forKey: .ruleId)
         try encoderContainer.encode(serviceCode, forKey: .serviceCode)
         try encoderContainer.encode(status, forKey: .status)
         try encoderContainer.encode(tag, forKey: .tag)
         try encoderContainer.encode(threshold, forKey: .threshold)
         try encoderContainer.encode(times, forKey: .times)
         try encoderContainer.encode(value, forKey: .value)
    }
}
