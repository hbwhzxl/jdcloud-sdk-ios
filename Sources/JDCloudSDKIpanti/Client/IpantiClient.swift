/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云IP高防相关接口
   京东云IP高防相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class IpantiJDCloudClient :JDCloudClient{
    
    private final var ipantiJDCloudClient:IpantiJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ipanti" + "v1"
    
    public let serviceName: String = "ipanti"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeAlarmConfigAsync(request:DescribeAlarmConfigRequest,requestComplation:@escaping ExecuteResult<DescribeAlarmConfigResult>) throws {
        ipantiJDCloudClient = self
        try DescribeAlarmConfigExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyEPBAsync(request:ModifyEPBRequest,requestComplation:@escaping ExecuteResult<ModifyEPBResult>) throws {
        ipantiJDCloudClient = self
        try ModifyEPBExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableInstanceIpWhiteListAsync(request:EnableInstanceIpWhiteListRequest,requestComplation:@escaping ExecuteResult<EnableInstanceIpWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try EnableInstanceIpWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyWebRuleAsync(request:ModifyWebRuleRequest,requestComplation:@escaping ExecuteResult<ModifyWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func downloadCcAttackLogDetailsAsync(request:DownloadCcAttackLogDetailsRequest,requestComplation:@escaping ExecuteResult<DownloadCcAttackLogDetailsResult>) throws {
        ipantiJDCloudClient = self
        try DownloadCcAttackLogDetailsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableCcObserverModeAsync(request:EnableCcObserverModeRequest,requestComplation:@escaping ExecuteResult<EnableCcObserverModeResult>) throws {
        ipantiJDCloudClient = self
        try EnableCcObserverModeExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteForwardRuleAsync(request:DeleteForwardRuleRequest,requestComplation:@escaping ExecuteResult<DeleteForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func switchWebRuleProtectAsync(request:SwitchWebRuleProtectRequest,requestComplation:@escaping ExecuteResult<SwitchWebRuleProtectResult>) throws {
        ipantiJDCloudClient = self
        try SwitchWebRuleProtectExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstancesAsync(request:DescribeInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeInstancesResult>) throws {
        ipantiJDCloudClient = self
        try DescribeInstancesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceIpBlackListAsync(request:ModifyInstanceIpBlackListRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceIpBlackListResult>) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceIpBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createInstanceAsync(request:CreateInstanceRequest,requestComplation:@escaping ExecuteResult<CreateInstanceResult>) throws {
        ipantiJDCloudClient = self
        try CreateInstanceExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func ddosGraphAsync(request:DdosGraphRequest,requestComplation:@escaping ExecuteResult<DdosGraphResult>) throws {
        ipantiJDCloudClient = self
        try DdosGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func switchForwardRuleOriginAsync(request:SwitchForwardRuleOriginRequest,requestComplation:@escaping ExecuteResult<SwitchForwardRuleOriginResult>) throws {
        ipantiJDCloudClient = self
        try SwitchForwardRuleOriginExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAttackTypeCountAsync(request:DescribeAttackTypeCountRequest,requestComplation:@escaping ExecuteResult<DescribeAttackTypeCountResult>) throws {
        ipantiJDCloudClient = self
        try DescribeAttackTypeCountExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableWebRuleCCAsync(request:EnableWebRuleCCRequest,requestComplation:@escaping ExecuteResult<EnableWebRuleCCResult>) throws {
        ipantiJDCloudClient = self
        try EnableWebRuleCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCCDefaultThresholdsAsync(request:DescribeCCDefaultThresholdsRequest,requestComplation:@escaping ExecuteResult<DescribeCCDefaultThresholdsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCCDefaultThresholdsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceCCAsync(request:ModifyInstanceCCRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceCCResult>) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyForwardRuleAsync(request:ModifyForwardRuleRequest,requestComplation:@escaping ExecuteResult<ModifyForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try ModifyForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeNameListAsync(request:DescribeNameListRequest,requestComplation:@escaping ExecuteResult<DescribeNameListResult>) throws {
        ipantiJDCloudClient = self
        try DescribeNameListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWebRulesAsync(request:DescribeWebRulesRequest,requestComplation:@escaping ExecuteResult<DescribeWebRulesResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRulesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeForwardRulesAsync(request:DescribeForwardRulesRequest,requestComplation:@escaping ExecuteResult<DescribeForwardRulesResult>) throws {
        ipantiJDCloudClient = self
        try DescribeForwardRulesExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func fwdGraphAsync(request:FwdGraphRequest,requestComplation:@escaping ExecuteResult<FwdGraphResult>) throws {
        ipantiJDCloudClient = self
        try FwdGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func ccGraphAsync(request:CcGraphRequest,requestComplation:@escaping ExecuteResult<CcGraphResult>) throws {
        ipantiJDCloudClient = self
        try CcGraphExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableInstanceIpBlackListAsync(request:DisableInstanceIpBlackListRequest,requestComplation:@escaping ExecuteResult<DisableInstanceIpBlackListResult>) throws {
        ipantiJDCloudClient = self
        try DisableInstanceIpBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeProtectionStatisticsAsync(request:DescribeProtectionStatisticsRequest,requestComplation:@escaping ExecuteResult<DescribeProtectionStatisticsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeProtectionStatisticsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyCertInfoAsync(request:ModifyCertInfoRequest,requestComplation:@escaping ExecuteResult<ModifyCertInfoResult>) throws {
        ipantiJDCloudClient = self
        try ModifyCertInfoExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableInstanceUrlWhiteListAsync(request:DisableInstanceUrlWhiteListRequest,requestComplation:@escaping ExecuteResult<DisableInstanceUrlWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try DisableInstanceUrlWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceUrlWhiteListAsync(request:ModifyInstanceUrlWhiteListRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceUrlWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceUrlWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyAlarmConfigAsync(request:ModifyAlarmConfigRequest,requestComplation:@escaping ExecuteResult<ModifyAlarmConfigResult>) throws {
        ipantiJDCloudClient = self
        try ModifyAlarmConfigExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceIpWhiteListAsync(request:ModifyInstanceIpWhiteListRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceIpWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceIpWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCertInfoAsync(request:DescribeCertInfoRequest,requestComplation:@escaping ExecuteResult<DescribeCertInfoResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCertInfoExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func switchForwardRuleProtectAsync(request:SwitchForwardRuleProtectRequest,requestComplation:@escaping ExecuteResult<SwitchForwardRuleProtectResult>) throws {
        ipantiJDCloudClient = self
        try SwitchForwardRuleProtectExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func downloadCcAttackLogsAsync(request:DownloadCcAttackLogsRequest,requestComplation:@escaping ExecuteResult<DownloadCcAttackLogsResult>) throws {
        ipantiJDCloudClient = self
        try DownloadCcAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableInstanceUrlWhiteListAsync(request:EnableInstanceUrlWhiteListRequest,requestComplation:@escaping ExecuteResult<EnableInstanceUrlWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try EnableInstanceUrlWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func switchWebRuleOriginAsync(request:SwitchWebRuleOriginRequest,requestComplation:@escaping ExecuteResult<SwitchWebRuleOriginResult>) throws {
        ipantiJDCloudClient = self
        try SwitchWebRuleOriginExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableInstanceCCAsync(request:DisableInstanceCCRequest,requestComplation:@escaping ExecuteResult<DisableInstanceCCResult>) throws {
        ipantiJDCloudClient = self
        try DisableInstanceCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCcAttackLogDetailsAsync(request:DescribeCcAttackLogDetailsRequest,requestComplation:@escaping ExecuteResult<DescribeCcAttackLogDetailsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCcAttackLogDetailsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAttackStatisticsAsync(request:DescribeAttackStatisticsRequest,requestComplation:@escaping ExecuteResult<DescribeAttackStatisticsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeAttackStatisticsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableCcIpLimitAsync(request:EnableCcIpLimitRequest,requestComplation:@escaping ExecuteResult<EnableCcIpLimitResult>) throws {
        ipantiJDCloudClient = self
        try EnableCcIpLimitExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableCcObserverModeAsync(request:DisableCcObserverModeRequest,requestComplation:@escaping ExecuteResult<DisableCcObserverModeResult>) throws {
        ipantiJDCloudClient = self
        try DisableCcObserverModeExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableCcIpLimitAsync(request:DisableCcIpLimitRequest,requestComplation:@escaping ExecuteResult<DisableCcIpLimitResult>) throws {
        ipantiJDCloudClient = self
        try DisableCcIpLimitExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableInstanceIpBlackListAsync(request:EnableInstanceIpBlackListRequest,requestComplation:@escaping ExecuteResult<EnableInstanceIpBlackListResult>) throws {
        ipantiJDCloudClient = self
        try EnableInstanceIpBlackListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createWebRuleAsync(request:CreateWebRuleRequest,requestComplation:@escaping ExecuteResult<CreateWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableInstanceIpWhiteListAsync(request:DisableInstanceIpWhiteListRequest,requestComplation:@escaping ExecuteResult<DisableInstanceIpWhiteListResult>) throws {
        ipantiJDCloudClient = self
        try DisableInstanceIpWhiteListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeCcAttackLogsAsync(request:DescribeCcAttackLogsRequest,requestComplation:@escaping ExecuteResult<DescribeCcAttackLogsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeCcAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func downloadDDosAttackLogsAsync(request:DownloadDDosAttackLogsRequest,requestComplation:@escaping ExecuteResult<DownloadDDosAttackLogsResult>) throws {
        ipantiJDCloudClient = self
        try DownloadDDosAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func disableWebRuleCCAsync(request:DisableWebRuleCCRequest,requestComplation:@escaping ExecuteResult<DisableWebRuleCCResult>) throws {
        ipantiJDCloudClient = self
        try DisableWebRuleCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkNameAsync(request:CheckNameRequest,requestComplation:@escaping ExecuteResult<CheckNameResult>) throws {
        ipantiJDCloudClient = self
        try CheckNameExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func enableInstanceCCAsync(request:EnableInstanceCCRequest,requestComplation:@escaping ExecuteResult<EnableInstanceCCResult>) throws {
        ipantiJDCloudClient = self
        try EnableInstanceCCExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeWebRuleAsync(request:DescribeWebRuleRequest,requestComplation:@escaping ExecuteResult<DescribeWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createForwardRuleAsync(request:CreateForwardRuleRequest,requestComplation:@escaping ExecuteResult<CreateForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try CreateForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeVpcIpListAsync(request:DescribeVpcIpListRequest,requestComplation:@escaping ExecuteResult<DescribeVpcIpListResult>) throws {
        ipantiJDCloudClient = self
        try DescribeVpcIpListExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteWebRuleAsync(request:DeleteWebRuleRequest,requestComplation:@escaping ExecuteResult<DeleteWebRuleResult>) throws {
        ipantiJDCloudClient = self
        try DeleteWebRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setCcIpLimitAsync(request:SetCcIpLimitRequest,requestComplation:@escaping ExecuteResult<SetCcIpLimitResult>) throws {
        ipantiJDCloudClient = self
        try SetCcIpLimitExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyInstanceNameAsync(request:ModifyInstanceNameRequest,requestComplation:@escaping ExecuteResult<ModifyInstanceNameResult>) throws {
        ipantiJDCloudClient = self
        try ModifyInstanceNameExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeForwardRuleAsync(request:DescribeForwardRuleRequest,requestComplation:@escaping ExecuteResult<DescribeForwardRuleResult>) throws {
        ipantiJDCloudClient = self
        try DescribeForwardRuleExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeDDosAttackLogsAsync(request:DescribeDDosAttackLogsRequest,requestComplation:@escaping ExecuteResult<DescribeDDosAttackLogsResult>) throws {
        ipantiJDCloudClient = self
        try DescribeDDosAttackLogsExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeInstanceAsync(request:DescribeInstanceRequest,requestComplation:@escaping ExecuteResult<DescribeInstanceResult>) throws {
        ipantiJDCloudClient = self
        try DescribeInstanceExecutor(jdCloudClient: ipantiJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension IpantiJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ipanti.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "ipanti.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
