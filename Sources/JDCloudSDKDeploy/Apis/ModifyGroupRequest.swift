/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云部署
   与部署组相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  modifyGroupRequest
public class ModifyGroupRequest:JdCloudRequest
{
    /// 描述
    var desc:String?

    /// 部署配置:1oneAtTime,2haltAtTime,3allAtOnce
    var deploy_config:Int?

    /// 部署实例（滚动），多个”,”分隔
    var instances:String?

    /// 部署实例（蓝），多个”,”分隔
    var buleInstances:String?

    /// 部署实例（绿），多个”,”分隔
    var greenInstances:String?

    /// 负载均衡：1启动，2禁用
    var lbStatus:Int?

    /// lb实例
    var lbInstances:String?

    /// lb lb_backend
    var lbBackend:String?

    /// 同名文件处理方式：1部署失败，2覆盖，3保留
    var repeatPolicy:Int?

    /// 通知频率：1异常发送，2每次发送
    var noticeTrigger:Int?

    /// 通知方式：1消息，2邮件，3短信
    var noticeMethod:Int?

    /// 自动回滚：1开启，2禁用
    var rollback:Int?

    /// Group Id
    var groupId:String


    public init(regionId: String,groupId:String){
        self.groupId = groupId
        super.init(regionId: regionId)
    }


    enum ModifyGroupRequestRequestCodingKeys: String, CodingKey {
        case desc
        case deploy_config
        case instances
        case buleInstances
        case greenInstances
        case lbStatus
        case lbInstances
        case lbBackend
        case repeatPolicy
        case noticeTrigger
        case noticeMethod
        case rollback
        case groupId
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: ModifyGroupRequestRequestCodingKeys.self)
        try container.encode(desc, forKey: .desc)
        try container.encode(deploy_config, forKey: .deploy_config)
        try container.encode(instances, forKey: .instances)
        try container.encode(buleInstances, forKey: .buleInstances)
        try container.encode(greenInstances, forKey: .greenInstances)
        try container.encode(lbStatus, forKey: .lbStatus)
        try container.encode(lbInstances, forKey: .lbInstances)
        try container.encode(lbBackend, forKey: .lbBackend)
        try container.encode(repeatPolicy, forKey: .repeatPolicy)
        try container.encode(noticeTrigger, forKey: .noticeTrigger)
        try container.encode(noticeMethod, forKey: .noticeMethod)
        try container.encode(rollback, forKey: .rollback)
        try container.encode(groupId, forKey: .groupId)

    }
}
