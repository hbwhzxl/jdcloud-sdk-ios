/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD CMS instance API
   API related to VM instances

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class CmsJDCloudClient :JDCloudClient{
    
    private final var cmsJDCloudClient:CmsJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "cms" + "v1"
    
    public let serviceName: String = "cms"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func partnerListByLevelNameAsync(request:PartnerListByLevelNameRequest,requestComplation:@escaping ExecuteResult<PartnerListByLevelNameResult>) throws {
        cmsJDCloudClient = self
        try PartnerListByLevelNameExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func classicCaseAsync(request:ClassicCaseRequest,requestComplation:@escaping ExecuteResult<ClassicCaseResult>) throws {
        cmsJDCloudClient = self
        try ClassicCaseExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func partnerListAsync(request:PartnerListRequest,requestComplation:@escaping ExecuteResult<PartnerListResult>) throws {
        cmsJDCloudClient = self
        try PartnerListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func catalogByPathAsync(request:CatalogByPathRequest,requestComplation:@escaping ExecuteResult<CatalogByPathResult>) throws {
        cmsJDCloudClient = self
        try CatalogByPathExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func navigationByNameAsync(request:NavigationByNameRequest,requestComplation:@escaping ExecuteResult<NavigationByNameResult>) throws {
        cmsJDCloudClient = self
        try NavigationByNameExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func channelAgentTypeAsync(request:ChannelAgentTypeRequest,requestComplation:@escaping ExecuteResult<ChannelAgentTypeResult>) throws {
        cmsJDCloudClient = self
        try ChannelAgentTypeExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func floorListAsync(request:FloorListRequest,requestComplation:@escaping ExecuteResult<FloorListResult>) throws {
        cmsJDCloudClient = self
        try FloorListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func contentByCatalogIdAsync(request:ContentByCatalogIdRequest,requestComplation:@escaping ExecuteResult<ContentByCatalogIdResult>) throws {
        cmsJDCloudClient = self
        try ContentByCatalogIdExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func navigationExtAsync(request:NavigationExtRequest,requestComplation:@escaping ExecuteResult<NavigationExtResult>) throws {
        cmsJDCloudClient = self
        try NavigationExtExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func contentByIdAsync(request:ContentByIdRequest,requestComplation:@escaping ExecuteResult<ContentByIdResult>) throws {
        cmsJDCloudClient = self
        try ContentByIdExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func productTypeListAsync(request:ProductTypeListRequest,requestComplation:@escaping ExecuteResult<ProductTypeListResult>) throws {
        cmsJDCloudClient = self
        try ProductTypeListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func customerCaseAsync(request:CustomerCaseRequest,requestComplation:@escaping ExecuteResult<CustomerCaseResult>) throws {
        cmsJDCloudClient = self
        try CustomerCaseExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func customerCaseDetailAsync(request:CustomerCaseDetailRequest,requestComplation:@escaping ExecuteResult<CustomerCaseDetailResult>) throws {
        cmsJDCloudClient = self
        try CustomerCaseDetailExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func productByPathAsync(request:ProductByPathRequest,requestComplation:@escaping ExecuteResult<ProductByPathResult>) throws {
        cmsJDCloudClient = self
        try ProductByPathExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func bannerListAsync(request:BannerListRequest,requestComplation:@escaping ExecuteResult<BannerListResult>) throws {
        cmsJDCloudClient = self
        try BannerListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func partnerLevelListAsync(request:PartnerLevelListRequest,requestComplation:@escaping ExecuteResult<PartnerLevelListResult>) throws {
        cmsJDCloudClient = self
        try PartnerLevelListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func partnerTypeListAsync(request:PartnerTypeListRequest,requestComplation:@escaping ExecuteResult<PartnerTypeListResult>) throws {
        cmsJDCloudClient = self
        try PartnerTypeListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func newsDetailAsync(request:NewsDetailRequest,requestComplation:@escaping ExecuteResult<NewsDetailResult>) throws {
        cmsJDCloudClient = self
        try NewsDetailExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func contentByPathAsync(request:ContentByPathRequest,requestComplation:@escaping ExecuteResult<ContentByPathResult>) throws {
        cmsJDCloudClient = self
        try ContentByPathExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func newsListAsync(request:NewsListRequest,requestComplation:@escaping ExecuteResult<NewsListResult>) throws {
        cmsJDCloudClient = self
        try NewsListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func productListAsync(request:ProductListRequest,requestComplation:@escaping ExecuteResult<ProductListResult>) throws {
        cmsJDCloudClient = self
        try ProductListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func catalogByNameAsync(request:CatalogByNameRequest,requestComplation:@escaping ExecuteResult<CatalogByNameResult>) throws {
        cmsJDCloudClient = self
        try CatalogByNameExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func operationListAsync(request:OperationListRequest,requestComplation:@escaping ExecuteResult<OperationListResult>) throws {
        cmsJDCloudClient = self
        try OperationListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func dynamicProductListAsync(request:DynamicProductListRequest,requestComplation:@escaping ExecuteResult<DynamicProductListResult>) throws {
        cmsJDCloudClient = self
        try DynamicProductListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func navigationListAsync(request:NavigationListRequest,requestComplation:@escaping ExecuteResult<NavigationListResult>) throws {
        cmsJDCloudClient = self
        try NavigationListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func recommendListAsync(request:RecommendListRequest,requestComplation:@escaping ExecuteResult<RecommendListResult>) throws {
        cmsJDCloudClient = self
        try RecommendListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func linkListAsync(request:LinkListRequest,requestComplation:@escaping ExecuteResult<LinkListResult>) throws {
        cmsJDCloudClient = self
        try LinkListExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func productTypeListByTypeIdAsync(request:ProductTypeListByTypeIdRequest,requestComplation:@escaping ExecuteResult<ProductTypeListByTypeIdResult>) throws {
        cmsJDCloudClient = self
        try ProductTypeListByTypeIdExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getDDosAsync(request:GetDDosRequest,requestComplation:@escaping ExecuteResult<GetDDosResult>) throws {
        cmsJDCloudClient = self
        try GetDDosExecutor(jdCloudClient: cmsJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension CmsJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "cms.jcloudcs.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "cms.jcloudcs.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
