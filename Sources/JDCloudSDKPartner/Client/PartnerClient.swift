/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   JDCLOUD PARTNER API
   渠道管理平台API接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class PartnerJDCloudClient :JDCloudClient{
    
    private final var partnerJDCloudClient:PartnerJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "partner" + "v1"
    
    public let serviceName: String = "partner"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func exportMyCustomerListAsync(request:ExportMyCustomerListRequest,requestComplation:@escaping ExecuteResult<ExportMyCustomerListResult>) throws {
        partnerJDCloudClient = self
        try ExportMyCustomerListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func approveDistributorAsync(request:ApproveDistributorRequest,requestComplation:@escaping ExecuteResult<ApproveDistributorResult>) throws {
        partnerJDCloudClient = self
        try ApproveDistributorExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyCustomerAsync(request:ModifyCustomerRequest,requestComplation:@escaping ExecuteResult<ModifyCustomerResult>) throws {
        partnerJDCloudClient = self
        try ModifyCustomerExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportSubDistributorListAsync(request:ExportSubDistributorListRequest,requestComplation:@escaping ExecuteResult<ExportSubDistributorListResult>) throws {
        partnerJDCloudClient = self
        try ExportSubDistributorListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getDistributorListForErpAsync(request:GetDistributorListForErpRequest,requestComplation:@escaping ExecuteResult<GetDistributorListForErpResult>) throws {
        partnerJDCloudClient = self
        try GetDistributorListForErpExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addDistributorLevelTwoAsync(request:AddDistributorLevelTwoRequest,requestComplation:@escaping ExecuteResult<AddDistributorLevelTwoResult>) throws {
        partnerJDCloudClient = self
        try AddDistributorLevelTwoExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportDistributorListForErpAsync(request:ExportDistributorListForErpRequest,requestComplation:@escaping ExecuteResult<ExportDistributorListForErpResult>) throws {
        partnerJDCloudClient = self
        try ExportDistributorListForErpExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func validateDistributorAsync(request:ValidateDistributorRequest,requestComplation:@escaping ExecuteResult<ValidateDistributorResult>) throws {
        partnerJDCloudClient = self
        try ValidateDistributorExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryDepartmentListAsync(request:QueryDepartmentListRequest,requestComplation:@escaping ExecuteResult<QueryDepartmentListResult>) throws {
        partnerJDCloudClient = self
        try QueryDepartmentListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryCustomerDetailAsync(request:QueryCustomerDetailRequest,requestComplation:@escaping ExecuteResult<QueryCustomerDetailResult>) throws {
        partnerJDCloudClient = self
        try QueryCustomerDetailExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyTwoLevelDistributorInfoAsync(request:ModifyTwoLevelDistributorInfoRequest,requestComplation:@escaping ExecuteResult<ModifyTwoLevelDistributorInfoResult>) throws {
        partnerJDCloudClient = self
        try ModifyTwoLevelDistributorInfoExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func querySubCustomerListAsync(request:QuerySubCustomerListRequest,requestComplation:@escaping ExecuteResult<QuerySubCustomerListResult>) throws {
        partnerJDCloudClient = self
        try QuerySubCustomerListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportSubCustomerListAsync(request:ExportSubCustomerListRequest,requestComplation:@escaping ExecuteResult<ExportSubCustomerListResult>) throws {
        partnerJDCloudClient = self
        try ExportSubCustomerListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryDistributorInfoAsync(request:QueryDistributorInfoRequest,requestComplation:@escaping ExecuteResult<QueryDistributorInfoResult>) throws {
        partnerJDCloudClient = self
        try QueryDistributorInfoExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addCustomerAsync(request:AddCustomerRequest,requestComplation:@escaping ExecuteResult<AddCustomerResult>) throws {
        partnerJDCloudClient = self
        try AddCustomerExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryCustomerListAsync(request:QueryCustomerListRequest,requestComplation:@escaping ExecuteResult<QueryCustomerListResult>) throws {
        partnerJDCloudClient = self
        try QueryCustomerListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func exportCustomerListAsync(request:ExportCustomerListRequest,requestComplation:@escaping ExecuteResult<ExportCustomerListResult>) throws {
        partnerJDCloudClient = self
        try ExportCustomerListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func queryMyCustomerListAsync(request:QueryMyCustomerListRequest,requestComplation:@escaping ExecuteResult<QueryMyCustomerListResult>) throws {
        partnerJDCloudClient = self
        try QueryMyCustomerListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func addDistributorLevelOneAsync(request:AddDistributorLevelOneRequest,requestComplation:@escaping ExecuteResult<AddDistributorLevelOneResult>) throws {
        partnerJDCloudClient = self
        try AddDistributorLevelOneExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getDistributorCheckingListForErpAsync(request:GetDistributorCheckingListForErpRequest,requestComplation:@escaping ExecuteResult<GetDistributorCheckingListForErpResult>) throws {
        partnerJDCloudClient = self
        try GetDistributorCheckingListForErpExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getSubDistributorListAsync(request:GetSubDistributorListRequest,requestComplation:@escaping ExecuteResult<GetSubDistributorListResult>) throws {
        partnerJDCloudClient = self
        try GetSubDistributorListExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func modifyOneLevelDistributorInfoAsync(request:ModifyOneLevelDistributorInfoRequest,requestComplation:@escaping ExecuteResult<ModifyOneLevelDistributorInfoResult>) throws {
        partnerJDCloudClient = self
        try ModifyOneLevelDistributorInfoExecutor(jdCloudClient: partnerJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension PartnerJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "partner.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "partner.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
