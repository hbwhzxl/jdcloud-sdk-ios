/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   监听器资源
   监听器资源相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  修改一个监听器实例的信息
public class UpdateListenerRequest:JdCloudRequest
{
    /// 监听器名字,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
    var listenerName:String?

    /// Listener状态, 取值为On或者为Off
    var status:String?

    /// 【alb Https和Tls协议】ssl server证书列表，现只支持一个证书
    var certificateSpecs:CertificateSpec?

    /// 连接保持时间, &gt;&#x3D;1，范围为[1,86400]
    var connectionIdleTimeSeconds:Double?

    /// 默认后端服务id
    var backendId:String?

    /// 监听器描述,允许输入UTF-8编码下的全部字符，不超过256字符
    var description:String?

    /// 监听器ID
    var listenerId:String


    public init(regionId: String,listenerId:String){
        self.listenerId = listenerId
        super.init(regionId: regionId)
    }


    enum UpdateListenerRequestRequestCodingKeys: String, CodingKey {
        case listenerName
        case status
        case certificateSpecs
        case connectionIdleTimeSeconds
        case backendId
        case description
        case listenerId
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: UpdateListenerRequestRequestCodingKeys.self)
        try container.encode(listenerName, forKey: .listenerName)
        try container.encode(status, forKey: .status)
        try container.encode(certificateSpecs, forKey: .certificateSpecs)
        try container.encode(connectionIdleTimeSeconds, forKey: .connectionIdleTimeSeconds)
        try container.encode(backendId, forKey: .backendId)
        try container.encode(description, forKey: .description)
        try container.encode(listenerId, forKey: .listenerId)

    }
}
