/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云DDoS基础防护相关接口
   京东云DDoS基础防护相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class DdosJDCloudClient :JDCloudClient{
    
    private final var ddosJDCloudClient:DdosJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "ddos" + "v1"
    
    public let serviceName: String = "ddos"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func describeIpResourcesAsync(request:DescribeIpResourcesRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourcesResult>) throws {
        ddosJDCloudClient = self
        try DescribeIpResourcesExecutor(jdCloudClient: ddosJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func setCleanThresholdAsync(request:SetCleanThresholdRequest,requestComplation:@escaping ExecuteResult<SetCleanThresholdResult>) throws {
        ddosJDCloudClient = self
        try SetCleanThresholdExecutor(jdCloudClient: ddosJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeIpResourceFlowAsync(request:DescribeIpResourceFlowRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourceFlowResult>) throws {
        ddosJDCloudClient = self
        try DescribeIpResourceFlowExecutor(jdCloudClient: ddosJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeIpResourceInfoAsync(request:DescribeIpResourceInfoRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourceInfoResult>) throws {
        ddosJDCloudClient = self
        try DescribeIpResourceInfoExecutor(jdCloudClient: ddosJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeIpResourceProtectInfoAsync(request:DescribeIpResourceProtectInfoRequest,requestComplation:@escaping ExecuteResult<DescribeIpResourceProtectInfoResult>) throws {
        ddosJDCloudClient = self
        try DescribeIpResourceProtectInfoExecutor(jdCloudClient: ddosJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension DdosJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "ddos.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "ddos.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
