/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   CustomMetric APIs
   自定义监控相关接口

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询所有region的自定义监控规则
public class DescribeAllRegionAlarmsCmRequest:JdCloudRequest
{
    /// 当前所在页，默认为1
    var pageNumber:Int64?

    /// 页面大小，默认为20；取值范围[1, 100]
    var pageSize:Int64?

    /// 命名空间名称
    var namespace:String?

    /// 对象名称
    var obj:String?

    /// 产品名称
    var serviceCode:String?

    /// 资源Id
    var resourceId:String?

    /// 规则报警状态, 1：正常, 2：报警，4：数据不足
    var status:Int64?

    /// 是否为正在报警的规则，0为忽略，1为是，与 status 同时只能生效一个,isAlarming 优先生效
    var isAlarming:Int64?

    /// 规则状态：1为启用，0为禁用
    var enabled:Int64?

    /// region info
    var region:String?




    enum DescribeAllRegionAlarmsCmRequestRequestCodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case namespace
        case obj
        case serviceCode
        case resourceId
        case status
        case isAlarming
        case enabled
        case region
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: DescribeAllRegionAlarmsCmRequestRequestCodingKeys.self)
        try container.encode(pageNumber, forKey: .pageNumber)
        try container.encode(pageSize, forKey: .pageSize)
        try container.encode(namespace, forKey: .namespace)
        try container.encode(obj, forKey: .obj)
        try container.encode(serviceCode, forKey: .serviceCode)
        try container.encode(resourceId, forKey: .resourceId)
        try container.encode(status, forKey: .status)
        try container.encode(isAlarming, forKey: .isAlarming)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(region, forKey: .region)

    }
}
