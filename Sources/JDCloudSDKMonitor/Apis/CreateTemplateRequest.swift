/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Alarm Template APIs
   

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建自定义报警模板
public class CreateTemplateRequest:JdCloudRequest
{
    /// 幂等性校验参数,最长36位
    var clientToken:String

    /// 模板描述
    var description:String?

    /// 规则的资源类型
    var ruleServiceCode:String

    /// 模板的资源类型
    var serviceCode:String

    /// 模板名称,长度1-32个字符，只允许中英文、数字、&#39;&#39;-&#39;&#39;和&quot;_&quot;
    var templateName:String

    /// 模板内包含的规则
    var templateRules:BaseRuleT?


    public init(regionId: String,clientToken:String,ruleServiceCode:String,serviceCode:String,templateName:String,templateRules:BaseRuleT?){
        self.clientToken = clientToken
        self.ruleServiceCode = ruleServiceCode
        self.serviceCode = serviceCode
        self.templateName = templateName
        self.templateRules = templateRules
        super.init(regionId: regionId)
    }


    enum CreateTemplateRequestRequestCodingKeys: String, CodingKey {
        case clientToken
        case description
        case ruleServiceCode
        case serviceCode
        case templateName
        case templateRules
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateTemplateRequestRequestCodingKeys.self)
        try container.encode(clientToken, forKey: .clientToken)
        try container.encode(description, forKey: .description)
        try container.encode(ruleServiceCode, forKey: .ruleServiceCode)
        try container.encode(serviceCode, forKey: .serviceCode)
        try container.encode(templateName, forKey: .templateName)
        try container.encode(templateRules, forKey: .templateRules)

    }
}
