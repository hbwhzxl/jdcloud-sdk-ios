/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   后端服务
   后端服务相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建一个后端服务
public class CreateBackendRequest:JdCloudRequest
{
    /// 后端服务名字,只允许输入中文、数字、大小写字母、英文下划线“_”及中划线“-”，不允许为空且不超过32字符
    var backendName:String

    /// 后端服务所属负载均衡的Id
    var loadBalancerId:String

    /// 后端服务的协议【alb】取值范围：Http、Tcp【nlb】取值范围：Tcp
    var `protocol`:String

    /// 后端服务的端口，取值范围为[1, 65535]，如指定了TargetSpec中的port，实际按照target指定的port进行转发
    var port:Double

    /// 健康检查信息
    var healthCheckSpec:HealthCheckSpec

    /// 调度算法, 取值范围为[IpHash, RoundRobin,和LeastConn]（取值范围的含义分别为：源Ip hash，加权轮询和加权最小连接），默认为RoundRobin（加权轮询）
    var algorithm:String?

    /// 服务器组的Id列表，目前只支持一个，且与agIds不能同时存在
    var targetGroupIds:String?

    /// 可用性组Id列表，目前只支持一个，且与targetGroupIds不能同时存在
    var agIds:String?

    /// 【alb Tcp协议】获取真实ip, 取值为False(不获取)或者True(获取,支持Proxy Protocol v1版本)，默认为False
    var proxyProtocol:Bool?

    /// 描述,允许输入UTF-8编码下的全部字符，不超过256字符
    var description:String?

    /// 后端服务的后端保持, 取值为false(不开启)或者true(开启)，默认为false【alb Http协议，RoundRobin算法】支持基于cookie的会话保持【nlb】支持基于报文源目的IP的会话保持
    var sessionStickiness:Bool?

    /// 【nlb】会话保持超时时间，sessionStickiness开启时生效，默认300s, 取值范围[1-3600]
    var sessionStickyTimeout:Double?

    /// 【nlb】移除target前，连接的最大保持时间，默认300s，取值范围[0-3600]
    var connectionDrainingSeconds:Double?

    /// 【alb Http协议】cookie的过期时间,sessionStickiness开启时生效，取值范围为[0-86400], 默认为0（表示cookie与浏览器同生命周期）
    var httpCookieExpireSeconds:Double?

    /// 【alb Http协议】获取负载均衡的协议, 取值为False(不获取)或True(获取), 默认为False
    var httpForwardedProtocol:Bool?

    /// 【alb Http协议】获取负载均衡的端口, 取值为False(不获取)或True(获取), 默认为False
    var httpForwardedPort:Bool?

    /// 【alb Http协议】获取负载均衡的host信息, 取值为False(不获取)或True(获取), 默认为False
    var httpForwardedHost:Bool?

    /// 【alb Http协议】获取负载均衡的vip, 取值为False(不获取)或True(获取), 默认为False
    var httpForwardedVip:Bool?


    public init(regionId: String,backendName:String,loadBalancerId:String,protocol:String,port:Double,healthCheckSpec:HealthCheckSpec){
        self.backendName = backendName
        self.loadBalancerId = loadBalancerId
        self.`protocol` = `protocol`
        self.port = port
        self.healthCheckSpec = healthCheckSpec
        super.init(regionId: regionId)
    }


    enum CreateBackendRequestRequestCodingKeys: String, CodingKey {
        case backendName
        case loadBalancerId
        case `protocol` = "protocol"
        case port
        case healthCheckSpec
        case algorithm
        case targetGroupIds
        case agIds
        case proxyProtocol
        case description
        case sessionStickiness
        case sessionStickyTimeout
        case connectionDrainingSeconds
        case httpCookieExpireSeconds
        case httpForwardedProtocol
        case httpForwardedPort
        case httpForwardedHost
        case httpForwardedVip
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateBackendRequestRequestCodingKeys.self)
        try container.encode(backendName, forKey: .backendName)
        try container.encode(loadBalancerId, forKey: .loadBalancerId)
        try container.encode(`protocol`, forKey: .`protocol`)
        try container.encode(port, forKey: .port)
        try container.encode(healthCheckSpec, forKey: .healthCheckSpec)
        try container.encode(algorithm, forKey: .algorithm)
        try container.encode(targetGroupIds, forKey: .targetGroupIds)
        try container.encode(agIds, forKey: .agIds)
        try container.encode(proxyProtocol, forKey: .proxyProtocol)
        try container.encode(description, forKey: .description)
        try container.encode(sessionStickiness, forKey: .sessionStickiness)
        try container.encode(sessionStickyTimeout, forKey: .sessionStickyTimeout)
        try container.encode(connectionDrainingSeconds, forKey: .connectionDrainingSeconds)
        try container.encode(httpCookieExpireSeconds, forKey: .httpCookieExpireSeconds)
        try container.encode(httpForwardedProtocol, forKey: .httpForwardedProtocol)
        try container.encode(httpForwardedPort, forKey: .httpForwardedPort)
        try container.encode(httpForwardedHost, forKey: .httpForwardedHost)
        try container.encode(httpForwardedVip, forKey: .httpForwardedVip)

    }
}
