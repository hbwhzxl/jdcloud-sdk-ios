/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Dashboard APIs
   云监控Dashboard相关接口，提供创建、查询、修改、删除Dashboard等功能

   
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  查询Dashboard
public class GetDashboardRequest:JdCloudRequest
{
    /// Name
    var name:String?

    /// Focused
    var focused:String?

    /// PageNo
    var pageNo:Int?

    /// PageSize
    var pageSize:Int?

    /// CreatedTimeOrder
    var createdTimeOrder:String?

    /// UpdatedTimeOrder
    var updatedTimeOrder:String?

    /// FocusedOrder
    var focusedOrder:String?

    /// name为dashboardId - 多个dashboard的id
    var filters:Filter?




    enum GetDashboardRequestRequestCodingKeys: String, CodingKey {
        case name
        case focused
        case pageNo
        case pageSize
        case createdTimeOrder
        case updatedTimeOrder
        case focusedOrder
        case filters
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: GetDashboardRequestRequestCodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(focused, forKey: .focused)
        try container.encode(pageNo, forKey: .pageNo)
        try container.encode(pageSize, forKey: .pageSize)
        try container.encode(createdTimeOrder, forKey: .createdTimeOrder)
        try container.encode(updatedTimeOrder, forKey: .updatedTimeOrder)
        try container.encode(focusedOrder, forKey: .focusedOrder)
        try container.encode(filters, forKey: .filters)

    }
}
