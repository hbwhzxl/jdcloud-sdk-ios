/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   弹性伸缩策略
   弹性伸缩动态策略和定时任务相关操作接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */


import Foundation
import JDCloudSDKCore


///  创建伸缩组动态策略
public class CreateDynamicPolicyRequest:JdCloudRequest
{
    /// 动作类型 1-incr, 2-set(暂不支持), 3-decr
    var action:Int64

    /// 动作值, 实例个数 或 百分比数值
    var actionValue:Int64

    /// 动作类型, 实例(1) 或 百分比(2,目前暂时不支持)
    var actionValueType:Int64

    /// 统计方法：平均值&#x3D;avg、最大值&#x3D;max、最小值&#x3D;min,总和：sum
    var calculation:String

    /// 预热（冷却）时间。秒。若缺，缺省300秒。
    var cooldownPeriod:Int64

    /// 动态策略描述
    var description:String?

    /// 0-不被保护，1-被保护
    var disableScaleIn:Int64?

    /// 监控项
    var metric:String

    /// 动态策略名字
    var name:String

    /// 1：&gt;&#x3D;、2：&gt;、3：&lt;、4：&lt;&#x3D;、5：&#x3D;、6：!&#x3D; 传数字
    var operation:String

    /// 统计周期（单位：分钟）
    var period:Int64

    /// 报警的阈值
    var threshold:Double

    /// 连续多少次后报警
    var times:Int64

    /// 组uuid
    var asGroupUuid:String


    public init(regionId: String,action:Int64,actionValue:Int64,actionValueType:Int64,calculation:String,cooldownPeriod:Int64,metric:String,name:String,operation:String,period:Int64,threshold:Double,times:Int64,asGroupUuid:String){
        self.action = action
        self.actionValue = actionValue
        self.actionValueType = actionValueType
        self.calculation = calculation
        self.cooldownPeriod = cooldownPeriod
        self.metric = metric
        self.name = name
        self.operation = operation
        self.period = period
        self.threshold = threshold
        self.times = times
        self.asGroupUuid = asGroupUuid
        super.init(regionId: regionId)
    }


    enum CreateDynamicPolicyRequestRequestCodingKeys: String, CodingKey {
        case action
        case actionValue
        case actionValueType
        case calculation
        case cooldownPeriod
        case description
        case disableScaleIn
        case metric
        case name
        case operation
        case period
        case threshold
        case times
        case asGroupUuid
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CreateDynamicPolicyRequestRequestCodingKeys.self)
        try container.encode(action, forKey: .action)
        try container.encode(actionValue, forKey: .actionValue)
        try container.encode(actionValueType, forKey: .actionValueType)
        try container.encode(calculation, forKey: .calculation)
        try container.encode(cooldownPeriod, forKey: .cooldownPeriod)
        try container.encode(description, forKey: .description)
        try container.encode(disableScaleIn, forKey: .disableScaleIn)
        try container.encode(metric, forKey: .metric)
        try container.encode(name, forKey: .name)
        try container.encode(operation, forKey: .operation)
        try container.encode(period, forKey: .period)
        try container.encode(threshold, forKey: .threshold)
        try container.encode(times, forKey: .times)
        try container.encode(asGroupUuid, forKey: .asGroupUuid)

    }
}
