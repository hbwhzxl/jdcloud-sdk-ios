/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   京东云jdsf接口
   jcq相关接口

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class JdsfJDCloudClient :JDCloudClient{
    
    private final var jdsfJDCloudClient:JdsfJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "jdsf" + "v1"
    
    public let serviceName: String = "jdsf"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func clearCachesAsync(request:ClearCachesRequest,requestComplation:@escaping ExecuteResult<ClearCachesResult>) throws {
        jdsfJDCloudClient = self
        try ClearCachesExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteAppConfigVersionAsync(request:DeleteAppConfigVersionRequest,requestComplation:@escaping ExecuteResult<DeleteAppConfigVersionResult>) throws {
        jdsfJDCloudClient = self
        try DeleteAppConfigVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getAllServiceGraphAsync(request:GetAllServiceGraphRequest,requestComplation:@escaping ExecuteResult<GetAllServiceGraphResult>) throws {
        jdsfJDCloudClient = self
        try GetAllServiceGraphExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateTraceClusterAsync(request:UpdateTraceClusterRequest,requestComplation:@escaping ExecuteResult<UpdateTraceClusterResult>) throws {
        jdsfJDCloudClient = self
        try UpdateTraceClusterExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAppConfigPublishVersionAsync(request:DescribeAppConfigPublishVersionRequest,requestComplation:@escaping ExecuteResult<DescribeAppConfigPublishVersionResult>) throws {
        jdsfJDCloudClient = self
        try DescribeAppConfigPublishVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceDetailAsync(request:DescribeTraceDetailRequest,requestComplation:@escaping ExecuteResult<DescribeTraceDetailResult>) throws {
        jdsfJDCloudClient = self
        try DescribeTraceDetailExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAppConfigsAsync(request:DescribeAppConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeAppConfigsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeAppConfigsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegistriesAsync(request:DescribeRegistriesRequest,requestComplation:@escaping ExecuteResult<DescribeRegistriesResult>) throws {
        jdsfJDCloudClient = self
        try DescribeRegistriesExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func publishAppConfigVersionAsync(request:PublishAppConfigVersionRequest,requestComplation:@escaping ExecuteResult<PublishAppConfigVersionResult>) throws {
        jdsfJDCloudClient = self
        try PublishAppConfigVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func recreateRegistryAsync(request:RecreateRegistryRequest,requestComplation:@escaping ExecuteResult<RecreateRegistryResult>) throws {
        jdsfJDCloudClient = self
        try RecreateRegistryExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRollbackAppConfigVersionAsync(request:DescribeRollbackAppConfigVersionRequest,requestComplation:@escaping ExecuteResult<DescribeRollbackAppConfigVersionResult>) throws {
        jdsfJDCloudClient = self
        try DescribeRollbackAppConfigVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceConfigsAsync(request:DescribeTraceConfigsRequest,requestComplation:@escaping ExecuteResult<DescribeTraceConfigsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeTraceConfigsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeVpcsAsync(request:DescribeVpcsRequest,requestComplation:@escaping ExecuteResult<DescribeVpcsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeVpcsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteTraceClusterAsync(request:DeleteTraceClusterRequest,requestComplation:@escaping ExecuteResult<DeleteTraceClusterResult>) throws {
        jdsfJDCloudClient = self
        try DeleteTraceClusterExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteAppConfigAsync(request:DeleteAppConfigRequest,requestComplation:@escaping ExecuteResult<DeleteAppConfigResult>) throws {
        jdsfJDCloudClient = self
        try DeleteAppConfigExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeServicesAsync(request:DescribeServicesRequest,requestComplation:@escaping ExecuteResult<DescribeServicesResult>) throws {
        jdsfJDCloudClient = self
        try DescribeServicesExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func rollbackAppConfigVersionAsync(request:RollbackAppConfigVersionRequest,requestComplation:@escaping ExecuteResult<RollbackAppConfigVersionResult>) throws {
        jdsfJDCloudClient = self
        try RollbackAppConfigVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeServiceInstanceDetailAsync(request:DescribeServiceInstanceDetailRequest,requestComplation:@escaping ExecuteResult<DescribeServiceInstanceDetailResult>) throws {
        jdsfJDCloudClient = self
        try DescribeServiceInstanceDetailExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAppConfigVersionAsync(request:DescribeAppConfigVersionRequest,requestComplation:@escaping ExecuteResult<DescribeAppConfigVersionResult>) throws {
        jdsfJDCloudClient = self
        try DescribeAppConfigVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createRegistryAsync(request:CreateRegistryRequest,requestComplation:@escaping ExecuteResult<CreateRegistryResult>) throws {
        jdsfJDCloudClient = self
        try CreateRegistryExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteRegistryAsync(request:DeleteRegistryRequest,requestComplation:@escaping ExecuteResult<DeleteRegistryResult>) throws {
        jdsfJDCloudClient = self
        try DeleteRegistryExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeServiceInstancesAsync(request:DescribeServiceInstancesRequest,requestComplation:@escaping ExecuteResult<DescribeServiceInstancesResult>) throws {
        jdsfJDCloudClient = self
        try DescribeServiceInstancesExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAppConfigPublishsAsync(request:DescribeAppConfigPublishsRequest,requestComplation:@escaping ExecuteResult<DescribeAppConfigPublishsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeAppConfigPublishsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceListAsync(request:DescribeTraceListRequest,requestComplation:@escaping ExecuteResult<DescribeTraceListResult>) throws {
        jdsfJDCloudClient = self
        try DescribeTraceListExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegionsAsync(request:DescribeRegionsRequest,requestComplation:@escaping ExecuteResult<DescribeRegionsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeRegionsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createTraceClusterAsync(request:CreateTraceClusterRequest,requestComplation:@escaping ExecuteResult<CreateTraceClusterResult>) throws {
        jdsfJDCloudClient = self
        try CreateTraceClusterExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegistrySpecsAsync(request:DescribeRegistrySpecsRequest,requestComplation:@escaping ExecuteResult<DescribeRegistrySpecsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeRegistrySpecsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeAppConfigVersionsAsync(request:DescribeAppConfigVersionsRequest,requestComplation:@escaping ExecuteResult<DescribeAppConfigVersionsResult>) throws {
        jdsfJDCloudClient = self
        try DescribeAppConfigVersionsExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceClustersAsync(request:DescribeTraceClustersRequest,requestComplation:@escaping ExecuteResult<DescribeTraceClustersResult>) throws {
        jdsfJDCloudClient = self
        try DescribeTraceClustersExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeTraceClusterAsync(request:DescribeTraceClusterRequest,requestComplation:@escaping ExecuteResult<DescribeTraceClusterResult>) throws {
        jdsfJDCloudClient = self
        try DescribeTraceClusterExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func describeRegistryAsync(request:DescribeRegistryRequest,requestComplation:@escaping ExecuteResult<DescribeRegistryResult>) throws {
        jdsfJDCloudClient = self
        try DescribeRegistryExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updateRegistryAsync(request:UpdateRegistryRequest,requestComplation:@escaping ExecuteResult<UpdateRegistryResult>) throws {
        jdsfJDCloudClient = self
        try UpdateRegistryExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getServiceStatAsync(request:GetServiceStatRequest,requestComplation:@escaping ExecuteResult<GetServiceStatResult>) throws {
        jdsfJDCloudClient = self
        try GetServiceStatExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createAppConfigVersionAsync(request:CreateAppConfigVersionRequest,requestComplation:@escaping ExecuteResult<CreateAppConfigVersionResult>) throws {
        jdsfJDCloudClient = self
        try CreateAppConfigVersionExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createAppConfigAsync(request:CreateAppConfigRequest,requestComplation:@escaping ExecuteResult<CreateAppConfigResult>) throws {
        jdsfJDCloudClient = self
        try CreateAppConfigExecutor(jdCloudClient: jdsfJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension JdsfJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "jdsf.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "jdsf.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
