/* Copyright 2018 JDCLOUD.COM

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http:#www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   云流水线
   云流水线API

   OpenAPI spec version: v1
   Contact: 

   NOTE: This class is auto generated by the jdcloud code generator program.
 */



import Foundation
import JDCloudSDKCore

public class PipelineJDCloudClient :JDCloudClient{
    
    private final var pipelineJDCloudClient:PipelineJDCloudClient!
    
    init(credential:Credential,sdkEnvironment:SDKEnvironment) {
         self.credential = credential
         self.sdkEnvironment = sdkEnvironment 
    } 
    
    public let userAgent: String = "JdcloudSdkSwift" + "0.0.1" + "pipeline" + "v1"
    
    public let serviceName: String = "pipeline"
    
    public let version: String = "0.0.1"
    
    public let contentType:String = "application/json"
    
    public var credential: Credential
    
    public var sdkEnvironment: SDKEnvironment
    
    public var customHeader: [String : String] = [String:String]()
    
    public var httpRequestProtocol: String = "https"
    
    public func addCustomer(key: String, value: String) {
        customHeader[key] = value
    }
    
    public func getPipelinesAsync(request:GetPipelinesRequest,requestComplation:@escaping ExecuteResult<GetPipelinesResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelinesExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func startPipelineAsync(request:StartPipelineRequest,requestComplation:@escaping ExecuteResult<StartPipelineResult>) throws {
        pipelineJDCloudClient = self
        try StartPipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getK8sesAsync(request:GetK8sesRequest,requestComplation:@escaping ExecuteResult<GetK8sesResult>) throws {
        pipelineJDCloudClient = self
        try GetK8sesExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func createPipelineAsync(request:CreatePipelineRequest,requestComplation:@escaping ExecuteResult<CreatePipelineResult>) throws {
        pipelineJDCloudClient = self
        try CreatePipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getBuildJobsAsync(request:GetBuildJobsRequest,requestComplation:@escaping ExecuteResult<GetBuildJobsResult>) throws {
        pipelineJDCloudClient = self
        try GetBuildJobsExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func updatePipelineAsync(request:UpdatePipelineRequest,requestComplation:@escaping ExecuteResult<UpdatePipelineResult>) throws {
        pipelineJDCloudClient = self
        try UpdatePipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getPipelineHistoryStatusAsync(request:GetPipelineHistoryStatusRequest,requestComplation:@escaping ExecuteResult<GetPipelineHistoryStatusResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineHistoryStatusExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getProjectsAsync(request:GetProjectsRequest,requestComplation:@escaping ExecuteResult<GetProjectsResult>) throws {
        pipelineJDCloudClient = self
        try GetProjectsExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getBranchesAsync(request:GetBranchesRequest,requestComplation:@escaping ExecuteResult<GetBranchesResult>) throws {
        pipelineJDCloudClient = self
        try GetBranchesExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getPipelineAsync(request:GetPipelineRequest,requestComplation:@escaping ExecuteResult<GetPipelineResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getPipelineHistoryAsync(request:GetPipelineHistoryRequest,requestComplation:@escaping ExecuteResult<GetPipelineHistoryResult>) throws {
        pipelineJDCloudClient = self
        try GetPipelineHistoryExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func checkCodeAccessSetAsync(request:CheckCodeAccessSetRequest,requestComplation:@escaping ExecuteResult<CheckCodeAccessSetResult>) throws {
        pipelineJDCloudClient = self
        try CheckCodeAccessSetExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deletePipelineAsync(request:DeletePipelineRequest,requestComplation:@escaping ExecuteResult<DeletePipelineResult>) throws {
        pipelineJDCloudClient = self
        try DeletePipelineExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func codeAccessSetAsync(request:CodeAccessSetRequest,requestComplation:@escaping ExecuteResult<CodeAccessSetResult>) throws {
        pipelineJDCloudClient = self
        try CodeAccessSetExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getUserBucketsAsync(request:GetUserBucketsRequest,requestComplation:@escaping ExecuteResult<GetUserBucketsResult>) throws {
        pipelineJDCloudClient = self
        try GetUserBucketsExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func grantCodeAccessAsync(request:GrantCodeAccessRequest,requestComplation:@escaping ExecuteResult<GrantCodeAccessResult>) throws {
        pipelineJDCloudClient = self
        try GrantCodeAccessExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getSourceProvidersAsync(request:GetSourceProvidersRequest,requestComplation:@escaping ExecuteResult<GetSourceProvidersResult>) throws {
        pipelineJDCloudClient = self
        try GetSourceProvidersExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func deleteCodeAccessAsync(request:DeleteCodeAccessRequest,requestComplation:@escaping ExecuteResult<DeleteCodeAccessResult>) throws {
        pipelineJDCloudClient = self
        try DeleteCodeAccessExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getOperationProvidersAsync(request:GetOperationProvidersRequest,requestComplation:@escaping ExecuteResult<GetOperationProvidersResult>) throws {
        pipelineJDCloudClient = self
        try GetOperationProvidersExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    public func getBranchAsync(request:GetBranchRequest,requestComplation:@escaping ExecuteResult<GetBranchResult>) throws {
        pipelineJDCloudClient = self
        try GetBranchExecutor(jdCloudClient: pipelineJDCloudClient).executeAsync(request: request){(statusCode,result, error,data) in
             requestComplation(statusCode,result,error,data)
        }
    } 
    
}


public extension PipelineJDCloudClient{

    convenience init(credential: Credential) {

        var sdkEnvironment:SDKEnvironment
        if(GlobalConfig.sdkEnvironment != nil)
        {
            sdkEnvironment = GlobalConfig.sdkEnvironment!
        }else{
            sdkEnvironment = SDKEnvironment(endPoint: "pipeline.jdcloud-api.com");
        }
        self.init(credential: credential,sdkEnvironment: sdkEnvironment)
    }

    convenience init() throws{

        if(GlobalConfig.credential == nil)
        {
            throw SDKError.argumentNullError("credential can not be nil")
        }else{
              var sdkEnvironment:SDKEnvironment
            if(GlobalConfig.sdkEnvironment != nil)
            {
                sdkEnvironment = GlobalConfig.sdkEnvironment!
            }else{
                sdkEnvironment = SDKEnvironment(endPoint: "pipeline.jdcloud-api.com");
            }
            self.init(credential: GlobalConfig.credential!,sdkEnvironment: sdkEnvironment)
        }

    }
}
